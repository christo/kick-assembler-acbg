Kick Assembler file
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('64')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.DIVIDE)('/')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerBasicValueImpl(BASIC_VALUE)
              PsiElement(KickAssemblerTokenType.NUMBER)('6')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        PsiElement(KickAssemblerTokenType.LEFT_BRACKET)('[')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$aa')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$aa')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$aa')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$55')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$55')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$55')
        PsiElement(KickAssemblerTokenType.RIGHT_BRACKET)(']')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Nomal filling')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('5')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('0')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates byte 0,0,0,0,0')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('5')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('i')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates byte 0,1,2,3,4')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('256')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('127.5')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.PLUS)('+')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerBasicValueImpl(BASIC_VALUE)
              PsiElement(KickAssemblerTokenType.NUMBER)('127.5')
            KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
              PsiElement(KickAssemblerTokenType.ASTERISK)('*')
            KickAssemblerExprImpl(EXPR)
              KickAssemblerInvocationImpl(INVOCATION)
                KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                  PsiElement(KickAssemblerTokenType.LABEL)('sin')
                PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
                KickAssemblerExprImpl(EXPR)
                  KickAssemblerInvocationImpl(INVOCATION)
                    KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                      PsiElement(KickAssemblerTokenType.LABEL)('toRadians')
                    PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
                    KickAssemblerExprImpl(EXPR)
                      KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                        PsiElement(KickAssemblerTokenType.LABEL)('i')
                      KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                        PsiElement(KickAssemblerTokenType.ASTERISK)('*')
                      KickAssemblerExprImpl(EXPR)
                        KickAssemblerBasicValueImpl(BASIC_VALUE)
                          PsiElement(KickAssemblerTokenType.NUMBER)('360')
                        KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                          PsiElement(KickAssemblerTokenType.DIVIDE)('/')
                        KickAssemblerExprImpl(EXPR)
                          KickAssemblerBasicValueImpl(BASIC_VALUE)
                            PsiElement(KickAssemblerTokenType.NUMBER)('256')
                    PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
                PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates a sine curve')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Use [,,] to fill with a repeat pattern')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('4')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        PsiElement(KickAssemblerTokenType.LEFT_BRACKET)('[')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$10')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$20')
        PsiElement(KickAssemblerTokenType.RIGHT_BRACKET)(']')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates .byte $10,$20,$10,$20,$10,$20,$10,$20')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('3')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        PsiElement(KickAssemblerTokenType.LEFT_BRACKET)('[')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''D'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''E'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''M'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''O'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''!'')
        PsiElement(KickAssemblerTokenType.RIGHT_BRACKET)(']')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates the same bytes as .text "DEMO!DEMO! DEMO!"')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fill')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('3')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        PsiElement(KickAssemblerTokenType.LEFT_BRACKET)('[')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('i')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('i')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.ASTERISK)('*')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerBasicValueImpl(BASIC_VALUE)
              PsiElement(KickAssemblerTokenType.NUMBER)('$10')
        PsiElement(KickAssemblerTokenType.RIGHT_BRACKET)(']')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates .byte 0,0,1,$10,2,$20')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// .fillword is like .fill but with .word directives')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fillword')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('5')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('i')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.ASTERISK)('*')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerBasicValueImpl(BASIC_VALUE)
              PsiElement(KickAssemblerTokenType.NUMBER)('$80')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates .word $0000,$0080,$0100,$0180,$0200')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('fillword')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('2')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        PsiElement(KickAssemblerTokenType.LEFT_BRACKET)('[')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('$100')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.NUMBER)('0')
        PsiElement(KickAssemblerTokenType.RIGHT_BRACKET)(']')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Generates .word $0100,$0000,$0100,$0000')