Kick Assembler file
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Add the xâ€™th entry of a table if x is positive or')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// subtract it if x is negative')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerIfElseImpl(IF_ELSE)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_IF)('if')
        PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('x')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.GREATER_EQUALS)('>=')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerBasicValueImpl(BASIC_VALUE)
              PsiElement(KickAssemblerTokenType.NUMBER)('0')
        PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
        KickAssemblerStatementImpl(STATEMENT)
          KickAssemblerInstructionImpl(INSTRUCTION)
            PsiElement(KickAssemblerTokenType.MNEMONIC12)('adc')
            KickAssemblerArgumentImpl(ARGUMENT)
              KickAssemblerExprImpl(EXPR)
                KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                  PsiElement(KickAssemblerTokenType.LABEL)('zpXtable')
                KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                  PsiElement(KickAssemblerTokenType.PLUS)('+')
                KickAssemblerExprImpl(EXPR)
                  KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                    PsiElement(KickAssemblerTokenType.LABEL)('x')
        PsiElement(KickAssemblerTokenType.ELSE)('else')
        KickAssemblerStatementImpl(STATEMENT)
          KickAssemblerInstructionImpl(INSTRUCTION)
            PsiElement(KickAssemblerTokenType.MNEMONIC12)('sbc')
            KickAssemblerArgumentImpl(ARGUMENT)
              KickAssemblerExprImpl(EXPR)
                KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                  PsiElement(KickAssemblerTokenType.LABEL)('zpXtable')
                KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                  PsiElement(KickAssemblerTokenType.PLUS)('+')
                KickAssemblerExprImpl(EXPR)
                  KickAssemblerInvocationImpl(INVOCATION)
                    KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                      PsiElement(KickAssemblerTokenType.LABEL)('abs')
                    PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
                    KickAssemblerExprImpl(EXPR)
                      KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                        PsiElement(KickAssemblerTokenType.LABEL)('x')
                    PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// Init an offset table or display a warning if the table length is exceeded')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerIfElseImpl(IF_ELSE)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_IF)('if')
        PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerScopedLabelImpl(SCOPED_LABEL)
            PsiElement(KickAssemblerTokenType.LABEL)('i')
          KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
            PsiElement(KickAssemblerTokenType.LESS)('<')
          KickAssemblerExprImpl(EXPR)
            KickAssemblerScopedLabelImpl(SCOPED_LABEL)
              PsiElement(KickAssemblerTokenType.LABEL)('tableLength')
        PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
        KickAssemblerStatementImpl(STATEMENT)
          KickAssemblerBlockImpl(BLOCK)
            PsiElement(KickAssemblerTokenType.LEFT_BRACE)('{')
            KickAssemblerStatementImpl(STATEMENT)
              KickAssemblerInstructionImpl(INSTRUCTION)
                PsiElement(KickAssemblerTokenType.MNEMONIC12)('lda')
                KickAssemblerArgumentImpl(ARGUMENT)
                  PsiElement(KickAssemblerTokenType.HASH)('#')
                  KickAssemblerExprImpl(EXPR)
                    KickAssemblerBasicValueImpl(BASIC_VALUE)
                      PsiElement(KickAssemblerTokenType.NUMBER)('0')
            KickAssemblerStatementImpl(STATEMENT)
              KickAssemblerInstructionImpl(INSTRUCTION)
                PsiElement(KickAssemblerTokenType.MNEMONIC12)('sta')
                KickAssemblerArgumentImpl(ARGUMENT)
                  KickAssemblerExprImpl(EXPR)
                    KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                      PsiElement(KickAssemblerTokenType.LABEL)('offset1')
                    KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                      PsiElement(KickAssemblerTokenType.PLUS)('+')
                    KickAssemblerExprImpl(EXPR)
                      KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                        PsiElement(KickAssemblerTokenType.LABEL)('i')
            KickAssemblerStatementImpl(STATEMENT)
              KickAssemblerInstructionImpl(INSTRUCTION)
                PsiElement(KickAssemblerTokenType.MNEMONIC12)('sta')
                KickAssemblerArgumentImpl(ARGUMENT)
                  KickAssemblerExprImpl(EXPR)
                    KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                      PsiElement(KickAssemblerTokenType.LABEL)('offset2')
                    KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                      PsiElement(KickAssemblerTokenType.PLUS)('+')
                    KickAssemblerExprImpl(EXPR)
                      KickAssemblerScopedLabelImpl(SCOPED_LABEL)
                        PsiElement(KickAssemblerTokenType.LABEL)('i')
            PsiElement(KickAssemblerTokenType.RIGHT_BRACE)('}')
        PsiElement(KickAssemblerTokenType.ELSE)('else')
        KickAssemblerStatementImpl(STATEMENT)
          KickAssemblerBlockImpl(BLOCK)
            PsiElement(KickAssemblerTokenType.LEFT_BRACE)('{')
            KickAssemblerStatementImpl(STATEMENT)
              KickAssemblerInvocationImpl(INVOCATION)
                PsiElement(KickAssemblerTokenType.DOT)('.')
                PsiElement(KickAssemblerTokenType.DIRECTIVE_UNARY)('error')
                KickAssemblerExprImpl(EXPR)
                  KickAssemblerBasicValueImpl(BASIC_VALUE)
                    PsiElement(KickAssemblerTokenType.STRING)('"Error!! I is too high!"')
            PsiElement(KickAssemblerTokenType.RIGHT_BRACE)('}')