Kick Assembler file
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// character literal')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('byte')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''h'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''e'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''l'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''l'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.CHAR)(''o'')
        PsiElement(KickAssemblerTokenType.COMMA)(',')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.ESCAPE_CHAR)(''\n'')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerDataDefinitionImpl(DATA_DEFINITION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_DATA)('text')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBasicValueImpl(BASIC_VALUE)
            PsiElement(KickAssemblerTokenType.STRING)('"world"')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerInvocationImpl(INVOCATION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_UNARY)('printnow')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBracketedImpl(BRACKETED)
            PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
            KickAssemblerExprImpl(EXPR)
              KickAssemblerBasicValueImpl(BASIC_VALUE)
                PsiElement(KickAssemblerTokenType.STRING)('"literal single quote char: "')
              KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                PsiElement(KickAssemblerTokenType.PLUS)('+')
              KickAssemblerExprImpl(EXPR)
                KickAssemblerBasicValueImpl(BASIC_VALUE)
                  PsiElement(KickAssemblerTokenType.CHAR)(''''')
            PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerInvocationImpl(INVOCATION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_UNARY)('printnow')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBracketedImpl(BRACKETED)
            PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
            KickAssemblerExprImpl(EXPR)
              KickAssemblerBasicValueImpl(BASIC_VALUE)
                PsiElement(KickAssemblerTokenType.CHAR)(''a'')
              PsiComment(KickAssemblerTokenType.COMMENT_BLOCK)('/* char to char concat */')
              KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                PsiElement(KickAssemblerTokenType.PLUS)('+')
              KickAssemblerExprImpl(EXPR)
                KickAssemblerBasicValueImpl(BASIC_VALUE)
                  PsiElement(KickAssemblerTokenType.CHAR)(''b'')
                KickAssemblerInfixOperatorImpl(INFIX_OPERATOR)
                  PsiElement(KickAssemblerTokenType.PLUS)('+')
                KickAssemblerExprImpl(EXPR)
                  KickAssemblerBasicValueImpl(BASIC_VALUE)
                    PsiElement(KickAssemblerTokenType.CHAR)(''c'')
            PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerInvocationImpl(INVOCATION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_UNARY)('printnow')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBracketedImpl(BRACKETED)
            PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
            KickAssemblerExprImpl(EXPR)
              KickAssemblerBasicValueImpl(BASIC_VALUE)
                PsiElement(KickAssemblerTokenType.CHAR)(''\'')
            PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// the backslash is not escape in a char literal')
  KickAssemblerRootImpl(ROOT)
    KickAssemblerStatementImpl(STATEMENT)
      KickAssemblerInvocationImpl(INVOCATION)
        PsiElement(KickAssemblerTokenType.DOT)('.')
        PsiElement(KickAssemblerTokenType.DIRECTIVE_UNARY)('printnow')
        KickAssemblerExprImpl(EXPR)
          KickAssemblerBracketedImpl(BRACKETED)
            PsiElement(KickAssemblerTokenType.LEFT_PAREN)('(')
            KickAssemblerExprImpl(EXPR)
              KickAssemblerBasicValueImpl(BASIC_VALUE)
                PsiElement(KickAssemblerTokenType.CHAR)(''\''')
            PsiElement(KickAssemblerTokenType.RIGHT_PAREN)(')')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// except when it is')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// the following fails in kick 5.16 with Error: Unterminated string')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('//.printnow('\"')')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('// the following fails in kick 5.16 with Error: Can't get a double representation from a value of type String')
  PsiComment(KickAssemblerTokenType.COMMENT_LINE)('//.printnow('\n' + "that was a newline")')