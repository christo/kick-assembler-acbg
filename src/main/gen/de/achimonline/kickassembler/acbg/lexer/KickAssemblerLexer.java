/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;
  public static final int SYMBOL_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\31\1\27\1\42\1\43\1\30\22\0\1\31\1\101\1\45\1\55\1\36\1\37\1\73\1"+
    "\41\1\57\1\60\1\51\1\77\1\67\1\100\1\34\1\50\2\40\1\26\7\32\1\47\1\70\1\71"+
    "\1\65\1\72\1\102\1\66\1\35\1\53\4\35\16\46\1\54\5\46\1\63\1\44\1\64\1\75\1"+
    "\33\1\0\1\17\1\1\1\4\1\10\1\12\1\52\1\103\1\22\1\6\1\25\1\3\1\5\1\24\1\13"+
    "\1\14\1\15\1\23\1\2\1\11\1\16\1\56\1\7\1\104\1\20\1\21\1\105\1\61\1\74\1\62"+
    "\1\76\6\0\1\42\242\0\2\42\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\2\1\3\2\4\1\5\1\6\4\1"+
    "\1\7\1\10\1\11\2\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\2\41\1\42\2\41\1\42"+
    "\7\41\1\43\1\41\1\44\2\41\1\45\1\41\1\43"+
    "\20\2\1\46\1\47\1\50\7\2\1\51\47\2\2\0"+
    "\2\3\4\0\1\52\1\53\1\54\1\55\2\2\4\0"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\2\0\1\72\6\0\1\42"+
    "\1\73\4\0\1\72\7\0\1\74\2\0\1\72\3\0"+
    "\1\42\3\0\1\75\3\0\1\72\2\0\1\43\1\2"+
    "\1\76\6\2\1\77\3\2\1\76\7\2\1\100\2\2"+
    "\1\76\10\2\1\76\2\2\1\101\1\102\1\103\1\104"+
    "\1\2\1\105\1\106\1\105\3\2\1\102\1\3\2\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\2\2\1\0"+
    "\1\110\4\0\1\111\4\0\1\112\4\0\1\113\25\0"+
    "\1\114\4\0\4\2\1\115\3\2\1\113\24\2\1\116"+
    "\5\2\1\117\1\120\1\121\1\0\1\122\1\54\1\2"+
    "\7\0\1\72\5\0\1\123\4\0\1\124\1\0\1\125"+
    "\11\0\1\75\1\72\1\126\3\0\1\2\1\76\5\2"+
    "\1\127\4\2\1\130\1\2\1\131\11\2\1\76\1\132"+
    "\4\2\2\0\1\133\2\0\1\134\2\0\1\135\4\0"+
    "\1\136\2\0\1\136\2\0\1\137\3\0\1\140\4\0"+
    "\1\141\1\142\1\143\2\2\1\144\4\2\1\145\2\2"+
    "\1\145\2\2\1\146\3\2\1\147\4\2\1\150\1\151"+
    "\1\2\2\0\1\152\1\153\1\0\1\154\1\155\1\0"+
    "\1\156\4\0\1\136\1\0\1\157\1\0\1\160\3\0"+
    "\1\161\1\2\1\162\1\163\1\2\1\164\4\2\1\145"+
    "\1\2\1\165\1\2\1\166\4\2\1\167\2\0\1\170"+
    "\1\171\12\0\2\2\1\172\1\173\13\2\4\0\1\174"+
    "\2\0\1\175\3\0\1\176\3\2\1\177\2\2\1\200"+
    "\3\2\1\201\1\2\4\0\1\202\4\0\3\2\1\203"+
    "\5\2\1\0\1\204\1\205\1\126\3\0\1\206\1\207"+
    "\1\210\1\132\3\2\1\211\1\2\1\212\2\0\3\2"+
    "\2\0\2\2\1\213\1\214";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u015e\0\u0690\0\u015e\0\u015e\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u015e\0\u07ee\0\u015e\0\u0834\0\u087a\0\u08c0\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u0906\0\u094c\0\u015e\0\u015e"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u015e\0\u015e\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u015e\0\u0b7c\0\u0bc2\0\u015e\0\u015e\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u015e"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u015e\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u015e\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u07a8\0\u015e\0\u24a4\0\u24ea\0\u015e"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u015e\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c"+
    "\0\u2c92\0\u015e\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36"+
    "\0\u015e\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020"+
    "\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250"+
    "\0\u3296\0\u32dc\0\u3322\0\u3368\0\u0230\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"+
    "\0\u0230\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854"+
    "\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u0230"+
    "\0\u0230\0\u0230\0\u0230\0\u3a84\0\u0230\0\u0230\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3aca\0\u3be2\0\u06d6\0\u238c\0\u015e\0\u3c28"+
    "\0\u23d2\0\u3c6e\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u015e"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u26d4\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u015e\0\u3ffc\0\u4042\0\u4088\0\u3138\0\u015e\0\u40ce"+
    "\0\u4114\0\u3066\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8"+
    "\0\u452e\0\u4574\0\u45ba\0\u4600\0\u015e\0\u4646\0\u468c\0\u46d2"+
    "\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u0230\0\u4876\0\u48bc"+
    "\0\u4902\0\u0230\0\u4948\0\u498e\0\u39b2\0\u49d4\0\u4a1a\0\u4a60"+
    "\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u0230\0\u4e7a"+
    "\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u0230\0\u0230\0\u0230\0\u3be2"+
    "\0\u015e\0\u015e\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136"+
    "\0\u517c\0\u51c2\0\u015e\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320"+
    "\0\u015e\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u015e\0\u547e\0\u015e"+
    "\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae"+
    "\0\u56f4\0\u015e\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898"+
    "\0\u0230\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u0230\0\u5a3c"+
    "\0\u5a82\0\u5ac8\0\u5b0e\0\u0230\0\u5b54\0\u0230\0\u5b9a\0\u5be0"+
    "\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10"+
    "\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u015e"+
    "\0\u6040\0\u6086\0\u015e\0\u60cc\0\u6112\0\u015e\0\u6158\0\u619e"+
    "\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce"+
    "\0\u015e\0\u6414\0\u645a\0\u64a0\0\u015e\0\u2aa8\0\u64e6\0\u652c"+
    "\0\u6572\0\u015e\0\u015e\0\u0230\0\u65b8\0\u65fe\0\u0230\0\u6644"+
    "\0\u668a\0\u66d0\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874"+
    "\0\u68ba\0\u0230\0\u6900\0\u6946\0\u698c\0\u0230\0\u3480\0\u69d2"+
    "\0\u6a18\0\u6a5e\0\u0230\0\u0230\0\u6aa4\0\u6aea\0\u6b30\0\u015e"+
    "\0\u015e\0\u6b76\0\u6bbc\0\u015e\0\u6c02\0\u015e\0\u6c48\0\u6c8e"+
    "\0\u6cd4\0\u6d1a\0\u015e\0\u6d60\0\u6da6\0\u6dec\0\u015e\0\u6e32"+
    "\0\u6e78\0\u6ebe\0\u0230\0\u6f04\0\u6f4a\0\u0230\0\u6f90\0\u0230"+
    "\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u0230\0\u70ee\0\u7134\0\u717a"+
    "\0\u0230\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364"+
    "\0\u73aa\0\u015e\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e"+
    "\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u0230"+
    "\0\u777e\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968"+
    "\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52\0\u015e"+
    "\0\u7b98\0\u7bde\0\u015e\0\u7c24\0\u7c6a\0\u7cb0\0\u015e\0\u7cf6"+
    "\0\u7d3c\0\u7d82\0\u0230\0\u7dc8\0\u7e0e\0\u0230\0\u7e54\0\u7e9a"+
    "\0\u7ee0\0\u0230\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u015e"+
    "\0\u8084\0\u80ca\0\u8110\0\u8156\0\u819c\0\u81e2\0\u8228\0\u0230"+
    "\0\u826e\0\u82b4\0\u82fa\0\u8340\0\u8386\0\u83cc\0\u015e\0\u015e"+
    "\0\u015e\0\u8412\0\u8458\0\u849e\0\u015e\0\u0230\0\u0230\0\u0230"+
    "\0\u84e4\0\u852a\0\u8570\0\u0230\0\u85b6\0\u015e\0\u85fc\0\u8642"+
    "\0\u8688\0\u86ce\0\u8714\0\u875a\0\u87a0\0\u87e6\0\u882c\0\u0230"+
    "\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\11\1\27\1\30\1\31\1\32\1\33\1\30"+
    "\1\11\1\34\1\11\1\35\1\36\1\30\1\37\1\6"+
    "\1\33\1\6\1\40\1\11\1\41\1\42\1\43\1\44"+
    "\1\45\1\11\1\46\1\11\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\3\11\27\73\2\0\13\73\1\74\1\75\40\73\1\76"+
    "\1\77\1\100\1\76\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\76\1\111\1\112\1\113\4\76"+
    "\1\114\2\76\3\115\11\76\1\115\4\76\1\116\1\76"+
    "\1\117\15\76\1\120\13\76\1\121\1\122\1\0\1\123"+
    "\1\124\1\11\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\11\1\135\1\136\1\137\4\11\1\140"+
    "\1\11\5\0\1\11\1\0\1\11\10\0\1\11\3\0"+
    "\1\141\2\11\1\0\1\11\24\0\1\11\1\142\1\11"+
    "\1\0\25\143\1\0\3\144\1\0\1\143\1\0\1\143"+
    "\5\0\1\144\2\0\1\143\3\0\3\143\1\0\1\143"+
    "\7\0\1\145\14\0\3\143\107\0\1\11\1\146\1\11"+
    "\1\147\1\11\1\150\1\147\2\11\1\151\1\152\1\11"+
    "\1\153\6\11\1\154\2\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\156\2\11\1\156"+
    "\6\11\1\157\1\11\1\160\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\161"+
    "\6\11\1\162\1\163\6\11\1\164\2\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\165"+
    "\1\166\5\11\1\167\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\10\11\1\170\1\11\1\171"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\1\172\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\173\5\11\1\171"+
    "\14\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\174\1\175\2\11\1\176\1\177\3\11\1\200"+
    "\3\11\1\165\1\201\2\11\1\202\4\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\203"+
    "\6\11\1\204\12\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\205\12\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\206\24\0\3\11\1\0\1\11\1\207"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\210\14\11\1\210\4\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\211"+
    "\6\11\1\212\5\11\1\213\1\214\1\215\5\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\177\2\11\1\177\2\11\1\216\1\217\1\11\1\220"+
    "\4\11\1\221\1\11\1\222\4\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\16\11\1\156\7\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\223\12\11\1\224\2\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\26\0\1\30\3\0\1\30"+
    "\1\225\1\226\3\0\1\30\74\0\1\31\57\0\1\227"+
    "\2\0\1\227\3\0\1\227\1\0\1\227\4\0\1\227"+
    "\6\0\1\227\3\0\1\227\2\0\1\227\2\0\1\227"+
    "\11\0\2\227\72\0\1\230\45\0\27\231\2\0\11\231"+
    "\2\0\1\232\1\233\40\231\27\234\2\0\14\234\1\235"+
    "\40\234\50\0\1\236\1\237\13\0\1\240\21\0\16\11"+
    "\1\241\7\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\16\11\1\242\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\6\0\1\243\1\0\1\244"+
    "\1\0\1\245\43\0\1\246\114\0\1\247\65\0\1\250"+
    "\125\0\1\251\3\0\1\252\101\0\1\253\4\0\1\254"+
    "\106\0\1\255\106\0\1\256\76\0\1\257\105\0\1\260"+
    "\105\0\1\261\20\0\27\73\2\0\13\73\2\0\40\73"+
    "\1\0\2\262\10\0\1\262\2\0\1\262\17\0\1\263"+
    "\5\0\2\262\4\0\1\262\35\0\1\264\16\0\1\265"+
    "\76\0\1\266\107\0\1\267\1\270\104\0\1\271\2\0"+
    "\1\272\101\0\1\273\10\0\1\274\25\0\1\275\32\0"+
    "\1\276\17\0\1\277\74\0\1\300\3\0\1\301\71\0"+
    "\1\302\13\0\1\303\3\0\1\304\71\0\1\305\4\0"+
    "\1\306\3\0\1\307\111\0\1\310\70\0\1\311\1\0"+
    "\1\312\1\313\3\0\1\314\106\0\1\315\74\0\1\316"+
    "\3\0\1\317\3\0\1\320\6\0\2\321\76\0\1\322"+
    "\1\0\1\323\2\0\1\324\115\0\3\115\11\0\1\115"+
    "\113\0\1\325\42\0\1\326\5\0\1\327\41\0\1\330"+
    "\43\0\1\331\2\0\1\332\2\0\1\333\100\0\1\334"+
    "\2\0\2\321\65\0\1\11\1\335\16\11\1\336\5\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\337\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\340\1\341\11\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\342\2\11\1\343\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\23\11\1\344\2\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\1\345\2\11\1\0\1\11\24\0\3\11\1\0"+
    "\16\11\1\346\7\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\347\3\11\1\350\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\1\11\1\351"+
    "\1\11\1\0\11\11\1\352\3\11\1\353\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\354\4\11\1\355\3\11\1\356\13\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\357"+
    "\7\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\360\1\11\1\361\1\362\3\11\1\363"+
    "\15\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\364\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\365\3\11\1\366"+
    "\15\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\367\1\11\1\370\2\11\1\371\7\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\372\5\11\1\373\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\374\24\0\3\11\1\0\13\11\1\375\2\11"+
    "\1\376\2\11\1\377\4\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\143\3\0\2\143\1\0"+
    "\1\143\2\0\1\143\5\0\1\143\3\0\3\143\1\0"+
    "\1\143\24\0\3\143\27\0\3\144\11\0\1\144\43\0"+
    "\2\11\1\u0100\13\11\1\u0101\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0102\4\11"+
    "\1\u0102\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0102\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\22\11\1\u0102\3\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0102\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\4\11\1\u0102\21\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\u0102"+
    "\20\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\1\u0101\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0103\2\11\1\u0103"+
    "\21\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u0100\2\11\1\u0100\15\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\3\11\1\u0100"+
    "\1\11\3\u0100\16\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\12\11\1\u0104\13\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\17\11\2\u0102"+
    "\5\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\14\11\1\u0105\11\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\3\u0105\5\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u0103\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\u0101\6\11\1\u0101\6\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\3\11"+
    "\1\u0101\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u0105\13\11\2\u0100\5\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u0106\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\14\11\1\u0101\11\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0107\22\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0101\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\u0101\12\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u0101"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u0100\1\11\1\u0100\1\11\1\u0100\16\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\3\11\1\u0101\13\11\1\u0101\6\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\17\11\2\u0101\5\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0108\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0105\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0100"+
    "\11\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\u0109\21\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u0105\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\14\11"+
    "\1\u0100\1\11\1\u0100\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\u010a\24\0\3\11\1\0\17\11\1\u0100\6\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0101\6\11\2\u0100\5\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\10\11\1\u0100\5\11"+
    "\1\u0100\7\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\16\11\1\u0100\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0105\22\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u0103\21\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u010b\3\11\1\u0105\16\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0101\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\17\11\1\u0101\6\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u0102"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\14\11\1\u0102\11\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\26\0\1\30\3\0\1\30\1\225"+
    "\4\0\1\30\73\0\1\u010c\3\0\1\u010c\5\0\1\u010c"+
    "\46\0\1\227\2\0\1\227\3\0\1\227\1\0\1\227"+
    "\4\0\1\227\6\0\1\227\3\0\1\227\1\u010d\1\0"+
    "\1\227\2\0\1\227\11\0\2\227\65\0\1\u010e\4\0"+
    "\1\230\106\0\1\u010f\45\0\2\u0110\10\0\1\u0110\2\0"+
    "\1\u0110\22\0\1\u0111\2\0\2\u0110\4\0\1\u0110\33\0"+
    "\27\u0112\2\0\10\u0112\1\u0113\3\u0112\1\231\40\u0112\27\236"+
    "\2\0\55\236\51\237\1\u0114\34\237\1\0\4\11\1\u0115"+
    "\21\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\10\11\1\u0116\15\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\24\0\1\u0117\25\0\1\u0118\45\0"+
    "\1\u0119\100\0\1\u011a\5\0\1\u011b\105\0\1\u011c\73\0"+
    "\1\u011d\2\0\1\u011d\3\0\1\u011d\1\0\1\u011d\4\0"+
    "\1\u011d\6\0\1\u011d\3\0\1\u011d\2\0\1\u011d\2\0"+
    "\1\u011d\11\0\2\u011d\44\0\1\u011e\111\0\1\u011f\74\0"+
    "\1\321\10\0\1\u0120\102\0\1\u0121\150\0\1\u0122\51\0"+
    "\1\u0123\64\0\1\u0124\114\0\1\321\112\0\1\u0125\6\0"+
    "\1\321\76\0\1\u0126\2\0\2\321\66\0\1\u0127\114\0"+
    "\1\u0128\146\0\1\u0129\47\0\1\u012a\174\0\1\u012b\4\0"+
    "\1\u012c\105\0\1\u012d\122\0\1\u012e\72\0\1\u012f\51\0"+
    "\1\u0130\53\0\1\u0131\67\0\1\u0132\155\0\1\u0133\41\0"+
    "\1\u0134\113\0\1\u0135\76\0\1\334\102\0\1\u0136\110\0"+
    "\1\u0137\120\0\1\u0138\71\0\1\u0139\101\0\1\u013a\101\0"+
    "\51\325\1\u013b\34\325\5\0\1\u013c\102\0\1\u013d\116\0"+
    "\1\u013e\74\0\1\u013f\121\0\1\u0140\75\0\1\u0141\117\0"+
    "\2\321\65\0\11\11\1\u0142\14\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u0143\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\15\11\1\u0144\10\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\12\11\1\u0145\13\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\u0146\24\0\3\11\1\0\21\11"+
    "\1\u0147\4\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\1\u0148\25\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\14\11\1\u0149\11\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u014a\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\u014b\15\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\1\u014c\2\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u014d\12\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\1\u014e\2\11\1\0\1\11\1\u014f\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u0150\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\16\11\1\u0151\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0152\22\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\u0153\24\0\3\11\1\0"+
    "\23\11\1\u0154\2\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u0155\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\u0156\24\0\3\11\1\0\11\11"+
    "\1\u0157\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\17\11\1\u0158\6\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\5\11\1\u0159\20\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u015a\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\23\11\1\u015b\2\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\u015c"+
    "\16\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u015d\22\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\u015e\21\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u015f\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u0160\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u0161\24\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\15\11\1\u0162\10\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u0163\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\10\11\1\u0164"+
    "\15\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\25\11\1\u0101\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\u0165\14\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\u0166"+
    "\21\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u0167\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\26\0\1\u010c\3\0\1\u010c\1\u0168"+
    "\4\0\1\u010c\106\0\1\u0169\44\0\27\u0112\2\0\14\u0112"+
    "\1\231\40\u0112\50\237\1\u016a\1\u0114\34\237\1\0\10\11"+
    "\1\u010a\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u016b\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\15\0\1\u016c\142\0\1\u016d"+
    "\41\0\1\u016e\2\0\1\u016f\104\0\1\u0170\105\0\1\u0171"+
    "\114\0\1\u0172\100\0\1\u0173\151\0\1\u0174\40\0\1\u0175"+
    "\102\0\1\u0176\111\0\1\u0177\107\0\1\u0178\74\0\1\u0179"+
    "\110\0\1\u017a\123\0\1\u017b\137\0\1\u017c\43\0\1\u017d"+
    "\76\0\1\u017e\114\0\1\u017f\115\0\1\u0180\73\0\1\u0181"+
    "\106\0\1\u0182\175\0\1\u0183\60\0\1\u0184\45\0\1\u0173"+
    "\172\0\1\u0185\14\0\1\u0186\74\0\1\u0187\112\0\1\u0188"+
    "\101\0\1\u0189\103\0\50\325\1\u018a\1\u013b\34\325\5\0"+
    "\1\u018b\4\0\1\u018c\77\0\1\u018d\111\0\1\u0173\101\0"+
    "\1\u018e\106\0\1\u018f\101\0\16\11\1\u0190\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u0191\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\u0192"+
    "\24\0\3\11\1\0\10\11\1\u0193\15\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\u0194"+
    "\20\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u0195\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u0196\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\2\11"+
    "\1\u0197\23\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u0198\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\23\11\1\u0199\2\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\u019a\24\0\3\11"+
    "\1\0\13\11\1\u019b\12\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\u019c\21\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u019d\12\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\23\11\1\u019e\2\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u019f\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\12\11\1\u01a0\13\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\26\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\1\u01a1\2\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\u01a2\24\0\3\11\1\0\15\11\1\u0191"+
    "\10\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\26\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\1\u01a3\2\11\1\0\11\11\1\u01a4\14\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\u01a5\25\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\u01a6\20\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u01a7\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\u01a8"+
    "\4\11\1\u01a9\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u01aa\22\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\u0191"+
    "\16\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u01ab\22\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\u01ac\21\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u0106\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u01ad\22\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\14\0\1\u01ae\77\0\1\u01af"+
    "\151\0\1\u0118\45\0\1\u01b0\101\0\1\u01b1\111\0\1\u01b2"+
    "\76\0\1\u01b3\104\0\1\u01b4\121\0\1\u0127\141\0\1\u01b5"+
    "\40\0\1\u01b6\102\0\1\u01b7\116\0\1\u01b8\104\0\1\u01b9"+
    "\77\0\1\u01ba\103\0\1\u01bb\113\0\1\u01bc\106\0\1\u01bd"+
    "\112\0\1\u01be\75\0\1\u01bf\107\0\1\u01c0\110\0\1\u01c1"+
    "\74\0\1\u01c2\110\0\1\u01c3\152\0\1\u01c4\47\0\1\u01c5"+
    "\175\0\1\u01c6\14\0\1\u01c7\10\0\1\u01c8\77\0\1\u01c9"+
    "\111\0\1\u01ca\75\0\1\u01cb\74\0\2\11\1\u01cc\23\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\1\11\1\u01cd\24\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\15\11\1\u014a\10\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\1\u01ce\2\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u01cf\21\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u01d0\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\12\11\1\u01d1"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u01d2\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\u01d3\22\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u01d4\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\7\11\1\u01d5\16\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\10\11\1\u01d6\15\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\15\11\1\u01d7\10\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u01d8\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\u01d9"+
    "\16\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u01da\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u01db\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\4\11"+
    "\1\u01dc\21\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\1\u01dd\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u01de\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\26\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\1\11\1\u01df"+
    "\1\11\1\0\12\11\1\u01e0\10\11\1\u01e1\2\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u01e2\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\21\11\1\u01e3\4\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u01e4\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\2\11\1\u01e5\1\0\1\11\24\0"+
    "\3\11\2\0\1\u01e6\116\0\1\u01e7\144\0\1\u01b0\105\0"+
    "\1\u01e8\46\0\1\u01e9\100\0\1\u01ea\115\0\1\u01eb\101\0"+
    "\1\u01ec\106\0\1\u01ed\110\0\1\u01ee\75\0\1\u01ef\105\0"+
    "\1\u01f0\114\0\1\u01f1\103\0\1\u01f2\105\0\1\u01f3\106\0"+
    "\1\u01f4\107\0\1\u01f5\103\0\1\u01f6\112\0\1\u01f7\103\0"+
    "\1\u01f8\102\0\1\u01f9\77\0\1\u01fa\100\0\12\11\1\u01fb"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u01fc\20\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u01fd\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u01fe\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u01ff\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u0200\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\u0201\20\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u0202\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0203"+
    "\11\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u0204\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\12\11\1\u0205\13\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u0206\12\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0207\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\13\11\1\u0208\12\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\20\11\1\u0209\5\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\16\11\1\u020a\7\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u020b"+
    "\12\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u020c\20\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\14\11\1\u020d\11\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\16\0\1\u020e"+
    "\101\0\1\u01e8\100\0\1\u020f\114\0\1\u0210\107\0\1\u0211"+
    "\141\0\1\u0212\46\0\1\u0213\111\0\1\u0214\102\0\1\u0215"+
    "\75\0\1\u0216\10\0\1\u0217\102\0\1\u0218\77\0\1\u0219"+
    "\125\0\1\u021a\71\0\1\u021b\111\0\1\u021c\72\0\4\11"+
    "\1\u021d\21\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\13\11\1\u021e\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u021f\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\1\u0220\2\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u0221\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\16\11\1\u0222\7\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\13\11\1\u0223\12\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u0224\10\11\1\u0225\11\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0226\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u0227\22\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\23\11\1\u0228"+
    "\2\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\7\11\1\u0229\16\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u022a\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u022b\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\6\0\1\u01b1\5\0\1\u022c\76\0\1\u0173\113\0"+
    "\1\u022d\102\0\1\u022e\3\0\1\u022f\174\0\1\u0230\6\0"+
    "\1\u0231\205\0\1\u01f3\15\0\1\u0232\75\0\1\u0233\103\0"+
    "\1\u0234\106\0\1\u01f3\114\0\1\u0235\101\0\1\u0236\112\0"+
    "\1\u0237\73\0\4\11\1\u0191\21\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\12\11\1\u0238\13\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\7\11\1\u0239\3\11\1\u023a\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\1\u023b\2\11\1\0\3\11"+
    "\1\u023c\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\1\11\1\u0205\1\11\1\0\13\11\1\u023d\12\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\3\11\1\u023e\22\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u023f\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\2\11\1\u0205"+
    "\23\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u0240\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\u0241\20\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\12\11"+
    "\1\u0242\13\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0243\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\13\0\1\u0244\76\0\1\u0245"+
    "\113\0\1\u0246\151\0\1\u0247\41\0\1\u0248\117\0\1\u0249"+
    "\63\0\1\u024a\114\0\1\u024b\146\0\1\u024c\34\0\3\11"+
    "\1\u024d\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\u024e\14\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\u024f\24\0\3\11\1\0\11\11\1\u0250"+
    "\14\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\23\11\1\u0251\2\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0252\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u0253\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\1\u0254\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u0255\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\4\0\1\u0256"+
    "\113\0\1\u0257\145\0\1\u0258\51\0\1\u0259\113\0\1\u025a"+
    "\75\0\1\u025b\106\0\1\u025c\111\0\1\u025d\65\0\11\11"+
    "\1\u025e\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\1\u025f\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u0260\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\23\11"+
    "\1\u0261\2\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\13\11\1\u0262\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\14\11\1\u0263\11\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\20\11\1\u0264\5\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\155\2\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0265\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\12\0\1\u0266\112\0"+
    "\1\u0267\70\0\1\u0212\122\0\1\u0268\67\0\16\11\1\u0269"+
    "\7\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\u0220\24\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u026a\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\5\0\1\11\1\155"+
    "\2\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u026b\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\155\2\0\3\11\1\0\1\11\24\0"+
    "\3\11\13\0\1\u026c\76\0\1\u026d\102\0\12\11\1\u026e"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\155\2\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u026f\22\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\5\0\1\11\1\155\2\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\25\11\1\u0270\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\1\155\2\0"+
    "\3\11\1\0\1\11\24\0\3\11\10\0\1\u0233\107\0"+
    "\1\u01f3\74\0\7\11\1\u0271\16\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\155\2\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u0205\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\5\0\1\11"+
    "\1\155\2\0\3\11\1\0\1\11\24\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34930];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\22\1\1\11\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\3\1\6\11\2\1\2\11\4\1\2\11"+
    "\3\1\1\11\1\1\1\0\2\11\21\1\1\11\24\1"+
    "\1\11\7\1\1\11\47\1\2\0\2\1\4\0\1\11"+
    "\2\1\1\11\2\1\4\0\14\11\2\0\1\1\6\0"+
    "\1\1\1\11\4\0\1\1\7\0\1\11\2\0\1\1"+
    "\3\0\1\11\3\0\1\1\3\0\1\1\2\0\61\1"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\4\0\1\1\4\0\1\11\4\0\1\11"+
    "\25\0\1\11\4\0\46\1\1\0\2\11\1\1\7\0"+
    "\1\11\5\0\1\11\4\0\1\11\1\0\1\11\11\0"+
    "\1\11\2\1\3\0\36\1\2\0\1\11\2\0\1\11"+
    "\2\0\1\11\4\0\1\1\2\0\1\1\2\0\1\11"+
    "\3\0\1\11\4\0\2\11\32\1\2\0\2\11\1\0"+
    "\1\1\1\11\1\0\1\11\4\0\1\11\1\0\1\1"+
    "\1\0\1\11\3\0\24\1\2\0\1\1\1\11\12\0"+
    "\17\1\4\0\1\11\2\0\1\11\3\0\1\11\14\1"+
    "\4\0\1\11\4\0\11\1\1\0\3\11\3\0\1\11"+
    "\10\1\1\11\2\0\3\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*
* Return to initial state iff we are in post-mnemonic or post-dot
*/
private void pm() {
    if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
        yybegin(YYINITIAL);
    }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 141: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 142: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 143: break;
          case 4: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LINE_BREAK;
            } 
            // fall through
          case 144: break;
          case 5: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 145: break;
          case 6: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 146: break;
          case 7: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 147: break;
          case 8: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 148: break;
          case 9: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 149: break;
          case 10: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 150: break;
          case 11: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 151: break;
          case 12: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 152: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 153: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 154: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 155: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 156: break;
          case 17: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 157: break;
          case 18: 
            { pm(); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 158: break;
          case 19: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 159: break;
          case 20: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 160: break;
          case 21: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 161: break;
          case 22: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 162: break;
          case 23: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 163: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 164: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 165: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 166: break;
          case 27: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 167: break;
          case 28: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 168: break;
          case 29: 
            { pm(); return KickAssemblerTypes.BANG;
            } 
            // fall through
          case 169: break;
          case 30: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 170: break;
          case 31: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 171: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 172: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 173: break;
          case 34: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 174: break;
          case 35: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 175: break;
          case 36: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 176: break;
          case 37: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 177: break;
          case 38: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 178: break;
          case 39: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 179: break;
          case 40: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 180: break;
          case 41: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 181: break;
          case 42: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 182: break;
          case 43: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 183: break;
          case 44: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 184: break;
          case 45: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 185: break;
          case 46: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 186: break;
          case 47: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 187: break;
          case 48: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 188: break;
          case 49: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 189: break;
          case 50: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 190: break;
          case 51: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 191: break;
          case 52: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 192: break;
          case 53: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 193: break;
          case 54: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 194: break;
          case 55: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 195: break;
          case 56: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 196: break;
          case 57: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 197: break;
          case 58: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 198: break;
          case 59: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 199: break;
          case 60: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 200: break;
          case 61: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 201: break;
          case 62: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 202: break;
          case 63: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 203: break;
          case 64: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 204: break;
          case 65: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC0;
            } 
            // fall through
          case 205: break;
          case 66: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_ILLEGAL;
            } 
            // fall through
          case 206: break;
          case 67: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC1;
            } 
            // fall through
          case 207: break;
          case 68: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_012;
            } 
            // fall through
          case 208: break;
          case 69: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC12;
            } 
            // fall through
          case 209: break;
          case 70: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 210: break;
          case 71: 
            { pm(); return KickAssemblerTypes.CHAR;
            } 
            // fall through
          case 211: break;
          case 72: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IF;
            } 
            // fall through
          case 212: break;
          case 73: 
            { return KickAssemblerTypes.ESCAPE_HEX;
            } 
            // fall through
          case 213: break;
          case 74: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 214: break;
          case 75: 
            { yybegin(SYMBOL_DEF); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 215: break;
          case 76: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 216: break;
          case 77: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 217: break;
          case 78: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 218: break;
          case 79: 
            { pm(); return KickAssemblerTypes.ELSE;
            } 
            // fall through
          case 219: break;
          case 80: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 220: break;
          case 81: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 221: break;
          case 82: 
            { pm(); return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 222: break;
          case 83: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 223: break;
          case 84: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 224: break;
          case 85: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 225: break;
          case 86: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 226: break;
          case 87: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 227: break;
          case 88: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 228: break;
          case 89: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 229: break;
          case 90: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 230: break;
          case 91: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 231: break;
          case 92: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 232: break;
          case 93: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 233: break;
          case 94: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 234: break;
          case 95: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 235: break;
          case 96: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 236: break;
          case 97: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 237: break;
          case 98: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 238: break;
          case 99: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 239: break;
          case 100: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 240: break;
          case 101: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 241: break;
          case 102: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 242: break;
          case 103: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 243: break;
          case 104: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 244: break;
          case 105: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 245: break;
          case 106: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_DEF;
            } 
            // fall through
          case 246: break;
          case 107: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 247: break;
          case 108: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 248: break;
          case 109: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 249: break;
          case 110: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 250: break;
          case 111: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 251: break;
          case 112: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 252: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 253: break;
          case 114: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 254: break;
          case 115: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 255: break;
          case 116: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 256: break;
          case 117: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 257: break;
          case 118: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 258: break;
          case 119: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 259: break;
          case 120: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 260: break;
          case 121: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 261: break;
          case 122: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 262: break;
          case 123: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 263: break;
          case 124: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 264: break;
          case 125: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 265: break;
          case 126: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 266: break;
          case 127: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 267: break;
          case 128: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOPC;
            } 
            // fall through
          case 268: break;
          case 129: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 269: break;
          case 130: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 270: break;
          case 131: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 271: break;
          case 132: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 272: break;
          case 133: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 273: break;
          case 134: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 274: break;
          case 135: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 275: break;
          case 136: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 276: break;
          case 137: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 277: break;
          case 138: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 278: break;
          case 139: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 279: break;
          case 140: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOCOMMAND;
            } 
            // fall through
          case 280: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
