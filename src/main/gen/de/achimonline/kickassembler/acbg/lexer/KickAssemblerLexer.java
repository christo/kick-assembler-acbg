/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;
  public static final int SYMBOL_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\55\1\54\1\0\1\55\1\54\22\0\1\55\1\70\1\66\1\101\1\62\1\63\1\117\1"+
    "\65\1\103\1\104\1\75\1\71\1\113\1\72\1\60\1\74\2\64\1\53\7\56\1\73\1\114\1"+
    "\115\1\111\1\116\1\123\1\112\1\4\1\24\1\6\1\5\1\27\1\61\1\67\1\11\1\33\1\52"+
    "\1\42\1\15\1\36\1\20\1\50\1\40\1\30\1\16\1\22\1\34\1\100\1\44\1\67\1\12\1"+
    "\46\1\67\1\107\1\76\1\110\1\121\1\57\1\0\1\1\1\23\1\3\1\2\1\25\1\77\1\124"+
    "\1\7\1\31\1\51\1\41\1\13\1\35\1\17\1\47\1\37\1\26\1\14\1\21\1\32\1\102\1\43"+
    "\1\125\1\10\1\45\1\126\1\105\1\120\1\106\1\122\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\40\2\1\3\1\4\1\5\4\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\1\41\3\40\1\42\4\40"+
    "\1\42\6\40\1\43\1\40\1\41\16\2\1\0\2\2"+
    "\1\44\6\2\1\45\67\2\2\0\2\3\4\0\1\46"+
    "\1\0\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\2\4\0\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\0\1\42"+
    "\5\0\1\72\11\0\1\72\4\0\1\42\1\73\1\0"+
    "\1\72\3\0\1\74\4\0\1\75\1\76\5\0\1\72"+
    "\1\41\4\2\1\77\11\2\1\77\4\2\1\100\1\77"+
    "\3\2\1\101\11\2\1\77\2\102\4\2\1\103\1\3"+
    "\2\0\1\104\1\0\1\104\2\0\1\2\4\0\1\105"+
    "\1\0\1\106\5\0\1\107\26\0\1\110\2\0\1\111"+
    "\4\0\5\2\1\112\25\2\1\110\1\2\1\113\5\2"+
    "\1\114\1\2\1\115\1\0\1\116\1\57\11\0\1\117"+
    "\10\0\1\72\2\0\1\120\1\121\7\0\1\76\1\72"+
    "\1\122\3\0\3\2\1\123\10\2\1\77\2\2\1\124"+
    "\1\125\7\2\1\77\1\126\4\2\1\0\1\127\3\0"+
    "\1\130\2\0\1\131\5\0\1\132\1\133\2\0\1\134"+
    "\3\0\1\133\5\0\1\135\1\136\1\137\2\2\1\140"+
    "\5\2\1\141\1\142\2\2\1\143\3\2\1\142\5\2"+
    "\1\144\1\145\1\2\2\0\1\146\1\147\1\150\1\0"+
    "\1\151\2\0\1\152\2\0\1\153\1\0\1\154\1\133"+
    "\5\0\1\155\1\156\1\2\1\157\2\2\1\160\2\2"+
    "\1\161\1\2\1\162\1\142\6\2\1\163\3\0\1\164"+
    "\1\165\11\0\3\2\1\166\1\167\12\2\5\0\1\170"+
    "\2\0\1\171\2\0\1\172\4\2\1\173\2\2\1\174"+
    "\2\2\1\175\1\2\2\0\1\176\6\0\1\2\1\177"+
    "\7\2\2\0\1\200\1\122\1\201\2\0\1\202\1\2"+
    "\1\203\1\126\1\204\2\2\1\205\1\2\1\206\2\0"+
    "\3\2\2\0\2\2\1\207\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[647];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0519"+
    "\0\u0570\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0723\0\u077a\0\u07d1"+
    "\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984\0\u09db\0\u0a32\0\u0a89"+
    "\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c\0\u0c93\0\u0cea\0\u0d41"+
    "\0\u01b3\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b\0\u0fa2"+
    "\0\u01b3\0\u0ff9\0\u01b3\0\u1050\0\u10a7\0\u01b3\0\u01b3\0\u01b3"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u10fe\0\u1155\0\u01b3\0\u01b3\0\u11ac"+
    "\0\u1203\0\u125a\0\u12b1\0\u01b3\0\u01b3\0\u01b3\0\u1308\0\u01b3"+
    "\0\u135f\0\u01b3\0\u13b6\0\u140d\0\u1464\0\u14bb\0\u1512\0\u1569"+
    "\0\u15c0\0\u1617\0\u166e\0\u16c5\0\u171c\0\u1773\0\u17ca\0\u1821"+
    "\0\u1878\0\u18cf\0\u01b3\0\u1926\0\u197d\0\u19d4\0\u1a2b\0\u1a82"+
    "\0\u1ad9\0\u1b30\0\u1b87\0\u1bde\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a"+
    "\0\u1d91\0\u1de8\0\u1e3f\0\u1e96\0\u1eed\0\u1f44\0\u1f9b\0\u1ff2"+
    "\0\u2049\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u01b3\0\u21fc\0\u2253"+
    "\0\u22aa\0\u2301\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4\0\u250b"+
    "\0\u2562\0\u25b9\0\u2610\0\u2667\0\u26be\0\u2715\0\u276c\0\u27c3"+
    "\0\u281a\0\u2871\0\u28c8\0\u291f\0\u2976\0\u29cd\0\u2a24\0\u2a7b"+
    "\0\u2ad2\0\u2b29\0\u2b80\0\u2bd7\0\u2c2e\0\u2c85\0\u2cdc\0\u2d33"+
    "\0\u2d8a\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb"+
    "\0\u3042\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5\0\u324c\0\u32a3"+
    "\0\u32fa\0\u3351\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504\0\u355b"+
    "\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u0e9d\0\u01b3\0\u370e\0\u3765"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u37bc\0\u3813"+
    "\0\u01b3\0\u386a\0\u38c1\0\u3918\0\u396f\0\u39c6\0\u01b3\0\u01b3"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u3a1d"+
    "\0\u01b3\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0\0\u3c27\0\u3c7e"+
    "\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31\0\u3e88\0\u3edf\0\u3f36"+
    "\0\u3f8d\0\u3fe4\0\u403b\0\u4092\0\u40e9\0\u4140\0\u01b3\0\u4197"+
    "\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u01b3\0\u434a\0\u43a1\0\u43f8"+
    "\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602\0\u4659\0\u46b0"+
    "\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u48ba\0\u4911\0\u4968"+
    "\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20"+
    "\0\u4c77\0\u4cce\0\u4d25\0\u4d7c\0\u4dd3\0\u0414\0\u4e2a\0\u4e81"+
    "\0\u4ed8\0\u4f2f\0\u0414\0\u4f86\0\u4fdd\0\u5034\0\u508b\0\u50e2"+
    "\0\u5139\0\u5190\0\u51e7\0\u523e\0\u5295\0\u0414\0\u52ec\0\u5343"+
    "\0\u539a\0\u53f1\0\u5448\0\u0414\0\u549f\0\u0d98\0\u35b2\0\u01b3"+
    "\0\u54f6\0\u54f6\0\u554d\0\u55a4\0\u55fb\0\u5652\0\u56a9\0\u5700"+
    "\0\u5757\0\u01b3\0\u57ae\0\u3a1d\0\u5805\0\u585c\0\u58b3\0\u590a"+
    "\0\u4707\0\u01b3\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd\0\u5b14"+
    "\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75\0\u5dcc"+
    "\0\u475e\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d"+
    "\0\u01b3\0\u6084\0\u60db\0\u01b3\0\u6132\0\u6189\0\u61e0\0\u6237"+
    "\0\u628e\0\u62e5\0\u633c\0\u6393\0\u5295\0\u0414\0\u63ea\0\u6441"+
    "\0\u6498\0\u64ef\0\u6546\0\u659d\0\u65f4\0\u664b\0\u66a2\0\u66f9"+
    "\0\u6750\0\u67a7\0\u67fe\0\u6855\0\u68ac\0\u6903\0\u695a\0\u69b1"+
    "\0\u6a08\0\u6a5f\0\u6ab6\0\u0414\0\u6b0d\0\u0414\0\u6b64\0\u6bbb"+
    "\0\u6c12\0\u6c69\0\u6cc0\0\u0414\0\u6d17\0\u0414\0\u549f\0\u01b3"+
    "\0\u01b3\0\u6d6e\0\u6dc5\0\u6e1c\0\u6e73\0\u6eca\0\u6f21\0\u6f78"+
    "\0\u6fcf\0\u7026\0\u01b3\0\u707d\0\u70d4\0\u712b\0\u7182\0\u71d9"+
    "\0\u7230\0\u7287\0\u72de\0\u01b3\0\u7335\0\u738c\0\u01b3\0\u01b3"+
    "\0\u73e3\0\u743a\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed\0\u01b3"+
    "\0\u7644\0\u769b\0\u76f2\0\u7749\0\u77a0\0\u77f7\0\u784e\0\u78a5"+
    "\0\u0414\0\u78fc\0\u7953\0\u79aa\0\u7a01\0\u7a58\0\u7aaf\0\u7b06"+
    "\0\u7b5d\0\u0414\0\u7bb4\0\u7c0b\0\u0414\0\u0414\0\u7c62\0\u7cb9"+
    "\0\u7d10\0\u7d67\0\u7dbe\0\u7e15\0\u7e6c\0\u7ec3\0\u7f1a\0\u7f71"+
    "\0\u7fc8\0\u801f\0\u8076\0\u80cd\0\u01b3\0\u8124\0\u817b\0\u81d2"+
    "\0\u01b3\0\u8229\0\u8280\0\u01b3\0\u82d7\0\u832e\0\u8385\0\u83dc"+
    "\0\u8433\0\u01b3\0\u848a\0\u84e1\0\u8538\0\u01b3\0\u858f\0\u85e6"+
    "\0\u863d\0\u8694\0\u86eb\0\u3c27\0\u8742\0\u8799\0\u87f0\0\u01b3"+
    "\0\u01b3\0\u0414\0\u8847\0\u889e\0\u0414\0\u88f5\0\u894c\0\u89a3"+
    "\0\u89fa\0\u8a51\0\u0414\0\u8aa8\0\u8aff\0\u8b56\0\u0414\0\u8bad"+
    "\0\u8c04\0\u8c5b\0\u8cb2\0\u8d09\0\u4911\0\u8d60\0\u8db7\0\u8e0e"+
    "\0\u0414\0\u0414\0\u8e65\0\u8ebc\0\u8f13\0\u01b3\0\u8f6a\0\u01b3"+
    "\0\u8fc1\0\u01b3\0\u9018\0\u906f\0\u01b3\0\u90c6\0\u911d\0\u9174"+
    "\0\u91cb\0\u01b3\0\u01b3\0\u9222\0\u9279\0\u92d0\0\u9327\0\u937e"+
    "\0\u93d5\0\u0414\0\u942c\0\u0414\0\u9483\0\u94da\0\u0414\0\u9531"+
    "\0\u9588\0\u95df\0\u9636\0\u0414\0\u0414\0\u968d\0\u96e4\0\u973b"+
    "\0\u9792\0\u97e9\0\u9840\0\u9897\0\u98ee\0\u9945\0\u999c\0\u99f3"+
    "\0\u01b3\0\u9a4a\0\u9aa1\0\u9af8\0\u9b4f\0\u9ba6\0\u9bfd\0\u9c54"+
    "\0\u9cab\0\u9d02\0\u9d59\0\u9db0\0\u9e07\0\u9e5e\0\u0414\0\u9eb5"+
    "\0\u9f0c\0\u9f63\0\u9fba\0\ua011\0\ua068\0\ua0bf\0\ua116\0\ua16d"+
    "\0\ua1c4\0\ua21b\0\ua272\0\ua2c9\0\ua320\0\ua377\0\u01b3\0\ua3ce"+
    "\0\ua425\0\u01b3\0\ua47c\0\ua4d3\0\u01b3\0\ua52a\0\ua581\0\ua5d8"+
    "\0\ua62f\0\u0414\0\ua686\0\ua6dd\0\u0414\0\ua734\0\ua78b\0\u0414"+
    "\0\ua7e2\0\ua839\0\ua890\0\u01b3\0\ua8e7\0\ua93e\0\ua995\0\ua9ec"+
    "\0\uaa43\0\uaa9a\0\uaaf1\0\u0414\0\uab48\0\uab9f\0\uabf6\0\uac4d"+
    "\0\uaca4\0\uacfb\0\uad52\0\uada9\0\uae00\0\u01b3\0\u01b3\0\u01b3"+
    "\0\uae57\0\uaeae\0\u01b3\0\uaf05\0\u0414\0\u0414\0\u0414\0\uaf5c"+
    "\0\uafb3\0\u0414\0\ub00a\0\u01b3\0\ub061\0\ub0b8\0\ub10f\0\ub166"+
    "\0\ub1bd\0\ub214\0\ub26b\0\ub2c2\0\ub319\0\u0414\0\u0414";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[647];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\15\1\33"+
    "\1\15\1\34\1\35\1\36\1\37\2\15\1\40\1\41"+
    "\2\15\1\42\3\15\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\47\1\15\1\51\1\15\1\52\1\53\1\47"+
    "\1\54\1\55\1\15\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\6\1\64\1\15\1\65\1\15\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\3\15"+
    "\54\107\1\0\11\107\1\110\7\107\1\111\30\107\1\112"+
    "\1\113\1\114\1\115\7\112\1\116\1\117\2\112\1\120"+
    "\1\112\1\121\1\112\1\122\1\112\1\123\3\112\1\124"+
    "\1\125\2\112\1\126\1\112\1\127\3\112\1\130\30\112"+
    "\1\131\2\112\1\132\14\112\1\133\10\112\1\134\1\135"+
    "\1\0\1\136\1\137\1\140\7\15\1\141\1\142\2\15"+
    "\1\143\1\15\1\144\1\15\1\145\1\15\1\146\3\15"+
    "\1\147\1\150\2\15\1\151\1\15\1\152\3\15\1\153"+
    "\7\15\4\0\1\15\1\0\1\15\5\0\1\15\1\154"+
    "\6\0\1\155\1\15\1\0\1\15\21\0\1\15\1\156"+
    "\1\15\1\0\52\157\1\0\2\50\1\0\1\157\1\0"+
    "\1\157\5\0\1\157\7\0\2\157\1\0\1\157\21\0"+
    "\3\157\130\0\1\15\1\160\4\15\1\161\1\162\2\15"+
    "\2\163\2\15\1\164\1\15\1\165\32\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\2\15"+
    "\1\167\21\15\1\170\26\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\12\15\1\171\21\15"+
    "\1\167\1\15\1\172\7\15\1\173\4\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\4\15"+
    "\1\174\3\15\1\175\1\176\2\15\2\177\1\15\1\200"+
    "\1\15\1\201\31\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\5\15\1\202\20\15\1\203"+
    "\24\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\14\15\1\204\20\15\1\202\1\15\1\205"+
    "\13\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\53\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\1\206\52\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\3\15"+
    "\1\207\47\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\1\210\1\211\16\15\1\163\32\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\12\15\2\206\15\15\1\212\14\15\1\213\4\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\3\15\1\214\1\215\14\15\1\177\31\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\14\15\2\207\15\15\1\216\13\15\1\217\3\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\46\15\1\167\4\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\220\21\0\3\15\1\0\47\15\1\202\3\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\1\221\5\15\1\172\3\15\1\222\1\223\6\15\1\224"+
    "\1\15\1\225\3\15\1\163\1\211\21\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\3\15"+
    "\1\226\4\15\1\205\3\15\1\227\1\230\5\15\1\231"+
    "\2\15\1\232\3\15\1\177\1\215\17\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\2\15"+
    "\1\233\10\15\1\234\2\15\1\223\5\15\1\235\3\15"+
    "\1\236\3\15\1\237\1\15\1\165\3\15\1\233\10\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\240\4\15\1\241\7\15\1\242\1\15\1\230"+
    "\6\15\1\243\3\15\1\244\2\15\1\245\1\15\1\201"+
    "\3\15\1\241\7\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\46\15\1\163\4\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\47\15\1\177\3\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\16\15\1\170\1\15\1\160"+
    "\32\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\1\246\6\15\1\247\3\15\1\250\4\15"+
    "\1\161\23\15\1\206\6\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\17\15\1\203\1\15"+
    "\1\174\31\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\3\15\1\251\5\15\1\252\7\15"+
    "\1\175\23\15\1\207\5\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\6\15\1\253\3\15"+
    "\1\253\40\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\10\15\1\254\3\15\1\254\36\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\255\52\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\13\15\1\206\37\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\15\15\1\207\35\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\20\15\1\163\13\15\1\167"+
    "\16\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\21\15\1\177\13\15\1\202\15\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\53\0"+
    "\1\47\2\0\1\47\1\256\1\257\3\0\1\47\116\0"+
    "\2\50\52\0\6\260\14\0\3\260\1\0\1\260\23\0"+
    "\1\260\2\0\1\260\2\0\1\260\2\0\1\260\12\0"+
    "\1\260\113\0\1\261\42\0\65\262\1\0\1\263\7\262"+
    "\1\264\30\262\54\265\1\0\11\265\1\266\40\265\1\0"+
    "\52\267\4\0\1\267\1\0\1\267\5\0\1\267\1\0"+
    "\2\270\1\271\3\0\2\267\1\0\1\267\6\0\1\272"+
    "\12\0\3\267\71\0\1\273\17\0\1\274\107\0\1\275"+
    "\16\0\1\276\111\0\1\277\1\300\13\0\1\301\16\0"+
    "\1\302\52\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\2\0\1\303\22\0\1\304\3\0\1\305"+
    "\50\0\1\306\135\0\1\307\103\0\1\310\151\0\1\311"+
    "\3\0\1\312\122\0\1\313\4\0\1\314\127\0\1\315"+
    "\127\0\1\316\6\0\54\107\1\0\11\107\1\0\7\107"+
    "\1\0\30\107\14\0\1\317\2\0\1\317\3\0\1\317"+
    "\6\0\1\317\27\0\1\320\3\0\1\317\7\0\2\317"+
    "\37\0\1\321\2\0\1\322\5\0\1\323\1\0\1\324"+
    "\21\0\1\321\106\0\1\325\3\0\1\326\73\0\1\327"+
    "\40\0\1\330\7\0\1\331\60\0\1\332\45\0\1\333"+
    "\104\0\1\334\102\0\1\335\152\0\1\336\4\0\1\337"+
    "\110\0\1\340\30\0\1\341\75\0\1\342\2\0\1\343"+
    "\23\0\1\344\102\0\1\345\15\0\1\346\41\0\1\347"+
    "\26\0\1\350\25\0\1\351\102\0\1\352\23\0\1\353"+
    "\21\0\1\354\62\0\1\355\7\0\1\356\1\357\4\0"+
    "\1\360\106\0\1\361\221\0\1\362\1\363\62\0\1\364"+
    "\15\0\1\365\32\0\1\366\25\0\1\367\5\0\1\370"+
    "\37\0\1\371\67\0\1\321\26\0\1\372\5\0\1\321"+
    "\62\0\12\15\1\373\5\15\1\374\32\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\24\15"+
    "\1\375\3\15\1\376\22\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\1\15\1\377\1\15\1\0\36\15"+
    "\1\u0100\7\15\1\u0101\4\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\1\u0102\45\15\1\u0103"+
    "\4\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\24\15\1\u0104\26\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\u0105\52\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\24\15\1\u0106\4\15\1\u0107\21\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\13\15"+
    "\1\u0108\30\15\1\u0109\6\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\13\15\1\u010a\2\15"+
    "\1\u010b\23\15\1\u010c\10\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\34\15\1\u010d\16\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\1\u010e\1\15\1\0\1\15\21\0"+
    "\3\15\1\0\24\15\1\u010f\26\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\u0110\23\15"+
    "\1\u0111\21\15\1\u0112\4\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\2\15\1\u0113\7\15"+
    "\1\u0114\1\u0115\4\15\1\u0116\32\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\u0117\52\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\52\267\4\0\1\267\1\0\1\267\5\0\1\267"+
    "\1\0\2\270\1\271\3\0\2\267\1\0\1\267\21\0"+
    "\3\267\1\0\30\15\1\u0118\15\15\1\u0119\4\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\u011a\21\0\3\15\1\0"+
    "\1\u011b\5\15\1\u011c\37\15\1\u011d\4\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\53\157"+
    "\2\0\2\157\1\0\1\157\2\0\1\157\2\0\1\157"+
    "\7\0\2\157\1\0\1\157\21\0\3\157\1\0\2\15"+
    "\1\u011e\50\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\7\15\1\u011e\43\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\20\15"+
    "\1\u011e\32\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\13\15\1\u011e\37\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\1\15"+
    "\1\u011e\1\u011f\50\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\12\15\1\u011e\40\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\36\15\1\u011e\14\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\2\15\1\u011e\4\15\1\u011e"+
    "\34\15\1\u011e\6\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\1\15\2\u011e\25\15\1\u011e"+
    "\11\15\1\u011e\10\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\7\15\1\u011e\34\15\1\u011e"+
    "\6\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\16\15\1\u0120\34\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\5\15\1\u011e"+
    "\45\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\11\15\1\u011e\41\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\21\15\1\u011e"+
    "\31\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\15\15\1\u011e\35\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\4\15\1\u011e"+
    "\1\u011f\45\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\14\15\1\u011e\36\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\37\15"+
    "\1\u011e\13\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\5\15\1\u011e\3\15\1\u011e\33\15"+
    "\1\u011e\5\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\4\15\2\u011e\24\15\1\u011e\10\15"+
    "\1\u011e\7\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\11\15\1\u011e\33\15\1\u011e\5\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\u011e\52\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\3\15\1\u011e\47\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\7\15\1\u011e\10\15\1\u011e\32\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\u011e\6\15"+
    "\1\u011e\34\15\1\u011e\6\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\20\15\1\u011e\7\15"+
    "\1\u011e\22\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\12\15\2\u011e\37\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\11\15"+
    "\1\u011e\7\15\1\u011e\31\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\3\15\1\u011e\5\15"+
    "\1\u011e\33\15\1\u011e\5\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\21\15\1\u011e\10\15"+
    "\1\u011e\20\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\14\15\2\u011e\35\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\12\15"+
    "\1\u0121\40\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\2\15\1\u011e\4\15\1\u011e\43\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\46\15\1\u011e\4\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\24\15\1\u011e\26\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\2\15\1\u011f\50\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\1\15\2\u011e\25\15"+
    "\1\u011e\22\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\5\15\1\u011e\3\15\1\u011e\41\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\47\15\1\u011e\3\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\26\15\1\u011e\24\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\5\15\1\u011f\45\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\4\15\2\u011e\24\15"+
    "\1\u011e\20\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\2\15\1\u011e\15\15\1\u011e\32\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\u011e\37\15\1\u011e\12\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\25\15\1\u011e"+
    "\25\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\31\15\1\u011e\21\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\30\15\1\u011e"+
    "\22\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\20\15\1\u0122\32\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\5\15\1\u011e"+
    "\13\15\1\u011e\31\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\3\15\1\u011e\35\15\1\u011e"+
    "\11\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\27\15\1\u011e\23\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\33\15\1\u011e"+
    "\17\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\32\15\1\u011e\20\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\7\15\1\u011e"+
    "\10\15\1\u011e\23\15\1\u011e\6\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\u011e\17\15"+
    "\1\u011e\32\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\53\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\u0123\21\0\3\15\1\0\11\15\1\u011e\7\15"+
    "\1\u011e\23\15\1\u011e\5\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\3\15\1\u011e\15\15"+
    "\1\u011e\31\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\1\u011e\35\15\1\u011e\14\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\3\15\1\u011e\33\15\1\u011e\13\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\13\15\1\u0124"+
    "\37\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\53\0\1\47\2\0\1\47\1\256\4\0\1\47"+
    "\115\0\1\u0125\2\0\1\u0125\5\0\1\u0125\43\0\6\260"+
    "\14\0\3\260\1\0\1\260\23\0\1\260\2\0\1\260"+
    "\1\u0126\1\0\1\260\2\0\1\260\12\0\1\260\106\0"+
    "\1\u0127\4\0\1\261\127\0\1\u0128\41\0\54\u0129\1\0"+
    "\10\u0129\1\u012a\1\262\40\u0129\14\0\1\u012b\2\0\1\u012b"+
    "\3\0\1\u012b\6\0\1\u012b\32\0\1\u0128\1\u012b\7\0"+
    "\2\u012b\30\0\53\267\2\0\2\267\1\0\1\267\2\0"+
    "\1\267\2\0\1\267\1\0\2\270\1\271\3\0\2\267"+
    "\1\0\1\267\21\0\3\267\71\0\2\270\34\0\54\277"+
    "\1\0\52\277\75\300\1\u012c\31\300\1\0\12\15\1\u012d"+
    "\40\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\25\0\1\u012e\114\0\1\u012f\3\0\1\u0130\144\0"+
    "\1\u0131\41\0\1\u0132\46\0\1\u0133\110\0\6\u0134\14\0"+
    "\3\u0134\1\0\1\u0134\23\0\1\u0134\2\0\1\u0134\2\0"+
    "\1\u0134\2\0\1\u0134\12\0\1\u0134\60\0\1\u0135\116\0"+
    "\1\u0136\126\0\1\372\204\0\1\u0137\50\0\1\u0138\154\0"+
    "\1\u0139\161\0\1\u013a\43\0\1\u013b\132\0\1\u013c\112\0"+
    "\1\u013d\132\0\1\321\16\0\1\u013e\131\0\1\u013f\215\0"+
    "\1\u0140\16\0\1\u0141\137\0\1\u0142\133\0\1\u0143\110\0"+
    "\1\u0144\115\0\1\u0145\76\0\1\u0146\25\0\1\u0147\127\0"+
    "\1\321\161\0\1\321\1\0\1\u0148\77\0\1\321\26\0"+
    "\1\u0149\5\0\1\321\71\0\1\u014a\121\0\1\u014b\160\0"+
    "\1\u014c\73\0\1\u014d\226\0\1\u014e\55\0\1\u014f\122\0"+
    "\1\u0150\115\0\1\u0151\112\0\54\362\1\0\52\362\75\363"+
    "\1\u0152\31\363\13\0\1\u0153\127\0\1\u0154\131\0\1\u0155"+
    "\141\0\1\u0156\125\0\1\u0157\111\0\1\u0158\122\0\1\321"+
    "\34\0\1\321\62\0\30\15\1\u0159\22\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\20\15"+
    "\1\u015a\32\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\53\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\1\u015b"+
    "\1\15\1\0\1\15\21\0\3\15\1\0\20\15\1\u015c"+
    "\32\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\46\15\1\u015d\4\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\53\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\u015e\21\0\3\15\1\0"+
    "\16\15\1\u015f\34\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\22\15\1\u0160\30\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\6\15\1\u0161\44\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\31\15\1\u0162\21\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\34\15\1\u0163\16\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\53\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\1\u0164\2\15\1\0\13\15"+
    "\1\u0165\37\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\24\15\1\u0166\26\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\31\15"+
    "\1\u0167\21\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\13\15\1\u0168\37\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\2\15"+
    "\1\u0169\50\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\u016a"+
    "\21\0\3\15\1\0\1\u016b\52\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\36\15\1\u016c"+
    "\14\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\7\15\1\u016d\43\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\2\15\1\u016e"+
    "\50\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\34\15\1\u016f\16\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\1\15\1\u0170"+
    "\51\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\53\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\u0171\21\0\3\15\1\0\30\15\1\u0172\22\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\24\15\1\u0173\26\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\13\15\1\u0174\37\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\12\15\1\u0175\40\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\13\15\1\u0176\37\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\16\15\1\u0177\34\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\31\15\1\u0178\21\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\30\15\1\u0179\22\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\13\15\1\u017a\37\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\52\15\1\u011e\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\20\15\1\u017b\32\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\12\15"+
    "\1\u017c\40\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\30\15\1\u017d\22\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\24\15"+
    "\1\u017e\26\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\53\0\1\u0125\2\0\1\u0125\1\u017f\4\0"+
    "\1\u0125\42\0\54\u0129\1\0\11\u0129\1\262\40\u0129\65\0"+
    "\1\u0180\41\0\74\300\1\u0181\1\u012c\31\300\1\0\20\15"+
    "\1\u0123\32\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\77\0\1\u0182\50\0\1\u0183\7\0\1\u0184"+
    "\77\0\1\u0185\163\0\1\u0186\71\0\1\u0187\250\0\1\u0188"+
    "\27\0\1\u0189\132\0\1\u018a\136\0\1\u018b\106\0\1\u018c"+
    "\132\0\1\u018d\132\0\1\u018e\177\0\1\u018f\51\0\1\u0190"+
    "\136\0\1\u0191\173\0\1\u0192\25\0\1\u0193\152\0\1\u0194"+
    "\150\0\1\u0195\126\0\1\u0196\114\0\1\u0197\104\0\1\u0198"+
    "\162\0\1\u0199\111\0\1\u0194\110\0\1\u019a\135\0\1\u019b"+
    "\134\0\1\u019c\221\0\1\u019d\21\0\1\u019e\211\0\1\u019f"+
    "\24\0\74\363\1\u01a0\1\u0152\31\363\13\0\1\u01a1\11\0"+
    "\1\u01a2\104\0\1\u01a3\126\0\1\u01a4\136\0\1\u01a5\115\0"+
    "\1\u0194\125\0\53\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\1\u01a6\2\15\1\0\24\15\1\u01a7\26\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\30\15\1\u01a8\22\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\40\15\1\u01a9\12\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\20\15\1\u01aa\32\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\24\15\1\u01ab\26\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\30\15\1\u01ac\22\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\53\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\u01ad\21\0\3\15\1\0\24\15"+
    "\1\u01ae\26\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\34\15\1\u01af\16\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\53\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\u01b0\21\0\3\15"+
    "\1\0\1\u01b1\52\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\24\15\1\u01b2\26\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\46\15\1\u01b3\4\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\46\15\1\u01b4\4\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\34\15\1\u01b5\16\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\12\15\1\u01b6\40\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\46\15\1\u01b7\4\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\31\15\1\u01b2\21\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\13\15\1\u01b8\37\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\22\15\1\u01b9\30\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\30\15\1\u01ba\22\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\53\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\1\u01bb\2\15\1\0\16\15"+
    "\1\u01bc\34\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\53\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\u01bd\21\0\3\15\1\0\12\15\1\u01be\11\15"+
    "\1\u01bf\26\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\2\15\1\u01c0\50\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\2\15"+
    "\1\u01c1\50\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\12\15\1\u01c2\40\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\1\15"+
    "\1\u01b2\51\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\31\15\1\u0124\21\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\2\15"+
    "\1\u01c3\50\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\31\0\1\u01c4\122\0\1\u01c5\200\0\1\u0132"+
    "\60\0\1\u01c6\144\0\1\u01c7\104\0\1\u01c8\120\0\1\u01c9"+
    "\123\0\1\u01ca\131\0\1\u01cb\141\0\1\u0151\107\0\1\u01cc"+
    "\212\0\1\u01cd\43\0\1\u01ce\133\0\1\u01cf\132\0\1\u01d0"+
    "\104\0\1\u01d1\164\0\1\u01d2\101\0\1\u01d3\114\0\1\u01d4"+
    "\140\0\1\u01d5\161\0\1\u01d6\72\0\1\u01d7\212\0\1\u01d8"+
    "\60\0\1\u01d9\127\0\1\u01da\76\0\1\u01db\251\0\1\u01dc"+
    "\20\0\1\u01dd\15\0\1\u01de\123\0\1\u01df\103\0\1\u01e0"+
    "\144\0\1\u01e1\102\0\16\15\1\u01e2\34\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\13\15"+
    "\1\u01e3\37\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\16\15\1\u01e4\34\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\31\15"+
    "\1\u0174\21\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\12\15\1\u01e5\40\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\53\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\1\u01e6\1\15\1\0\1\15\21\0"+
    "\3\15\1\0\13\15\1\u01e7\37\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\20\15\1\u01e8"+
    "\32\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\24\15\1\u01e9\26\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\2\15\1\u01ea"+
    "\50\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\40\15\1\u01eb\12\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\13\15\1\u01ec"+
    "\37\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\1\15\1\u01ed\51\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\13\15\1\u01ee"+
    "\37\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\46\15\1\u01ef\4\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\12\15\1\u01f0"+
    "\40\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\53\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\1\u01f1\1\15"+
    "\1\0\1\15\21\0\3\15\1\0\30\15\1\u01f2\22\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\31\15\1\u01f3\21\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\1\15\1\u01f4\51\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\53\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\1\15\1\u01f5\1\15\1\0\16\15\1\u01f6\15\15"+
    "\1\u01f7\16\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\31\15\1\u01f8\21\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\6\15"+
    "\1\u01f9\44\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\24\15\1\u01fa\26\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\53\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\1\15\1\u01fb\1\0\1\15\21\0"+
    "\3\15\17\0\1\u01fc\206\0\1\u01c5\43\0\1\u01fd\211\0"+
    "\1\u01fe\61\0\1\u01ff\121\0\1\u0200\132\0\1\u0201\114\0"+
    "\1\u0202\146\0\1\u0203\106\0\1\u0204\141\0\1\u0205\125\0"+
    "\1\u0206\126\0\1\u0207\127\0\1\u0208\143\0\1\u0209\124\0"+
    "\1\u020a\100\0\1\u020b\126\0\1\u020c\156\0\1\u020d\60\0"+
    "\1\u020e\174\0\1\u020f\110\0\1\u0210\76\0\31\15\1\u0211"+
    "\21\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\24\15\1\u0212\26\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\30\15\1\u0213"+
    "\22\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\16\15\1\u0214\34\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\36\15\1\u0215"+
    "\14\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\16\15\1\u0216\34\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\31\15\1\u0217"+
    "\21\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\30\15\1\u0218\22\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\30\15\1\u0219"+
    "\22\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\31\15\1\u021a\21\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\46\15\1\u021b"+
    "\4\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\44\15\1\u021c\6\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\16\15\1\u021d"+
    "\34\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\16\15\1\u021e\34\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\46\15\1\u021f"+
    "\4\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\1\u0220\52\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\46\15\1\u0221\4\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\30\15\1\u0222\22\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\36\15\1\u0223\14\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\25\0\1\u01fe\133\0\1\u0224\121\0\1\u0225\114\0\1\u0226"+
    "\114\0\1\u0227\157\0\1\u0228\173\0\1\u0229\46\0\1\u022a"+
    "\156\0\1\u022b\62\0\1\u022c\172\0\1\u022d\62\0\1\u022e"+
    "\33\0\1\u022f\124\0\1\u0230\73\0\1\u0231\173\0\1\u0232"+
    "\60\0\24\15\1\u0233\26\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\12\15\1\u0234\40\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\u0235\52\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\31\15\1\u0236\21\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\53\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\1\u0237\1\15\1\0\1\15"+
    "\21\0\3\15\1\0\16\15\1\u0238\34\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\46\15"+
    "\1\u0239\4\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\2\15\1\u023a\50\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\46\15"+
    "\1\u023b\4\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\2\15\1\u023c\33\15\1\u023d\14\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\34\15\1\u023e\16\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\1\15\1\u023f\51\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\46\15\1\u0240\4\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\20\15\1\u0241\32\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\31\0\1\u01c6\15\0\1\u0242\73\0\1\u0243\125\0\1\u0194"+
    "\116\0\1\u0244\125\0\1\u0245\44\0\1\u0246\203\0\1\u0247"+
    "\21\0\1\u0248\150\0\1\u020b\212\0\1\u020b\50\0\1\u0249"+
    "\62\0\1\u024a\150\0\1\u024b\132\0\1\u024c\114\0\1\u024d"+
    "\110\0\13\15\1\u024e\37\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\12\15\1\u01b2\40\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\2\15\1\u024f\50\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\1\15\1\u0250\44\15"+
    "\1\u0251\4\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\53\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\1\u0252\2\15\1\0\16\15\1\u0253"+
    "\34\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\40\15\1\u021d\12\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\53\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\1\15\1\u021d"+
    "\1\15\1\0\46\15\1\u0254\4\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\2\15\1\u0255"+
    "\50\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\24\15\1\u0256\26\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\30\15\1\u0257"+
    "\22\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\16\15\1\u0258\34\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\31\15\1\u0259"+
    "\21\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\17\0\1\u025a\123\0\1\u025b\137\0\1\u025c\126\0"+
    "\1\u025d\203\0\1\u025e\27\0\1\u025f\160\0\1\u0260\112\0"+
    "\1\u0261\204\0\1\u0262\30\0\13\15\1\u0263\37\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\24\15\1\u0264\26\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\1\0\24\15\1\u0265\26\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\53\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\u0266\21\0"+
    "\3\15\1\0\2\15\1\u0267\50\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\34\15\1\u0268"+
    "\16\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\20\15\1\u0269\32\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\2\0\1\15\3\0\1\166\3\0"+
    "\2\15\1\0\1\15\21\0\3\15\1\0\53\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\1\u026a\1\15\1\0\1\15\21\0\3\15"+
    "\1\0\1\u026b\52\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15\3\0\1\u026c\172\0\1\u026d\156\0"+
    "\1\u026e\61\0\1\u026f\121\0\1\u0270\136\0\1\u0271\130\0"+
    "\1\u0272\134\0\1\u0273\62\0\46\15\1\u0274\4\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\53\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\1\u0275\1\15\1\0\1\15"+
    "\21\0\3\15\1\0\31\15\1\u0276\21\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\24\15"+
    "\1\u0277\26\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\34\15\1\u0278\16\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\36\15"+
    "\1\u0279\14\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\1\0\44\15\1\u027a\6\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\13\15"+
    "\1\u027b\37\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\2\0\1\15\3\0\1\166\3\0\2\15\1\0\1\15"+
    "\21\0\3\15\25\0\1\u027c\115\0\1\u0229\113\0\1\u027d"+
    "\126\0\1\u027e\126\0\13\15\1\u0237\37\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\2\0\1\15\3\0\1\166"+
    "\3\0\2\15\1\0\1\15\21\0\3\15\1\0\1\u027f"+
    "\52\15\2\0\2\15\1\0\1\15\2\0\1\15\2\0"+
    "\1\15\3\0\1\166\3\0\2\15\1\0\1\15\21\0"+
    "\3\15\1\0\1\u0280\52\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\31\15\1\u0281\21\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\17\0\1\u0282\112\0\1\u0283\124\0\16\15\1\u0284\34\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\2\0\1\15"+
    "\3\0\1\166\3\0\2\15\1\0\1\15\21\0\3\15"+
    "\1\0\2\15\1\u0285\50\15\2\0\2\15\1\0\1\15"+
    "\2\0\1\15\2\0\1\15\3\0\1\166\3\0\2\15"+
    "\1\0\1\15\21\0\3\15\1\0\52\15\1\u0286\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\2\0"+
    "\1\u024a\151\0\1\u020b\102\0\1\15\1\u0287\51\15\2\0"+
    "\2\15\1\0\1\15\2\0\1\15\2\0\1\15\3\0"+
    "\1\166\3\0\2\15\1\0\1\15\21\0\3\15\1\0"+
    "\24\15\1\u021d\26\15\2\0\2\15\1\0\1\15\2\0"+
    "\1\15\2\0\1\15\3\0\1\166\3\0\2\15\1\0"+
    "\1\15\21\0\3\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\42\1\1\11\7\1\1\11\1\1\1\11"+
    "\2\1\6\11\2\1\2\11\4\1\3\11\1\1\1\11"+
    "\1\0\1\11\20\1\1\11\20\1\1\0\11\1\1\11"+
    "\67\1\2\0\2\1\4\0\1\11\1\0\1\1\6\11"+
    "\2\1\1\11\1\1\4\0\11\11\1\0\1\11\5\0"+
    "\1\1\11\0\1\1\4\0\1\1\1\11\1\0\1\1"+
    "\3\0\1\11\4\0\2\1\5\0\55\1\2\0\1\11"+
    "\1\0\1\1\2\0\1\1\4\0\1\11\1\0\1\1"+
    "\5\0\1\11\26\0\1\11\2\0\1\11\4\0\46\1"+
    "\1\0\2\11\11\0\1\11\10\0\1\11\2\0\2\11"+
    "\7\0\1\11\2\1\3\0\36\1\1\0\1\11\3\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\1\2\0\1\11"+
    "\3\0\1\1\5\0\2\11\32\1\2\0\1\11\1\1"+
    "\1\11\1\0\1\11\2\0\1\11\2\0\1\1\1\0"+
    "\2\11\5\0\24\1\3\0\1\1\1\11\11\0\17\1"+
    "\5\0\1\11\2\0\1\11\2\0\1\11\14\1\2\0"+
    "\1\11\6\0\11\1\2\0\3\11\2\0\1\11\10\1"+
    "\1\11\2\0\3\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[647];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private void pm() {
      if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
          yybegin(YYINITIAL);
      }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 137: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 138: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 139: break;
          case 4: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 140: break;
          case 5: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 141: break;
          case 6: 
            { pm(); return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 142: break;
          case 7: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 143: break;
          case 8: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 144: break;
          case 9: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 145: break;
          case 10: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 146: break;
          case 11: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 147: break;
          case 12: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 148: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 149: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 150: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 151: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 152: break;
          case 17: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 153: break;
          case 18: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 154: break;
          case 19: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 155: break;
          case 20: 
            { pm(); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 156: break;
          case 21: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 157: break;
          case 22: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 158: break;
          case 23: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 159: break;
          case 24: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 160: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 161: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 162: break;
          case 27: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 163: break;
          case 28: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 164: break;
          case 29: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 165: break;
          case 30: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 166: break;
          case 31: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 167: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 168: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 169: break;
          case 34: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 170: break;
          case 35: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 171: break;
          case 36: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 172: break;
          case 37: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 173: break;
          case 38: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 174: break;
          case 39: 
            { pm(); return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 175: break;
          case 40: 
            { pm(); return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 176: break;
          case 41: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 177: break;
          case 42: 
            { pm(); return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 178: break;
          case 43: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 179: break;
          case 44: 
            { pm(); return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 180: break;
          case 45: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 181: break;
          case 46: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 182: break;
          case 47: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 183: break;
          case 48: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 184: break;
          case 49: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 185: break;
          case 50: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 186: break;
          case 51: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 187: break;
          case 52: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 188: break;
          case 53: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 189: break;
          case 54: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 190: break;
          case 55: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 191: break;
          case 56: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 192: break;
          case 57: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 193: break;
          case 58: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 194: break;
          case 59: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 195: break;
          case 60: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 196: break;
          case 61: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 197: break;
          case 62: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 198: break;
          case 63: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 199: break;
          case 64: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 200: break;
          case 65: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 201: break;
          case 66: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 202: break;
          case 67: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 203: break;
          case 68: 
            { pm(); return KickAssemblerTypes.CHAR;
            } 
            // fall through
          case 204: break;
          case 69: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IF;
            } 
            // fall through
          case 205: break;
          case 70: 
            { return KickAssemblerTypes.ESCAPE_HEX;
            } 
            // fall through
          case 206: break;
          case 71: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 207: break;
          case 72: 
            { yybegin(SYMBOL_DEF); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 208: break;
          case 73: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 209: break;
          case 74: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 210: break;
          case 75: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 211: break;
          case 76: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 212: break;
          case 77: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 213: break;
          case 78: 
            { pm(); return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 214: break;
          case 79: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 215: break;
          case 80: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 216: break;
          case 81: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 217: break;
          case 82: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 218: break;
          case 83: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 219: break;
          case 84: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 220: break;
          case 85: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 221: break;
          case 86: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 222: break;
          case 87: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 223: break;
          case 88: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 224: break;
          case 89: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 225: break;
          case 90: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 226: break;
          case 91: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 227: break;
          case 92: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 228: break;
          case 93: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 229: break;
          case 94: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 230: break;
          case 95: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 231: break;
          case 96: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 232: break;
          case 97: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 233: break;
          case 98: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 234: break;
          case 99: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 235: break;
          case 100: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 236: break;
          case 101: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 237: break;
          case 102: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_DEF;
            } 
            // fall through
          case 238: break;
          case 103: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 239: break;
          case 104: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 240: break;
          case 105: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 241: break;
          case 106: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 242: break;
          case 107: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 243: break;
          case 108: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 244: break;
          case 109: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 245: break;
          case 110: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 246: break;
          case 111: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 247: break;
          case 112: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 248: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 249: break;
          case 114: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 250: break;
          case 115: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 251: break;
          case 116: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 252: break;
          case 117: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 253: break;
          case 118: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 254: break;
          case 119: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 255: break;
          case 120: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 256: break;
          case 121: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 257: break;
          case 122: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 258: break;
          case 123: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 259: break;
          case 124: 
            { pm(); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 260: break;
          case 125: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 261: break;
          case 126: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 262: break;
          case 127: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 263: break;
          case 128: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 264: break;
          case 129: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 265: break;
          case 130: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 266: break;
          case 131: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 267: break;
          case 132: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 268: break;
          case 133: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 269: break;
          case 134: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 270: break;
          case 135: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 271: break;
          case 136: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOCOMMAND;
            } 
            // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
