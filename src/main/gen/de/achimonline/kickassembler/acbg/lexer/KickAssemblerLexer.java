/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\21\1\34\1\6\1\10\1\117\1\0\1\104"+
    "\1\105\1\20\1\14\1\113\1\15\1\5\1\17\2\11\1\33\7\3\1\16\1\114\1\115\1\112"+
    "\1\116\1\123\1\124\1\56\1\22\1\60\1\57\1\70\1\7\1\12\1\61\1\72\1\103\1\76"+
    "\1\63\1\74\1\65\1\101\1\75\1\71\1\64\1\66\1\73\1\27\1\77\1\12\1\62\1\100\1"+
    "\12\1\110\1\125\1\111\1\121\1\4\1\0\1\23\1\46\1\26\1\35\1\36\1\37\1\45\1\53"+
    "\1\25\1\102\1\47\1\41\1\42\1\40\1\43\1\30\1\67\1\32\1\24\1\31\1\44\1\52\1"+
    "\51\1\54\1\50\1\55\1\106\1\120\1\107\1\122\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\10\4\1\14"+
    "\27\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\1\1\35\1\36\3\0\1\37\1\40\1\0"+
    "\1\41\3\0\1\41\11\0\1\40\2\3\1\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\0\1\54\37\4\4\0\35\4\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\3"+
    "\3\0\1\41\2\0\1\66\1\0\1\41\4\0\1\67"+
    "\2\0\1\70\3\0\1\70\15\0\1\70\1\0\1\70"+
    "\2\0\1\40\3\0\1\4\2\71\1\4\1\72\5\0"+
    "\2\4\7\0\1\73\16\0\1\74\14\0\1\75\1\52"+
    "\1\4\1\76\6\0\1\77\11\0\1\70\4\0\1\67"+
    "\1\70\12\0\1\4\7\0\1\100\2\0\1\67\6\0"+
    "\1\101\2\0\1\102\1\103\1\104\1\4\1\0\1\67"+
    "\1\0\1\67\2\0\1\105\6\0\1\4\1\106\1\0"+
    "\1\67\7\0\1\4\5\0\1\100\1\107\1\4\3\0"+
    "\1\4\3\0\1\4\1\106\1\0\1\4\1\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\254\0\u0408\0\254\0\u045e"+
    "\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be"+
    "\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e"+
    "\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e"+
    "\0\254\0\254\0\254\0\254\0\254\0\254\0\u0f74\0\254"+
    "\0\254\0\u0fca\0\u1020\0\u1076\0\u10cc\0\254\0\254\0\254"+
    "\0\u1122\0\u1178\0\254\0\u11ce\0\u1224\0\u127a\0\254\0\u12d0"+
    "\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580"+
    "\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830"+
    "\0\u1886\0\u18dc\0\u1932\0\u1988\0\254\0\254\0\254\0\254"+
    "\0\254\0\254\0\u19de\0\u1a34\0\254\0\u045e\0\254\0\u1a8a"+
    "\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a"+
    "\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea"+
    "\0\u2040\0\u2096\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a"+
    "\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a"+
    "\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u27fa"+
    "\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u2aaa"+
    "\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a"+
    "\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\254"+
    "\0\254\0\254\0\254\0\254\0\254\0\254\0\254\0\254"+
    "\0\u300a\0\u3060\0\u30b6\0\u310c\0\254\0\u3162\0\u31b8\0\254"+
    "\0\u320e\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\254\0\u3412"+
    "\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616\0\u366c\0\u36c2"+
    "\0\u3718\0\u376e\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972"+
    "\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22"+
    "\0\u3c78\0\u1886\0\u18dc\0\u3cce\0\u3d24\0\u01ae\0\u3d7a\0\u3dd0"+
    "\0\254\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a"+
    "\0\u300a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u3c78\0\254"+
    "\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488"+
    "\0\u3b76\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\254\0\u468c"+
    "\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c"+
    "\0\u4992\0\u49e8\0\u4a3e\0\254\0\254\0\u4a94\0\u01ae\0\u4aea"+
    "\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u01ae\0\u4cee\0\u4d44"+
    "\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e\0\254"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u54fe"+
    "\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae"+
    "\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u3616\0\u5a08"+
    "\0\u5a5e\0\u5ab4\0\254\0\u5b0a\0\u5b60\0\254\0\254\0\254"+
    "\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64\0\u5dba\0\254"+
    "\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe\0\u6014\0\u606a"+
    "\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a"+
    "\0\u6370\0\u63c6\0\u641c\0\u6472\0\u64c8\0\u651e\0\u6574\0\254"+
    "\0\254\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778\0\u67ce"+
    "\0\u6824\0\u687a\0\254\0\u68d0\0\u6926\0\u697c\0\u01ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\6\1\11"+
    "\1\5\1\6\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\6\1\26"+
    "\1\27\1\30\1\5\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\6\1\37\2\6\1\40\5\6\1\41\1\6"+
    "\1\42\1\43\1\44\1\6\1\45\1\46\1\47\1\50"+
    "\1\51\1\6\1\52\1\6\1\53\1\54\1\6\1\55"+
    "\3\6\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\3\1\102\1\0"+
    "\17\102\1\103\103\102\1\104\127\0\2\4\126\0\1\5"+
    "\1\105\1\106\3\0\1\5\21\0\1\5\75\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\47\6\45\0\1\110\1\111\1\112\1\113\1\0"+
    "\1\114\1\115\1\116\2\0\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\3\0\1\125\2\0\1\126\1\127\2\0"+
    "\1\130\53\0\1\131\3\0\1\131\1\0\1\131\10\0"+
    "\2\131\2\0\1\131\4\0\1\131\1\0\3\131\6\0"+
    "\1\131\7\0\3\131\7\0\1\131\46\0\1\132\120\0"+
    "\1\133\2\0\1\133\2\0\1\133\1\0\2\134\1\135"+
    "\3\0\11\133\2\0\47\133\6\0\1\136\27\0\1\137"+
    "\75\0\1\140\30\0\1\141\74\0\1\142\32\0\1\143"+
    "\1\144\71\0\1\145\13\0\1\146\1\0\17\146\1\147"+
    "\104\146\3\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\1\6\1\150\10\6\1\0\23\6\1\151"+
    "\3\6\1\152\1\153\2\6\1\154\1\6\1\155\1\6"+
    "\1\156\1\157\1\6\1\151\4\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\2\6\1\160"+
    "\5\6\1\161\1\6\1\0\1\162\2\6\1\163\1\161"+
    "\11\6\1\164\1\165\27\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\1\6\1\166\1\6"+
    "\1\161\3\6\1\167\1\170\1\6\1\0\1\6\1\171"+
    "\2\6\1\172\4\6\1\173\4\6\1\174\30\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\2\6\1\162\7\6\1\0\3\6\1\175\43\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\6\6\1\174\3\6\1\0\4\6\1\176\1\177\41\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\12\6\1\0\4\6\1\200\11\6\1\200\30\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\1\6\1\201\1\164\5\6\1\202\1\6\1\0"+
    "\13\6\1\203\3\6\1\204\27\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\7\6\1\205"+
    "\1\203\1\6\1\0\4\6\1\203\1\6\1\206\40\6"+
    "\47\0\1\207\7\0\1\210\1\211\5\0\1\212\64\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\4\6\1\177\5\6\1\0\1\6\1\175\45\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\6\6\1\161\40\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\1\6\1\213"+
    "\10\6\1\0\47\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\6\6\1\177"+
    "\1\214\37\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\1\6\1\215\1\161\7\6\1\0"+
    "\1\167\46\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\10\6\1\203\1\6\1\0\47\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\3\6\1\216\1\217\1\6\1\160\1\6\1\220"+
    "\1\6\1\0\1\6\1\221\1\6\1\170\1\6\1\222"+
    "\7\6\1\217\31\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\1\6\1\203\10\6\1\0"+
    "\47\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\22\6\1\223\1\6\1\224"+
    "\1\225\2\226\1\227\1\157\15\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\23\6\1\230\7\6\1\231\13\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\26\6\1\232\10\6\1\230\1\233\6\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\21\6\1\234\25\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\21\6"+
    "\1\235\1\236\6\6\1\226\15\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\26\6\2\234\6\6\1\237\5\6\1\240\2\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\44\6\1\230\2\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\1\241\11\6"+
    "\1\0\21\6\1\242\2\6\1\233\1\6\1\243\1\153"+
    "\3\6\1\244\1\6\1\226\1\236\10\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\44\6\1\226\2\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\30\6"+
    "\1\231\1\223\15\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\21\6\1\245"+
    "\3\6\1\246\3\6\1\224\11\6\1\234\3\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\24\6\1\247\1\6\1\247\20\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\27\6\1\234\17\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\2\6\1\161"+
    "\7\6\1\0\5\6\1\177\41\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\31\6\1\226\5\6\1\230\7\6\134\0\1\250\125\0"+
    "\1\251\2\0\1\252\122\0\1\253\3\0\1\254\126\0"+
    "\1\255\126\0\1\256\26\0\1\257\104\0\1\102\1\0"+
    "\17\102\1\0\103\102\22\0\1\260\7\0\2\260\4\0"+
    "\2\260\5\0\1\260\56\0\1\260\3\0\1\5\1\105"+
    "\4\0\1\5\21\0\1\5\75\0\1\261\5\0\1\261"+
    "\21\0\1\261\116\0\1\262\14\0\1\263\4\0\1\264"+
    "\1\0\1\265\3\0\1\265\102\0\1\266\4\0\1\267"+
    "\126\0\1\270\1\271\1\0\1\272\12\0\1\273\100\0"+
    "\1\274\12\0\1\275\106\0\1\276\1\0\1\277\3\0"+
    "\1\300\6\0\1\301\122\0\1\302\125\0\1\303\114\0"+
    "\1\304\10\0\1\305\12\0\1\306\106\0\1\307\5\0"+
    "\1\310\11\0\1\311\100\0\1\312\15\0\1\313\1\314"+
    "\104\0\1\315\125\0\1\316\17\0\1\317\105\0\1\320"+
    "\12\0\1\321\4\0\1\322\114\0\1\323\15\0\1\324"+
    "\100\0\1\325\17\0\1\326\7\0\1\327\75\0\1\330"+
    "\132\0\1\331\17\0\1\265\3\0\1\265\54\0\1\131"+
    "\1\332\2\0\1\131\1\0\1\131\10\0\2\131\2\0"+
    "\1\131\4\0\1\131\1\0\3\131\6\0\1\131\7\0"+
    "\3\131\7\0\1\131\41\0\1\333\4\0\1\132\117\0"+
    "\2\133\2\0\1\133\1\0\2\133\1\0\2\134\1\135"+
    "\3\0\12\133\1\0\47\133\36\0\2\134\110\0\1\143"+
    "\1\0\124\143\20\144\1\334\105\144\3\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\2\6\1\335"+
    "\7\6\1\0\47\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\23\6\1\336"+
    "\5\6\1\336\15\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\21\6\1\336"+
    "\17\6\1\336\5\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\33\6\1\336"+
    "\13\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\34\6\1\336\12\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\36\6\1\336\10\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\35\6\1\336\11\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\26\6\1\336"+
    "\20\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\4\6\1\336\42\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\10\6\1\336\1\6\1\0\47\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\4\6\1\336"+
    "\5\6\1\0\47\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\4\6\1\337\5\6\1\0"+
    "\1\336\46\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\17\6\1\336\27\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\2\6\1\336\7\6\1\0\47\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\4\6"+
    "\1\336\5\6\1\0\17\6\1\336\27\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\1\6"+
    "\1\336\10\6\1\0\13\6\1\336\3\6\1\336\27\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\12\6\1\0\1\6\1\336\45\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\3\6"+
    "\2\336\5\6\1\0\1\336\46\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\6\6\1\336\40\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\4\6\1\337\5\6\1\0"+
    "\47\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\13\6\1\336\3\6\1\336"+
    "\27\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\4\6\1\336\5\6\1\0\13\6\1\336"+
    "\3\6\1\336\27\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\3\6\2\336\5\6\1\0"+
    "\1\336\14\6\1\336\31\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\6\6\1\336\3\6"+
    "\1\0\47\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\1\6\1\336\4\6\1\336\3\6"+
    "\1\0\47\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\2\6\1\336\7\6\1\0\13\6"+
    "\1\336\3\6\1\336\27\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\7\6"+
    "\1\340\37\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\1\6\1\336\10\6\1\0\47\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\1\6\2\336\7\6\1\0\47\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\2\6"+
    "\2\336\6\6\1\0\47\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\10\6\1\336\1\6"+
    "\1\0\4\6\1\336\42\6\61\0\1\341\2\0\1\342"+
    "\121\0\1\343\127\0\1\344\1\345\124\0\1\346\70\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\4\6\1\347\42\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\4\6\1\350\42\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\2\6\1\336\7\6\1\0"+
    "\17\6\1\336\27\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\7\6\1\336\2\6\1\0"+
    "\47\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\2\6\1\336\1\6\1\336\5\6\1\0"+
    "\47\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\1\6\1\336\10\6\1\0\12\6\1\336"+
    "\34\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\32\6\1\336\14\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\3\6\1\336\6\6\1\0\47\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\23\6\1\336\23\6\25\0\2\6\2\0\1\6\1\0"+
    "\2\6\3\0\1\107\3\0\12\6\1\0\25\6\1\336"+
    "\21\6\25\0\2\6\2\0\1\6\1\0\2\6\3\0"+
    "\1\107\3\0\12\6\1\0\31\6\1\336\15\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\27\6\1\336\17\6\25\0\2\6\2\0"+
    "\1\6\1\0\2\6\3\0\1\107\3\0\12\6\1\0"+
    "\22\6\1\336\1\337\23\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\40\6"+
    "\1\336\6\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\23\6\1\336\1\6"+
    "\1\336\15\6\1\336\3\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\22\6"+
    "\2\336\11\6\1\336\4\6\1\336\4\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\25\6\1\336\15\6\1\336\3\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\21\6\1\336\25\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\25\6"+
    "\1\336\3\6\1\336\15\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\21\6"+
    "\1\336\3\6\1\336\15\6\1\336\3\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\31\6\1\336\3\6\1\336\11\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\26\6\2\336\17\6\25\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\12\6\1\0\23\6"+
    "\1\337\23\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\23\6\1\336\1\6"+
    "\1\336\21\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\44\6\1\336\2\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\12\6\1\0\22\6\2\336\11\6\1\336\11\6"+
    "\25\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\12\6\1\0\25\6\1\336\3\6\1\336\11\6"+
    "\1\336\3\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\21\6\1\336\7\6"+
    "\1\336\15\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\12\6\1\0\21\6\1\336\16\6"+
    "\1\336\6\6\25\0\1\261\1\351\4\0\1\261\21\0"+
    "\1\261\116\0\1\352\126\0\1\353\124\0\1\331\133\0"+
    "\1\354\140\0\1\355\115\0\1\265\120\0\1\356\11\0"+
    "\1\265\113\0\1\357\17\0\1\265\3\0\1\265\115\0"+
    "\1\360\121\0\1\361\123\0\1\362\114\0\1\363\144\0"+
    "\1\364\135\0\1\365\102\0\1\366\7\0\1\265\110\0"+
    "\1\367\140\0\1\370\131\0\1\371\114\0\1\372\121\0"+
    "\1\373\15\0\1\374\104\0\1\375\143\0\1\376\116\0"+
    "\1\377\133\0\1\u0100\127\0\1\u0101\131\0\1\u0102\132\0"+
    "\1\u0103\100\0\1\u0104\141\0\1\u0105\120\0\1\u0106\126\0"+
    "\1\u0107\120\0\1\u0108\125\0\1\u0109\126\0\1\u010a\120\0"+
    "\1\u010b\132\0\1\u010c\143\0\1\265\3\0\1\265\51\0"+
    "\17\144\1\u010d\1\334\105\144\3\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\3\6\1\u010e\6\6"+
    "\1\0\47\6\25\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\11\6\1\336\1\0\47\6\25\0"+
    "\2\6\2\0\1\6\1\0\2\6\3\0\1\107\3\0"+
    "\12\6\1\0\1\6\1\u010f\45\6\52\0\1\u0110\134\0"+
    "\1\u0111\123\0\1\u0112\114\0\1\u0113\1\u0114\135\0\1\u0115"+
    "\73\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\2\6\1\340\7\6\1\0\47\6\25\0\2\6"+
    "\2\0\1\6\1\0\2\6\3\0\1\107\3\0\12\6"+
    "\1\0\4\6\1\u0116\42\6\60\0\1\u0117\134\0\1\u0118"+
    "\124\0\1\u0119\123\0\1\u011a\126\0\1\u011b\106\0\1\u011c"+
    "\145\0\1\u011d\121\0\1\u011e\132\0\1\u011f\111\0\1\u0120"+
    "\140\0\1\u0121\130\0\1\277\103\0\1\u0122\143\0\1\u0123"+
    "\125\0\1\u0124\124\0\1\277\124\0\1\277\122\0\1\u0125"+
    "\2\0\1\u0126\112\0\1\u0127\135\0\1\u0128\125\0\1\u0129"+
    "\114\0\1\u012a\132\0\1\u012b\141\0\1\u012c\104\0\1\u012d"+
    "\123\0\1\u012e\140\0\1\u0120\115\0\1\u012f\134\0\1\u0120"+
    "\131\0\1\u0130\67\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\4\6\1\u0131\5\6\1\0\47\6"+
    "\65\0\1\u0132\107\0\1\u0133\125\0\1\u0114\136\0\1\341"+
    "\126\0\1\341\124\0\1\u0114\121\0\1\u0134\133\0\1\277"+
    "\113\0\1\u0135\135\0\1\u0136\121\0\1\u0137\124\0\1\u010c"+
    "\131\0\1\u0138\121\0\1\u0139\121\0\1\u0118\132\0\1\u013a"+
    "\133\0\1\u013b\117\0\1\u013c\130\0\1\u013d\130\0\1\122"+
    "\1\0\1\u013e\134\0\1\u013f\105\0\1\u0140\120\0\1\u0141"+
    "\142\0\1\u010c\123\0\1\u0142\131\0\1\u0143\123\0\1\u0144"+
    "\123\0\1\u0145\135\0\1\u0146\131\0\1\u0147\110\0\1\u0148"+
    "\72\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\5\6\1\u0149\4\6\1\0\47\6\54\0\1\u014a"+
    "\133\0\1\u0113\116\0\1\u014b\125\0\1\277\134\0\1\u014c"+
    "\116\0\1\u014d\137\0\1\u014e\122\0\1\u014f\125\0\1\u0150"+
    "\123\0\1\277\114\0\1\u0151\125\0\1\u0152\143\0\1\322"+
    "\107\0\1\u0153\130\0\1\u0154\122\0\1\u0155\143\0\1\u0156"+
    "\132\0\1\277\60\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\6\6\1\u0157\3\6\1\0\47\6"+
    "\53\0\1\u0158\132\0\1\u0159\120\0\1\u015a\137\0\1\u015b"+
    "\110\0\1\u015c\1\0\1\u015d\140\0\1\u015e\121\0\1\277"+
    "\126\0\1\u015f\130\0\1\u0118\105\0\1\u0160\143\0\1\u0161"+
    "\112\0\1\367\102\0\2\6\2\0\1\6\1\0\2\6"+
    "\3\0\1\107\3\0\2\6\1\u0162\7\6\1\0\47\6"+
    "\47\0\1\u0114\15\0\1\u0163\114\0\1\u0164\130\0\1\u0165"+
    "\5\0\1\u0166\122\0\1\u0160\130\0\1\u0167\110\0\1\277"+
    "\150\0\1\u0168\121\0\1\u0169\106\0\1\u013b\140\0\1\u0120"+
    "\67\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\7\6\1\u016a\2\6\1\0\47\6\62\0\1\u016b"+
    "\117\0\1\u016c\131\0\1\u0151\133\0\1\u0135\123\0\1\u016d"+
    "\66\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\1\6\1\u016e\10\6\1\0\47\6\50\0\1\u016f"+
    "\142\0\1\u0170\124\0\1\u0171\66\0\2\6\2\0\1\6"+
    "\1\0\2\6\3\0\1\107\3\0\10\6\1\u0172\1\6"+
    "\1\0\47\6\60\0\1\u0173\121\0\1\277\116\0\1\u0174"+
    "\105\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\7\6\1\u0175\2\6\1\0\47\6\62\0\1\u0176"+
    "\70\0\2\6\2\0\1\6\1\0\2\6\3\0\1\107"+
    "\3\0\11\6\1\u0177\1\0\47\6\57\0\1\277\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27090];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\11\1\1\11\1\1\1\11\41\1\6\11"+
    "\1\1\2\11\4\1\3\11\2\1\1\11\3\0\1\11"+
    "\1\1\1\0\1\1\3\0\1\1\11\0\3\1\1\0"+
    "\1\1\6\11\2\1\1\11\1\0\1\11\37\1\4\0"+
    "\35\1\11\11\1\1\3\0\1\11\2\0\1\11\1\0"+
    "\1\1\4\0\1\11\2\0\1\1\3\0\1\1\15\0"+
    "\1\1\1\0\1\1\2\0\1\1\3\0\4\1\1\11"+
    "\5\0\2\1\7\0\1\11\16\0\1\11\14\0\2\11"+
    "\2\1\6\0\1\1\11\0\1\11\4\0\2\1\12\0"+
    "\1\1\7\0\1\1\2\0\1\1\6\0\1\11\2\0"+
    "\3\11\1\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\6\0\2\1\1\0\1\1\7\0\1\1\5\0\2\11"+
    "\1\1\3\0\1\1\3\0\1\1\1\11\1\0\1\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 79: break;
          case 8: 
            { return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return KickAssemblerTypes.LEFT_PARENTHESES;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return KickAssemblerTypes.RIGHT_PARENTHESES;
            } 
            // fall through
          case 86: break;
          case 15: 
            { return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 93: break;
          case 22: 
            { return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 94: break;
          case 23: 
            { return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 95: break;
          case 24: 
            { return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 96: break;
          case 25: 
            { return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 97: break;
          case 26: 
            { return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 98: break;
          case 27: 
            { return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 99: break;
          case 28: 
            { return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 100: break;
          case 29: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 101: break;
          case 30: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 102: break;
          case 31: 
            { return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 103: break;
          case 32: 
            { return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 104: break;
          case 33: 
            { return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 105: break;
          case 34: 
            { return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 106: break;
          case 35: 
            { return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 107: break;
          case 36: 
            { return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 108: break;
          case 37: 
            { return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 109: break;
          case 38: 
            { return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 110: break;
          case 39: 
            { return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 111: break;
          case 40: 
            { return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 113: break;
          case 42: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 114: break;
          case 43: 
            { return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 115: break;
          case 44: 
            { return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 116: break;
          case 45: 
            { return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 117: break;
          case 46: 
            { return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 118: break;
          case 47: 
            { return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 120: break;
          case 49: 
            { return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 121: break;
          case 50: 
            { return KickAssemblerTypes.AND;
            } 
            // fall through
          case 122: break;
          case 51: 
            { return KickAssemblerTypes.OR;
            } 
            // fall through
          case 123: break;
          case 52: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 124: break;
          case 53: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 125: break;
          case 54: 
            { return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 129: break;
          case 58: 
            { return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 130: break;
          case 59: 
            { return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 131: break;
          case 60: 
            { return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 132: break;
          case 61: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 134: break;
          case 63: 
            { return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return KickAssemblerTypes.DIRECTIVE_BUILTIN;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 137: break;
          case 66: 
            { return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 138: break;
          case 67: 
            { return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 140: break;
          case 69: 
            { return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 141: break;
          case 70: 
            { return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 142: break;
          case 71: 
            { return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 143: break;
          case 72: 
            { return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
