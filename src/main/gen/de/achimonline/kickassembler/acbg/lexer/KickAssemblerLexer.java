/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;
  public static final int SYMBOL_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\30\1\27\1\0\1\30\1\27\22\0\1\30\1\76\1\41\1\52\1\35\1\36\1\70\1\40"+
    "\1\54\1\55\1\45\1\74\1\64\1\75\1\33\1\44\2\37\1\26\7\31\1\43\1\65\1\66\1\62"+
    "\1\67\1\77\1\63\1\34\1\50\4\34\16\42\1\51\5\42\1\60\1\46\1\61\1\72\1\32\1"+
    "\0\1\17\1\1\1\4\1\10\1\12\1\47\1\100\1\22\1\6\1\25\1\3\1\5\1\24\1\13\1\14"+
    "\1\15\1\23\1\2\1\11\1\16\1\53\1\7\1\101\1\20\1\21\1\102\1\56\1\71\1\57\1\73"+
    "\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\2\1\3\1\4\1\5\4\1\1\6"+
    "\1\7\1\10\2\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\2\40\1\41\2\40\1\41\7\40"+
    "\1\42\3\40\1\43\1\40\1\42\20\2\1\44\7\2"+
    "\1\45\46\2\2\0\2\3\4\0\1\46\1\47\1\50"+
    "\1\51\2\2\4\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\2\0"+
    "\1\66\6\0\1\41\1\67\4\0\1\66\7\0\1\70"+
    "\2\0\1\66\3\0\1\41\3\0\1\71\1\72\3\0"+
    "\1\66\2\0\1\42\1\2\1\73\6\2\1\74\3\2"+
    "\1\73\7\2\1\75\2\2\1\73\10\2\1\73\2\2"+
    "\1\76\1\77\1\100\1\101\1\2\1\102\1\103\1\102"+
    "\2\2\1\77\1\3\2\0\1\104\1\0\1\104\2\0"+
    "\2\2\1\0\1\105\4\0\1\106\4\0\1\107\4\0"+
    "\1\110\25\0\1\111\4\0\4\2\1\112\3\2\1\110"+
    "\24\2\1\113\5\2\1\114\1\115\1\0\1\116\1\50"+
    "\1\2\7\0\1\66\5\0\1\117\4\0\1\120\1\0"+
    "\1\121\11\0\1\72\1\66\1\122\3\0\1\2\1\73"+
    "\5\2\1\123\4\2\1\124\1\2\1\125\11\2\1\73"+
    "\1\126\4\2\2\0\1\127\2\0\1\130\2\0\1\131"+
    "\4\0\1\132\2\0\1\132\2\0\1\133\3\0\1\134"+
    "\4\0\1\135\1\136\1\137\2\2\1\140\4\2\1\141"+
    "\2\2\1\141\2\2\1\142\3\2\1\143\4\2\1\144"+
    "\1\145\1\2\2\0\1\146\1\147\1\0\1\150\1\151"+
    "\1\0\1\152\4\0\1\132\1\0\1\153\1\0\1\154"+
    "\3\0\1\155\1\2\1\156\1\157\1\2\1\160\4\2"+
    "\1\141\1\2\1\161\1\2\1\162\4\2\1\163\2\0"+
    "\1\164\1\165\12\0\2\2\1\166\1\167\13\2\4\0"+
    "\1\170\2\0\1\171\3\0\1\172\3\2\1\173\2\2"+
    "\1\174\3\2\1\175\1\2\4\0\1\176\4\0\3\2"+
    "\1\177\5\2\1\0\1\200\1\201\1\122\3\0\1\202"+
    "\1\203\1\204\1\126\3\2\1\205\1\2\1\206\2\0"+
    "\3\2\2\0\2\2\1\207\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u014f\0\u068b\0\u06ce\0\u0711\0\u0754\0\u014f\0\u0797"+
    "\0\u014f\0\u07da\0\u081d\0\u0860\0\u014f\0\u014f\0\u014f\0\u014f"+
    "\0\u014f\0\u014f\0\u08a3\0\u08e6\0\u014f\0\u014f\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u014f\0\u014f\0\u0a35\0\u0a78\0\u0abb\0\u014f"+
    "\0\u0afe\0\u014f\0\u0b41\0\u014f\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u014f\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u014f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u0754\0\u014f\0\u2249"+
    "\0\u228c\0\u014f\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u014f\0\u26ff"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u014f\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u014f\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u0218"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u0218\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u0218\0\u0218\0\u0218\0\u0218\0\u377c\0\u0218"+
    "\0\u0218\0\u37bf\0\u3802\0\u3845\0\u37bf\0\u3888\0\u068b\0\u213d"+
    "\0\u014f\0\u38cb\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u014f\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u2461\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u014f\0\u3c75\0\u3cb8\0\u3cfb\0\u2e96\0\u014f"+
    "\0\u3d3e\0\u3d81\0\u2dcd\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8"+
    "\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u014f\0\u427a\0\u42bd"+
    "\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u0218\0\u4492"+
    "\0\u44d5\0\u4518\0\u0218\0\u455b\0\u459e\0\u36b3\0\u45e1\0\u4624"+
    "\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c"+
    "\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u0218"+
    "\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u0218\0\u0218\0\u3888"+
    "\0\u014f\0\u014f\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2"+
    "\0\u4d35\0\u4d78\0\u014f\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u014f\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u014f\0\u5016\0\u014f"+
    "\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e"+
    "\0\u5271\0\u014f\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403"+
    "\0\u0218\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552\0\u0218\0\u5595"+
    "\0\u55d8\0\u561b\0\u565e\0\u0218\0\u56a1\0\u0218\0\u56e4\0\u5727"+
    "\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f"+
    "\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14\0\u014f"+
    "\0\u5b57\0\u5b9a\0\u014f\0\u5bdd\0\u5c20\0\u014f\0\u5c63\0\u5ca6"+
    "\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe"+
    "\0\u014f\0\u5f01\0\u5f44\0\u5f87\0\u014f\0\u280b\0\u5fca\0\u600d"+
    "\0\u6050\0\u014f\0\u014f\0\u0218\0\u6093\0\u60d6\0\u0218\0\u6119"+
    "\0\u615c\0\u619f\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u62ee\0\u6331"+
    "\0\u6374\0\u0218\0\u63b7\0\u63fa\0\u643d\0\u0218\0\u31ba\0\u6480"+
    "\0\u64c3\0\u6506\0\u0218\0\u0218\0\u6549\0\u658c\0\u65cf\0\u014f"+
    "\0\u014f\0\u6612\0\u6655\0\u014f\0\u6698\0\u014f\0\u66db\0\u671e"+
    "\0\u6761\0\u67a4\0\u014f\0\u67e7\0\u682a\0\u686d\0\u014f\0\u68b0"+
    "\0\u68f3\0\u6936\0\u0218\0\u6979\0\u69bc\0\u0218\0\u69ff\0\u0218"+
    "\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b\0\u0218\0\u6b4e\0\u6b91\0\u6bd4"+
    "\0\u0218\0\u6c17\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23\0\u6d66\0\u6da9"+
    "\0\u6dec\0\u014f\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e"+
    "\0\u6fc1\0\u7004\0\u7047\0\u708a\0\u70cd\0\u7110\0\u7153\0\u0218"+
    "\0\u7196\0\u71d9\0\u721c\0\u725f\0\u72a2\0\u72e5\0\u7328\0\u736b"+
    "\0\u73ae\0\u73f1\0\u7434\0\u7477\0\u74ba\0\u74fd\0\u7540\0\u014f"+
    "\0\u7583\0\u75c6\0\u014f\0\u7609\0\u764c\0\u768f\0\u014f\0\u76d2"+
    "\0\u7715\0\u7758\0\u0218\0\u779b\0\u77de\0\u0218\0\u7821\0\u7864"+
    "\0\u78a7\0\u0218\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u014f"+
    "\0\u7a39\0\u7a7c\0\u7abf\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u0218"+
    "\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7\0\u7d1a\0\u7d5d\0\u014f\0\u014f"+
    "\0\u014f\0\u7da0\0\u7de3\0\u7e26\0\u014f\0\u0218\0\u0218\0\u0218"+
    "\0\u7e69\0\u7eac\0\u7eef\0\u0218\0\u7f32\0\u014f\0\u7f75\0\u7fb8"+
    "\0\u7ffb\0\u803e\0\u8081\0\u80c4\0\u8107\0\u814a\0\u818d\0\u0218"+
    "\0\u0218";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\11\1\27\1\30\2\31\1\30\1\11\1\32"+
    "\1\11\1\33\1\34\1\30\1\35\1\36\1\11\1\37"+
    "\1\40\1\41\1\6\1\42\1\43\1\11\1\44\1\11"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\3\11\27\71\1\0\11\71"+
    "\1\72\4\71\1\73\34\71\1\74\1\75\1\76\1\74"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\74\1\107\1\110\1\111\4\74\1\112\17\74\1\113"+
    "\2\74\1\114\15\74\1\115\13\74\1\116\1\117\1\0"+
    "\1\120\1\121\1\11\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\11\1\132\1\133\1\134\4\11"+
    "\1\135\1\11\4\0\1\11\1\0\1\11\5\0\1\11"+
    "\4\0\1\136\2\11\1\0\1\11\24\0\1\11\1\137"+
    "\1\11\1\0\25\140\1\0\2\31\1\0\1\140\1\0"+
    "\1\140\5\0\1\140\4\0\3\140\1\0\1\140\24\0"+
    "\3\140\104\0\1\11\1\141\1\11\1\142\1\11\1\143"+
    "\1\142\2\11\1\144\1\145\1\11\1\146\6\11\1\147"+
    "\2\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\151\2\11\1\151\6\11\1\152\1\11"+
    "\1\153\10\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\4\11\1\154\6\11\1\155\1\156"+
    "\6\11\1\157\2\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\7\11\1\160\1\161\5\11\1\162"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\10\11\1\163\1\11\1\164\13\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\165"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\166\5\11\1\164\14\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\167\1\170"+
    "\2\11\1\171\1\172\3\11\1\173\3\11\1\160\1\174"+
    "\2\11\1\175\4\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\176\12\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\177"+
    "\12\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\200\24\0\3\11"+
    "\1\0\1\11\1\201\24\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\202\14\11\1\202"+
    "\4\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\203\6\11\1\204\5\11\1\205\1\206"+
    "\1\207\5\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\1\11\1\172\2\11\1\172\2\11\1\210"+
    "\1\211\1\11\1\212\4\11\1\213\1\11\1\214\4\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\16\11\1\151\7\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\10\11\1\215\12\11\1\216\2\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\26\0"+
    "\1\30\2\0\1\30\1\217\1\220\3\0\1\30\72\0"+
    "\2\31\53\0\1\221\2\0\1\221\3\0\1\221\1\0"+
    "\1\221\4\0\1\221\6\0\1\221\2\0\1\221\2\0"+
    "\1\221\2\0\1\221\7\0\2\221\71\0\1\222\43\0"+
    "\40\223\1\0\1\224\4\223\1\225\34\223\27\226\1\0"+
    "\11\226\1\227\41\226\44\0\1\230\1\231\14\0\1\232"+
    "\21\0\16\11\1\233\7\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\234\7\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\6\0\1\235"+
    "\1\0\1\236\1\0\1\237\40\0\1\240\111\0\1\241"+
    "\61\0\1\242\123\0\1\243\3\0\1\244\76\0\1\245"+
    "\4\0\1\246\103\0\1\247\103\0\1\250\73\0\1\251"+
    "\102\0\1\252\102\0\1\253\20\0\27\71\1\0\11\71"+
    "\1\0\4\71\1\0\34\71\1\0\2\254\10\0\1\254"+
    "\2\0\1\254\16\0\1\255\3\0\1\254\4\0\2\254"+
    "\35\0\1\256\16\0\1\257\73\0\1\260\104\0\1\261"+
    "\1\262\101\0\1\263\2\0\1\264\76\0\1\265\10\0"+
    "\1\266\22\0\1\267\32\0\1\270\17\0\1\271\71\0"+
    "\1\272\3\0\1\273\66\0\1\274\13\0\1\275\3\0"+
    "\1\276\66\0\1\277\4\0\1\300\3\0\1\301\106\0"+
    "\1\302\65\0\1\303\1\0\1\304\1\305\3\0\1\306"+
    "\103\0\1\307\71\0\1\310\3\0\1\311\3\0\1\312"+
    "\6\0\2\313\73\0\1\314\1\0\1\315\2\0\1\316"+
    "\127\0\1\317\1\320\43\0\1\321\5\0\1\322\36\0"+
    "\1\323\43\0\1\324\2\0\1\325\2\0\1\326\75\0"+
    "\1\327\2\0\2\313\62\0\1\11\1\330\16\11\1\331"+
    "\5\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\332\14\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\333\1\334\11\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\13\11\1\335\2\11\1\336\7\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\23\11\1\337\2\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\1\340\2\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\1\341\7\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\342\3\11\1\343"+
    "\14\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\1\11"+
    "\1\344\1\11\1\0\11\11\1\345\3\11\1\346\10\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\1\11\1\347\4\11\1\350\3\11\1\351\13\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\16\11"+
    "\1\352\7\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\1\11\1\353\1\11\1\354\1\355\3\11"+
    "\1\356\15\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\357\14\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\4\11\1\360\3\11"+
    "\1\361\15\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\362\1\11\1\363\2\11\1\364"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\365\5\11\1\366\12\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\367\24\0\3\11\1\0\13\11\1\370"+
    "\2\11\1\371\2\11\1\372\4\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\140\2\0\2\140"+
    "\1\0\1\140\2\0\1\140\2\0\1\140\4\0\3\140"+
    "\1\0\1\140\24\0\3\140\1\0\2\11\1\373\13\11"+
    "\1\374\7\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\375\4\11\1\375\15\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\375\10\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\22\11\1\375\3\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\375\14\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\375\21\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\375\20\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\374"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\376\2\11\1\376\21\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\373"+
    "\2\11\1\373\15\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\373\1\11\3\373\16\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\12\11\1\377\13\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\17\11\2\375\5\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0100"+
    "\11\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\3\u0100\5\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\376\24\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\374\6\11\1\374\6\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\374\22\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\3\11"+
    "\1\u0100\13\11\2\373\5\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0101\24\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\14\11"+
    "\1\374\11\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u0102\22\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\374\14\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\13\11\1\374\12\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\374\24\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\3\11\1\373"+
    "\1\11\1\373\1\11\1\373\16\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\374\13\11"+
    "\1\374\6\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\17\11\2\374\5\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u0100\24\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\14\11\1\373\11\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\4\11\1\u0103\21\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\u0100"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\14\11\1\373\1\11\1\373\7\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\u0104\24\0\3\11\1\0\17\11"+
    "\1\373\6\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\374\6\11\2\373\5\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\373\5\11\1\373\7\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\373\7\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\3\11"+
    "\1\u0100\22\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\4\11\1\376\21\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0105\3\11"+
    "\1\u0100\16\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\374\15\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\17\11\1\374\6\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\1\11\1\375\24\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\14\11\1\375\11\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\26\0\1\30\2\0"+
    "\1\30\1\217\4\0\1\30\71\0\1\u0106\2\0\1\u0106"+
    "\5\0\1\u0106\44\0\1\221\2\0\1\221\3\0\1\221"+
    "\1\0\1\221\4\0\1\221\6\0\1\221\2\0\1\221"+
    "\1\u0107\1\0\1\221\2\0\1\221\7\0\2\221\64\0"+
    "\1\u0108\4\0\1\222\103\0\1\u0109\42\0\27\u010a\1\0"+
    "\10\u010a\1\u010b\1\223\41\u010a\1\0\2\u010c\10\0\1\u010c"+
    "\2\0\1\u010c\21\0\1\u0109\1\u010c\4\0\2\u010c\33\0"+
    "\27\230\1\0\53\230\45\231\1\u010d\35\231\1\0\4\11"+
    "\1\u010e\21\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\u010f\15\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\24\0\1\u0110\22\0\1\u0111"+
    "\45\0\1\u0112\75\0\1\u0113\5\0\1\u0114\102\0\1\u0115"+
    "\70\0\1\u0116\2\0\1\u0116\3\0\1\u0116\1\0\1\u0116"+
    "\4\0\1\u0116\6\0\1\u0116\2\0\1\u0116\2\0\1\u0116"+
    "\2\0\1\u0116\7\0\2\u0116\44\0\1\u0117\106\0\1\u0118"+
    "\71\0\1\313\10\0\1\u0119\77\0\1\u011a\142\0\1\u011b"+
    "\51\0\1\u011c\61\0\1\u011d\111\0\1\313\107\0\1\u011e"+
    "\6\0\1\313\73\0\1\u011f\2\0\2\313\63\0\1\u0120"+
    "\111\0\1\u0121\140\0\1\u0122\47\0\1\u0123\166\0\1\u0124"+
    "\4\0\1\u0125\102\0\1\u0126\117\0\1\u0127\67\0\1\u0128"+
    "\46\0\1\u0129\53\0\1\u012a\64\0\1\u012b\147\0\1\u012c"+
    "\41\0\1\u012d\110\0\1\u012e\73\0\1\327\77\0\1\u012f"+
    "\105\0\1\u0130\115\0\1\u0131\66\0\1\u0132\76\0\1\u0133"+
    "\76\0\27\317\1\0\53\317\45\320\1\u0134\35\320\5\0"+
    "\1\u0135\77\0\1\u0136\113\0\1\u0137\71\0\1\u0138\116\0"+
    "\1\u0139\72\0\1\u013a\114\0\2\313\62\0\11\11\1\u013b"+
    "\14\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\15\11\1\u013c\10\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u013d\10\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\12\11"+
    "\1\u013e\13\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\u013f"+
    "\24\0\3\11\1\0\21\11\1\u0140\4\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\u0141\25\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\14\11\1\u0142\11\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0143\24\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\10\11\1\u0144"+
    "\15\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\26\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\1\u0145\2\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\u0146\12\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\1\u0147\2\11\1\0"+
    "\1\11\1\u0148\24\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0149\24\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\u014a"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u014b\22\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\u014c\24\0\3\11\1\0\23\11\1\u014d\2\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\5\11"+
    "\1\u014e\20\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\u014f"+
    "\24\0\3\11\1\0\11\11\1\u0150\14\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\17\11\1\u0151"+
    "\6\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u0152\20\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\10\11\1\u0153\15\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\23\11"+
    "\1\u0154\2\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\7\11\1\u0155\16\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0156\22\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u0157\21\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0158\24\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\12\11\1\u0159"+
    "\13\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\u015a\24\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u015b\10\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\5\11"+
    "\1\u015c\20\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\u015d\15\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\25\11\1\374\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\4\11"+
    "\1\u015e\21\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\u015f\14\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\26\0\1\u0106\2\0\1\u0106"+
    "\1\u0160\4\0\1\u0106\43\0\27\u010a\1\0\11\u010a\1\223"+
    "\41\u010a\40\0\1\u0161\42\0\44\231\1\u0162\1\u010d\35\231"+
    "\1\0\10\11\1\u0104\15\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\u0163\20\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\15\0\1\u0164"+
    "\134\0\1\u0165\41\0\1\u0166\2\0\1\u0167\101\0\1\u0168"+
    "\102\0\1\u0169\111\0\1\u016a\75\0\1\u016b\143\0\1\u016c"+
    "\40\0\1\u016d\77\0\1\u016e\106\0\1\u016f\104\0\1\u0170"+
    "\71\0\1\u0171\105\0\1\u0172\120\0\1\u0173\131\0\1\u0174"+
    "\43\0\1\u0175\73\0\1\u0176\111\0\1\u0177\112\0\1\u0178"+
    "\70\0\1\u0179\103\0\1\u017a\167\0\1\u017b\55\0\1\u017c"+
    "\45\0\1\u016b\164\0\1\u017d\14\0\1\u017e\71\0\1\u017f"+
    "\107\0\1\u0180\76\0\1\u0181\100\0\44\320\1\u0182\1\u0134"+
    "\35\320\5\0\1\u0183\4\0\1\u0184\74\0\1\u0185\106\0"+
    "\1\u016b\76\0\1\u0186\103\0\1\u0187\76\0\16\11\1\u0188"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u0189\14\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\u018a\24\0\3\11\1\0\10\11\1\u018b\15\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\u018c\20\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\u018d\14\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u018e"+
    "\12\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\2\11\1\u018f\23\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\u0190\20\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\23\11"+
    "\1\u0191\2\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\u0192"+
    "\24\0\3\11\1\0\13\11\1\u0193\12\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\u0194"+
    "\21\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\13\11\1\u0195\12\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\23\11\1\u0196\2\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u0197\14\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u0198\13\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\1\u0199\2\11\1\0\26\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\u019a\24\0\3\11\1\0"+
    "\15\11\1\u0189\10\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\26\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\1\u019b\2\11\1\0\11\11\1\u019c\14\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\1\u019d\25\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u019e\20\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u019f\24\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u01a0\4\11\1\u01a1\14\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u01a2\22\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\7\11\1\u0189\16\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u01a3\22\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\u01a4"+
    "\21\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\15\11\1\u0101\10\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\u01a5\22\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\14\0\1\u01a6"+
    "\74\0\1\u01a7\143\0\1\u0111\45\0\1\u01a8\76\0\1\u01a9"+
    "\106\0\1\u01aa\73\0\1\u01ab\101\0\1\u01ac\116\0\1\u0120"+
    "\133\0\1\u01ad\40\0\1\u01ae\77\0\1\u01af\113\0\1\u01b0"+
    "\101\0\1\u01b1\74\0\1\u01b2\100\0\1\u01b3\110\0\1\u01b4"+
    "\103\0\1\u01b5\107\0\1\u01b6\72\0\1\u01b7\104\0\1\u01b8"+
    "\105\0\1\u01b9\71\0\1\u01ba\105\0\1\u01bb\144\0\1\u01bc"+
    "\47\0\1\u01bd\167\0\1\u01be\14\0\1\u01bf\10\0\1\u01c0"+
    "\74\0\1\u01c1\106\0\1\u01c2\72\0\1\u01c3\71\0\2\11"+
    "\1\u01c4\23\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\1\11\1\u01c5\24\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u0143\10\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\1\u01c6\2\11\1\0\1\11\24\0"+
    "\3\11\1\0\4\11\1\u01c7\21\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u01c8\24\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\12\11\1\u01c9\13\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\u01ca\14\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\3\11\1\u01cb"+
    "\22\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\u01cc\24\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\7\11\1\u01cd\16\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u01ce\15\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u01cf\10\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\5\11\1\u01d0\20\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\7\11\1\u01d1\16\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\12\11\1\u01d2\13\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u01d3"+
    "\24\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\u01d4\21\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\1\u01d5"+
    "\2\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u01d6"+
    "\12\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\26\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\1\11\1\u01d7\1\11\1\0\12\11\1\u01d8\10\11\1\u01d9"+
    "\2\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\15\11\1\u01da\10\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\21\11\1\u01db\4\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u01dc\14\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\2\11\1\u01dd\1\0"+
    "\1\11\24\0\3\11\2\0\1\u01de\113\0\1\u01df\136\0"+
    "\1\u01a8\102\0\1\u01e0\46\0\1\u01e1\75\0\1\u01e2\112\0"+
    "\1\u01e3\76\0\1\u01e4\103\0\1\u01e5\105\0\1\u01e6\72\0"+
    "\1\u01e7\102\0\1\u01e8\111\0\1\u01e9\100\0\1\u01ea\102\0"+
    "\1\u01eb\103\0\1\u01ec\104\0\1\u01ed\100\0\1\u01ee\107\0"+
    "\1\u01ef\100\0\1\u01f0\77\0\1\u01f1\74\0\1\u01f2\75\0"+
    "\12\11\1\u01f3\13\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u01f4\20\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\15\11\1\u01f5"+
    "\10\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u01f6\14\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\12\11\1\u01f7\13\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u01f8\10\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u01f9\20\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\5\11\1\u01fa\20\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\14\11\1\u01fb\11\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\12\11\1\u01fc\13\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\12\11\1\u01fd"+
    "\13\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\13\11\1\u01fe\12\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u01ff\10\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u0200\12\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\20\11\1\u0201\5\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\16\11\1\u0202\7\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\13\11\1\u0203\12\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u0204\20\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0205"+
    "\11\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\16\0\1\u0206\76\0\1\u01e0\75\0\1\u0207\111\0\1\u0208"+
    "\104\0\1\u0209\133\0\1\u020a\46\0\1\u020b\106\0\1\u020c"+
    "\77\0\1\u020d\72\0\1\u020e\10\0\1\u020f\77\0\1\u0210"+
    "\74\0\1\u0211\122\0\1\u0212\66\0\1\u0213\106\0\1\u0214"+
    "\67\0\4\11\1\u0215\21\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u0216\12\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u0217\10\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\1\u0218\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\12\11\1\u0219\13\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\16\11"+
    "\1\u021a\7\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\13\11\1\u021b\12\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u021c\10\11"+
    "\1\u021d\11\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\u021e\14\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u021f\22\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\23\11\1\u0220\2\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\7\11\1\u0221\16\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u0222"+
    "\12\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\10\11\1\u0223\15\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\6\0\1\u01a9\5\0\1\u0224\73\0"+
    "\1\u016b\110\0\1\u0225\77\0\1\u0226\3\0\1\u0227\166\0"+
    "\1\u0228\6\0\1\u0229\177\0\1\u01eb\15\0\1\u022a\72\0"+
    "\1\u022b\100\0\1\u022c\103\0\1\u01eb\111\0\1\u022d\76\0"+
    "\1\u022e\107\0\1\u022f\70\0\4\11\1\u0189\21\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\12\11"+
    "\1\u0230\13\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\7\11\1\u0231\3\11\1\u0232\12\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\26\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\1\u0233\2\11"+
    "\1\0\3\11\1\u0234\22\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\1\11\1\u01fd\1\11\1\0\13\11"+
    "\1\u0235\12\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u0236\22\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u0237\24\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\2\11\1\u01fd\23\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\u0238\14\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\u0239"+
    "\20\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u023a\13\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u023b\10\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\13\0\1\u023c"+
    "\73\0\1\u023d\110\0\1\u023e\143\0\1\u023f\41\0\1\u0240"+
    "\114\0\1\u0241\60\0\1\u0242\111\0\1\u0243\140\0\1\u0244"+
    "\34\0\3\11\1\u0245\22\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\11\11\1\u0246\14\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\26\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\u0247\24\0\3\11\1\0"+
    "\11\11\1\u0248\14\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\23\11\1\u0249\2\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u024a"+
    "\24\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\10\11\1\u024b\15\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\1\u024c"+
    "\2\11\1\0\1\11\24\0\3\11\1\0\16\11\1\u024d"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\4\0\1\u024e\110\0\1\u024f\137\0\1\u0250\51\0\1\u0251"+
    "\110\0\1\u0252\72\0\1\u0253\103\0\1\u0254\106\0\1\u0255"+
    "\62\0\11\11\1\u0256\14\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\1\u0257"+
    "\2\11\1\0\1\11\24\0\3\11\1\0\15\11\1\u0258"+
    "\10\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\23\11\1\u0259\2\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u025a\12\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\14\11"+
    "\1\u025b\11\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\20\11\1\u025c\5\11\2\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\150\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\1\11\1\u025d\24\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\12\0"+
    "\1\u025e\107\0\1\u025f\65\0\1\u020a\117\0\1\u0260\64\0"+
    "\16\11\1\u0261\7\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0218\24\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\16\11\1\u0262"+
    "\7\11\2\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\150\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\15\11\1\u0263\10\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\150\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\13\0\1\u0264\73\0\1\u0265\77\0"+
    "\12\11\1\u0266\13\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\150\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u0267\22\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\150\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\25\11\1\u0268"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\150\3\0\3\11\1\0\1\11\24\0\3\11\10\0"+
    "\1\u022b\104\0\1\u01eb\71\0\7\11\1\u0269\16\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\150"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u01fd\14\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\150\3\0\3\11\1\0\1\11\24\0"+
    "\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\23\1\1\11\4\1\1\11\1\1\1\11"+
    "\3\1\6\11\2\1\2\11\4\1\2\11\3\1\1\11"+
    "\1\1\1\11\1\0\1\11\20\1\1\11\32\1\1\11"+
    "\46\1\2\0\2\1\4\0\1\11\2\1\1\11\2\1"+
    "\4\0\14\11\2\0\1\1\6\0\1\1\1\11\4\0"+
    "\1\1\7\0\1\11\2\0\1\1\3\0\1\11\3\0"+
    "\2\1\3\0\1\1\2\0\60\1\2\0\1\11\1\0"+
    "\1\1\2\0\2\1\1\0\1\11\4\0\1\1\4\0"+
    "\1\11\4\0\1\11\25\0\1\11\4\0\45\1\1\0"+
    "\2\11\1\1\7\0\1\11\5\0\1\11\4\0\1\11"+
    "\1\0\1\11\11\0\1\11\2\1\3\0\36\1\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\4\0\1\1\2\0"+
    "\1\1\2\0\1\11\3\0\1\11\4\0\2\11\32\1"+
    "\2\0\2\11\1\0\1\1\1\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\1\1\0\1\11\3\0\24\1\2\0"+
    "\1\1\1\11\12\0\17\1\4\0\1\11\2\0\1\11"+
    "\3\0\1\11\14\1\4\0\1\11\4\0\11\1\1\0"+
    "\3\11\3\0\1\11\10\1\1\11\2\0\3\1\2\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private void pm() {
      if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
          yybegin(YYINITIAL);
      }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 137: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 138: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 139: break;
          case 4: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 140: break;
          case 5: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 141: break;
          case 6: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 142: break;
          case 7: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 143: break;
          case 8: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 144: break;
          case 9: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 145: break;
          case 10: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 146: break;
          case 11: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 147: break;
          case 12: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 148: break;
          case 13: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 149: break;
          case 14: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 150: break;
          case 15: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 151: break;
          case 16: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 152: break;
          case 17: 
            { pm(); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 153: break;
          case 18: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 154: break;
          case 19: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 155: break;
          case 20: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 156: break;
          case 21: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 157: break;
          case 22: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 158: break;
          case 23: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 159: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 160: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 161: break;
          case 26: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 162: break;
          case 27: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 163: break;
          case 28: 
            { pm(); return KickAssemblerTypes.BANG;
            } 
            // fall through
          case 164: break;
          case 29: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 165: break;
          case 30: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 166: break;
          case 31: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 167: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 168: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 169: break;
          case 34: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 170: break;
          case 35: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 171: break;
          case 36: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 172: break;
          case 37: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 173: break;
          case 38: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 174: break;
          case 39: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 175: break;
          case 40: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 176: break;
          case 41: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 177: break;
          case 42: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 178: break;
          case 43: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 179: break;
          case 44: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 180: break;
          case 45: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 181: break;
          case 46: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 182: break;
          case 47: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 183: break;
          case 48: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 184: break;
          case 49: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 185: break;
          case 50: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 186: break;
          case 51: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 187: break;
          case 52: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 188: break;
          case 53: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 189: break;
          case 54: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 190: break;
          case 55: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 191: break;
          case 56: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 192: break;
          case 57: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 193: break;
          case 58: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 194: break;
          case 59: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 195: break;
          case 60: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 196: break;
          case 61: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 197: break;
          case 62: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC0;
            } 
            // fall through
          case 198: break;
          case 63: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_ILLEGAL;
            } 
            // fall through
          case 199: break;
          case 64: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC1;
            } 
            // fall through
          case 200: break;
          case 65: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_012;
            } 
            // fall through
          case 201: break;
          case 66: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC12;
            } 
            // fall through
          case 202: break;
          case 67: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 203: break;
          case 68: 
            { pm(); return KickAssemblerTypes.CHAR;
            } 
            // fall through
          case 204: break;
          case 69: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IF;
            } 
            // fall through
          case 205: break;
          case 70: 
            { return KickAssemblerTypes.ESCAPE_HEX;
            } 
            // fall through
          case 206: break;
          case 71: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 207: break;
          case 72: 
            { yybegin(SYMBOL_DEF); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 208: break;
          case 73: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 209: break;
          case 74: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 210: break;
          case 75: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 211: break;
          case 76: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 212: break;
          case 77: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 213: break;
          case 78: 
            { pm(); return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 214: break;
          case 79: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 215: break;
          case 80: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 216: break;
          case 81: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 217: break;
          case 82: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 218: break;
          case 83: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 219: break;
          case 84: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 220: break;
          case 85: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 221: break;
          case 86: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 222: break;
          case 87: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 223: break;
          case 88: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 224: break;
          case 89: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 225: break;
          case 90: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 226: break;
          case 91: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 227: break;
          case 92: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 228: break;
          case 93: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 229: break;
          case 94: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 230: break;
          case 95: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 231: break;
          case 96: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 232: break;
          case 97: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 233: break;
          case 98: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 234: break;
          case 99: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 235: break;
          case 100: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 236: break;
          case 101: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 237: break;
          case 102: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_DEF;
            } 
            // fall through
          case 238: break;
          case 103: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 239: break;
          case 104: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 240: break;
          case 105: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 241: break;
          case 106: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 242: break;
          case 107: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 243: break;
          case 108: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 244: break;
          case 109: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 245: break;
          case 110: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 246: break;
          case 111: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 247: break;
          case 112: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 248: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 249: break;
          case 114: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 250: break;
          case 115: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 251: break;
          case 116: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 252: break;
          case 117: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 253: break;
          case 118: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 254: break;
          case 119: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 255: break;
          case 120: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 256: break;
          case 121: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 257: break;
          case 122: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 258: break;
          case 123: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 259: break;
          case 124: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOPC;
            } 
            // fall through
          case 260: break;
          case 125: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 261: break;
          case 126: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 262: break;
          case 127: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 263: break;
          case 128: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 264: break;
          case 129: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 265: break;
          case 130: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 266: break;
          case 131: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 267: break;
          case 132: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 268: break;
          case 133: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 269: break;
          case 134: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 270: break;
          case 135: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 271: break;
          case 136: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOCOMMAND;
            } 
            // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
