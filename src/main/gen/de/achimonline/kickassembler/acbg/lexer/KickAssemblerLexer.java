/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\55\1\54\1\0\1\55\1\54\22\0\1\55\1\66\1\74\1\76\1\61\1\63\1\114\1\0"+
    "\1\101\1\102\1\73\1\67\1\110\1\70\1\60\1\72\2\64\1\53\7\56\1\71\1\111\1\112"+
    "\1\107\1\113\1\120\1\121\1\4\1\24\1\6\1\5\1\27\1\62\1\65\1\11\1\33\1\52\1"+
    "\42\1\15\1\36\1\20\1\50\1\40\1\30\1\16\1\22\1\34\1\75\1\44\1\65\1\12\1\46"+
    "\1\65\1\105\1\125\1\106\1\116\1\57\1\0\1\1\1\23\1\3\1\2\1\25\1\77\1\122\1"+
    "\7\1\31\1\51\1\41\1\13\1\35\1\17\1\47\1\37\1\26\1\14\1\21\1\32\1\100\1\43"+
    "\1\123\1\10\1\45\1\124\1\103\1\115\1\104\1\117\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\40\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\2"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\1\1\35\1\36\1\0\1\37\1\40\3\37\1\41"+
    "\4\37\1\41\7\37\1\40\16\2\1\0\10\2\1\42"+
    "\67\2\2\0\2\3\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\0\1\55"+
    "\4\0\1\2\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\41\5\0\1\67\11\0\1\67"+
    "\4\0\1\41\1\70\1\0\1\67\3\0\1\71\4\0"+
    "\1\72\1\73\5\0\1\67\1\40\4\2\1\74\11\2"+
    "\1\74\4\2\1\75\1\74\3\2\1\76\11\2\1\74"+
    "\2\77\4\2\1\100\1\3\7\0\1\101\1\0\1\2"+
    "\5\0\1\102\26\0\1\103\2\0\1\104\4\0\5\2"+
    "\1\105\25\2\1\106\1\2\1\107\5\2\1\110\1\2"+
    "\1\111\1\0\1\53\11\0\1\112\10\0\1\67\2\0"+
    "\1\113\1\114\7\0\1\73\1\67\1\115\3\0\3\2"+
    "\1\116\10\2\1\74\2\2\1\117\1\120\7\2\1\74"+
    "\1\121\4\2\2\0\1\122\7\0\1\123\1\124\2\0"+
    "\1\125\3\0\1\124\5\0\1\126\1\127\1\130\7\2"+
    "\1\131\1\132\2\2\1\133\3\2\1\132\5\2\1\134"+
    "\1\135\1\2\1\0\1\136\1\137\1\0\1\140\2\0"+
    "\1\141\2\0\1\142\1\0\1\143\1\124\5\0\1\144"+
    "\1\145\1\2\1\146\2\2\1\147\2\2\1\150\1\2"+
    "\1\151\1\132\6\2\1\152\3\0\1\153\1\154\11\0"+
    "\3\2\1\155\1\156\12\2\5\0\1\157\4\0\1\160"+
    "\4\2\1\161\4\2\1\162\1\2\2\0\1\163\6\0"+
    "\1\2\1\164\7\2\2\0\1\165\1\115\1\166\2\0"+
    "\1\167\1\2\1\170\1\121\1\171\2\2\1\172\1\2"+
    "\1\173\2\0\3\2\2\0\2\2\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba"+
    "\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a"+
    "\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u0cc4\0\u0158"+
    "\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0158\0\u0ec8\0\u0158"+
    "\0\u0f1e\0\u0f74\0\u0fca\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158"+
    "\0\u0158\0\u1020\0\u0158\0\u0158\0\u1076\0\u10cc\0\u1122\0\u1178"+
    "\0\u0158\0\u0158\0\u0158\0\u11ce\0\u1224\0\u0158\0\u127a\0\u0158"+
    "\0\u12d0\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a"+
    "\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da"+
    "\0\u1830\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a"+
    "\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a"+
    "\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea"+
    "\0\u2040\0\u0158\0\u2096\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u2244"+
    "\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e\0\u24f4"+
    "\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4"+
    "\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54"+
    "\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04"+
    "\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4"+
    "\0\u300a\0\u3060\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264"+
    "\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u0158"+
    "\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158\0\u3514\0\u356a\0\u0158"+
    "\0\u0f1e\0\u0158\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u0158"+
    "\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158\0\u0158"+
    "\0\u0158\0\u376e\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972"+
    "\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22"+
    "\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u0158\0\u3e7c"+
    "\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u0158\0\u402a\0\u4080\0\u40d6"+
    "\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386"+
    "\0\u43dc\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636"+
    "\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6"+
    "\0\u493c\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u03b2\0\u4aea\0\u4b40"+
    "\0\u4b96\0\u4bec\0\u03b2\0\u4c42\0\u4c98\0\u4cee\0\u4d44\0\u4d9a"+
    "\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u03b2\0\u4f9e\0\u4ff4"+
    "\0\u504a\0\u50a0\0\u50f6\0\u03b2\0\u514c\0\u33bc\0\u3412\0\u51a2"+
    "\0\u51f8\0\u524e\0\u52a4\0\u52fa\0\u0158\0\u5350\0\u53a6\0\u53fc"+
    "\0\u5452\0\u54a8\0\u54fe\0\u43dc\0\u0158\0\u5554\0\u55aa\0\u5600"+
    "\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0"+
    "\0\u5906\0\u595c\0\u59b2\0\u4432\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a"+
    "\0\u5b60\0\u5bb6\0\u5c0c\0\u0158\0\u5c62\0\u5cb8\0\u0158\0\u5d0e"+
    "\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68\0\u4f48"+
    "\0\u03b2\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2"+
    "\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472"+
    "\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u03b2\0\u66cc"+
    "\0\u03b2\0\u6722\0\u6778\0\u67ce\0\u6824\0\u687a\0\u03b2\0\u68d0"+
    "\0\u03b2\0\u514c\0\u0158\0\u6926\0\u697c\0\u69d2\0\u6a28\0\u6a7e"+
    "\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u0158\0\u6c2c\0\u6c82\0\u6cd8"+
    "\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u0158\0\u6edc\0\u6f32"+
    "\0\u0158\0\u0158\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136"+
    "\0\u718c\0\u0158\0\u71e2\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390"+
    "\0\u73e6\0\u743c\0\u03b2\0\u7492\0\u74e8\0\u753e\0\u7594\0\u75ea"+
    "\0\u7640\0\u7696\0\u76ec\0\u03b2\0\u7742\0\u7798\0\u03b2\0\u03b2"+
    "\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2\0\u7a48"+
    "\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2\0\u0158"+
    "\0\u7cf8\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc\0\u0158"+
    "\0\u7f52\0\u7fa8\0\u7ffe\0\u0158\0\u8054\0\u80aa\0\u8100\0\u8156"+
    "\0\u81ac\0\u391c\0\u8202\0\u8258\0\u82ae\0\u0158\0\u0158\0\u03b2"+
    "\0\u8304\0\u835a\0\u83b0\0\u8406\0\u845c\0\u84b2\0\u8508\0\u03b2"+
    "\0\u855e\0\u85b4\0\u860a\0\u03b2\0\u8660\0\u86b6\0\u870c\0\u8762"+
    "\0\u87b8\0\u45e0\0\u880e\0\u8864\0\u88ba\0\u03b2\0\u03b2\0\u8910"+
    "\0\u8966\0\u89bc\0\u0158\0\u8a12\0\u0158\0\u8a68\0\u8abe\0\u0158"+
    "\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16\0\u0158\0\u0158\0\u8c6c\0\u8cc2"+
    "\0\u8d18\0\u8d6e\0\u8dc4\0\u8e1a\0\u03b2\0\u8e70\0\u03b2\0\u8ec6"+
    "\0\u8f1c\0\u03b2\0\u8f72\0\u8fc8\0\u901e\0\u9074\0\u03b2\0\u03b2"+
    "\0\u90ca\0\u9120\0\u9176\0\u91cc\0\u9222\0\u9278\0\u92ce\0\u9324"+
    "\0\u937a\0\u93d0\0\u9426\0\u0158\0\u947c\0\u94d2\0\u9528\0\u957e"+
    "\0\u95d4\0\u962a\0\u9680\0\u96d6\0\u972c\0\u9782\0\u97d8\0\u982e"+
    "\0\u9884\0\u03b2\0\u98da\0\u9930\0\u9986\0\u99dc\0\u9a32\0\u9a88"+
    "\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36\0\u9c8c\0\u9ce2\0\u9d38"+
    "\0\u9d8e\0\u0158\0\u9de4\0\u9e3a\0\u9e90\0\u9ee6\0\u0158\0\u9f3c"+
    "\0\u9f92\0\u9fe8\0\ua03e\0\u03b2\0\ua094\0\ua0ea\0\ua140\0\ua196"+
    "\0\u03b2\0\ua1ec\0\ua242\0\ua298\0\u0158\0\ua2ee\0\ua344\0\ua39a"+
    "\0\ua3f0\0\ua446\0\ua49c\0\ua4f2\0\u03b2\0\ua548\0\ua59e\0\ua5f4"+
    "\0\ua64a\0\ua6a0\0\ua6f6\0\ua74c\0\ua7a2\0\ua7f8\0\u0158\0\u0158"+
    "\0\u0158\0\ua84e\0\ua8a4\0\u0158\0\ua8fa\0\u03b2\0\u03b2\0\u03b2"+
    "\0\ua950\0\ua9a6\0\u03b2\0\ua9fc\0\u0158\0\uaa52\0\uaaa8\0\uaafe"+
    "\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac\0\uad02\0\u03b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\14\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\14\1\32"+
    "\1\14\1\33\1\34\1\35\1\36\2\14\1\37\1\40"+
    "\2\14\1\41\3\14\1\42\1\43\1\44\1\45\1\46"+
    "\2\47\1\46\1\14\1\50\1\51\1\14\1\52\1\46"+
    "\1\14\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\14\1\62\1\63\1\14\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\3\14\1\5\54\105"+
    "\1\0\17\105\1\106\30\105\1\107\1\110\1\111\1\112"+
    "\1\113\7\110\1\114\1\115\2\110\1\116\1\110\1\117"+
    "\1\110\1\120\1\110\1\121\3\110\1\122\1\123\2\110"+
    "\1\124\1\110\1\125\3\110\1\126\26\110\1\127\4\110"+
    "\1\130\23\110\1\131\1\132\1\110\1\0\1\133\1\134"+
    "\1\135\7\14\1\136\1\137\2\14\1\140\1\14\1\141"+
    "\1\14\1\142\1\14\1\143\3\14\1\144\1\145\2\14"+
    "\1\146\1\14\1\147\3\14\1\150\7\14\4\0\1\14"+
    "\2\0\1\14\2\0\1\14\1\151\6\0\1\14\1\0"+
    "\1\152\1\14\21\0\1\14\1\153\1\14\130\0\1\14"+
    "\1\154\4\14\1\155\1\156\2\14\2\157\2\14\1\160"+
    "\1\14\1\161\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\2\14\1\163\21\14\1\164\26\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\12\14\1\165"+
    "\21\14\1\163\1\14\1\166\7\14\1\167\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\4\14\1\170"+
    "\3\14\1\171\1\172\2\14\2\173\1\14\1\174\1\14"+
    "\1\175\31\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\5\14\1\176\20\14\1\177\24\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\14\14\1\200\20\14"+
    "\1\176\1\14\1\201\13\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\53\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\1\202\52\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\3\14\1\203\47\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\1\204\1\205"+
    "\16\14\1\157\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\12\14\2\202\15\14\1\206\14\14\1\207"+
    "\4\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\3\14\1\210\1\211\14\14\1\173\31\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\14\14\2\203\15\14"+
    "\1\212\13\14\1\213\3\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\46\14\1\163\4\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\1\14\1\214\21\0\3\14\2\0\47\14\1\176"+
    "\3\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\1\215\5\14\1\166\3\14\1\216\1\217\6\14\1\220"+
    "\1\14\1\221\3\14\1\157\1\205\21\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\3\14\1\222\4\14"+
    "\1\201\3\14\1\223\1\224\5\14\1\225\2\14\1\226"+
    "\3\14\1\173\1\211\17\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\2\14\1\227\10\14\1\230\2\14"+
    "\1\217\5\14\1\231\3\14\1\232\3\14\1\233\1\14"+
    "\1\161\3\14\1\227\10\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\1\234\4\14\1\235\7\14\1\236"+
    "\1\14\1\224\6\14\1\237\3\14\1\240\2\14\1\241"+
    "\1\14\1\175\3\14\1\235\7\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\46\14\1\157\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\47\14\1\173"+
    "\3\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\16\14\1\164\1\14\1\154\32\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\242\6\14\1\243\3\14"+
    "\1\244\4\14\1\155\23\14\1\202\6\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\17\14\1\177\1\14"+
    "\1\170\31\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\3\14\1\245\5\14\1\246\7\14\1\171\23\14"+
    "\1\203\5\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\6\14\1\247\3\14\1\247\40\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\10\14\1\250\3\14"+
    "\1\250\36\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\1\251\52\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\13\14\1\202\37\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\15\14\1\203\35\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\20\14\1\157"+
    "\13\14\1\163\16\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\21\14\1\173\13\14\1\176\15\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\54\0\1\46\2\0"+
    "\1\46\1\252\1\253\3\0\1\46\115\0\2\47\51\0"+
    "\6\254\14\0\3\254\1\0\1\254\23\0\1\254\2\0"+
    "\1\254\3\0\1\254\1\0\1\254\12\0\1\254\112\0"+
    "\1\255\42\0\52\256\4\0\1\256\2\0\1\256\2\0"+
    "\1\256\1\0\2\257\1\260\3\0\1\256\1\0\2\256"+
    "\6\0\1\261\12\0\3\256\70\0\1\262\17\0\1\263"+
    "\106\0\1\264\16\0\1\265\110\0\1\266\1\267\13\0"+
    "\1\270\16\0\54\271\1\0\17\271\1\272\31\271\2\0"+
    "\1\273\22\0\1\274\3\0\1\275\46\0\1\276\26\0"+
    "\1\277\52\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\110\0\1\300\125\0\1\301\2\0\1\302\122\0\1\303"+
    "\3\0\1\304\126\0\1\305\126\0\1\306\104\0\1\307"+
    "\31\0\54\105\1\0\17\105\1\0\30\105\15\0\1\310"+
    "\2\0\1\310\3\0\1\310\6\0\1\310\41\0\1\310"+
    "\2\0\1\310\25\0\1\310\10\0\1\311\2\0\1\312"+
    "\5\0\1\313\1\0\1\314\21\0\1\311\105\0\1\315"+
    "\3\0\1\316\71\0\1\317\41\0\1\320\7\0\1\321"+
    "\57\0\1\322\45\0\1\323\103\0\1\324\101\0\1\325"+
    "\151\0\1\326\4\0\1\327\107\0\1\330\30\0\1\331"+
    "\74\0\1\332\2\0\1\333\23\0\1\334\101\0\1\335"+
    "\15\0\1\336\41\0\1\337\24\0\1\340\26\0\1\341"+
    "\101\0\1\342\23\0\1\343\21\0\1\344\61\0\1\345"+
    "\7\0\1\346\1\347\4\0\1\350\105\0\1\351\216\0"+
    "\1\352\1\353\63\0\1\354\15\0\1\355\30\0\1\356"+
    "\26\0\1\357\5\0\1\360\37\0\1\361\66\0\1\311"+
    "\26\0\1\362\5\0\1\311\61\0\12\14\1\363\5\14"+
    "\1\364\32\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\24\14\1\365\3\14\1\366\22\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\1\14\1\367\1\14\2\0\36\14"+
    "\1\370\7\14\1\371\4\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\1\372\45\14\1\373\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\24\14\1\374"+
    "\26\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\1\375\52\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\24\14\1\376\4\14\1\377\21\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\13\14\1\u0100\30\14"+
    "\1\u0101\6\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\13\14\1\u0102\2\14\1\u0103\23\14\1\u0104\10\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\34\14"+
    "\1\u0105\16\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\1\u0106\1\14\21\0"+
    "\3\14\2\0\24\14\1\u0107\26\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\u0108\23\14\1\u0109\21\14"+
    "\1\u010a\4\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\2\14\1\u010b\7\14\1\u010c\1\u010d\4\14\1\u010e"+
    "\32\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\1\u010f\52\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\52\256\4\0\1\256\2\0\1\256\2\0\1\256"+
    "\1\0\2\257\1\260\3\0\1\256\1\0\2\256\21\0"+
    "\3\256\2\0\30\14\1\u0110\15\14\1\u0111\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\1\14\1\u0112\21\0\3\14\2\0\1\u0113"+
    "\5\14\1\u0114\37\14\1\u0115\4\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\2\14\1\u0116\50\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\7\14\1\u0116"+
    "\43\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\20\14\1\u0116\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\13\14\1\u0116\37\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\14\1\u0116\1\u0117\50\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\12\14"+
    "\1\u0116\40\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\36\14\1\u0116\14\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\2\14\1\u0116\4\14\1\u0116\34\14"+
    "\1\u0116\6\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\1\14\2\u0116\25\14\1\u0116\11\14\1\u0116\10\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\7\14"+
    "\1\u0116\34\14\1\u0116\6\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\16\14\1\u0118\34\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\5\14\1\u0116\45\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\11\14"+
    "\1\u0116\41\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\21\14\1\u0116\31\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\15\14\1\u0116\35\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\4\14\1\u0116\1\u0117"+
    "\45\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\14\14\1\u0116\36\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\37\14\1\u0116\13\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\5\14\1\u0116\3\14\1\u0116"+
    "\33\14\1\u0116\5\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\4\14\2\u0116\24\14\1\u0116\10\14\1\u0116"+
    "\7\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\11\14\1\u0116\33\14\1\u0116\5\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\u0116\52\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\3\14\1\u0116\47\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\7\14"+
    "\1\u0116\10\14\1\u0116\32\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\1\u0116\6\14\1\u0116\34\14\1\u0116"+
    "\6\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\20\14\1\u0116\7\14\1\u0116\22\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\12\14\2\u0116\37\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\11\14\1\u0116"+
    "\7\14\1\u0116\31\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\3\14\1\u0116\5\14\1\u0116\33\14\1\u0116"+
    "\5\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\21\14\1\u0116\10\14\1\u0116\20\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\14\14\2\u0116\35\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\12\14\1\u0119"+
    "\40\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\2\14\1\u0116\4\14\1\u0116\43\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\46\14\1\u0116\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\24\14\1\u0116"+
    "\26\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\2\14\1\u0117\50\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\1\14\2\u0116\25\14\1\u0116\22\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\5\14\1\u0116"+
    "\3\14\1\u0116\41\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\47\14\1\u0116\3\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\26\14\1\u0116\24\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\5\14\1\u0117"+
    "\45\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\4\14\2\u0116\24\14\1\u0116\20\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\2\14\1\u0116\15\14\1\u0116"+
    "\32\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\1\u0116\37\14\1\u0116\12\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\25\14\1\u0116\25\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\31\14\1\u0116\21\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\30\14"+
    "\1\u0116\22\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\20\14\1\u011a\32\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\5\14\1\u0116\13\14\1\u0116\31\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\3\14"+
    "\1\u0116\35\14\1\u0116\11\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\27\14\1\u0116\23\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\33\14\1\u0116\17\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\32\14"+
    "\1\u0116\20\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\7\14\1\u0116\10\14\1\u0116\23\14\1\u0116\6\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\1\u0116"+
    "\17\14\1\u0116\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\53\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\1\14\1\u011b"+
    "\21\0\3\14\2\0\11\14\1\u0116\7\14\1\u0116\23\14"+
    "\1\u0116\5\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\3\14\1\u0116\15\14\1\u0116\31\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\1\u0116\35\14\1\u0116"+
    "\14\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\3\14\1\u0116\33\14\1\u0116\13\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\13\14\1\u011c\37\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\54\0\1\46\2\0"+
    "\1\46\1\252\4\0\1\46\114\0\1\u011d\2\0\1\u011d"+
    "\5\0\1\u011d\42\0\6\254\14\0\3\254\1\0\1\254"+
    "\23\0\1\254\2\0\1\254\1\u011e\2\0\1\254\1\0"+
    "\1\254\12\0\1\254\105\0\1\u011f\4\0\1\255\42\0"+
    "\53\256\2\0\2\256\2\0\1\256\1\0\2\256\1\0"+
    "\2\257\1\260\3\0\1\256\1\0\2\256\21\0\3\256"+
    "\70\0\2\257\35\0\54\266\1\0\51\266\73\267\1\u0120"+
    "\32\267\25\0\1\u0121\113\0\1\u0122\3\0\1\u0123\143\0"+
    "\1\u0124\41\0\1\u0125\45\0\1\u0126\107\0\12\14\1\u0127"+
    "\40\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\32\0"+
    "\1\u0128\115\0\1\u0129\125\0\1\362\203\0\1\u012a\47\0"+
    "\1\u012b\153\0\1\u012c\156\0\1\u012d\44\0\1\u012e\131\0"+
    "\1\u012f\111\0\1\u0130\131\0\1\311\16\0\1\u0131\130\0"+
    "\1\u0132\212\0\1\u0133\17\0\1\u0134\136\0\1\u0135\132\0"+
    "\1\u0136\107\0\1\u0137\114\0\1\u0138\74\0\1\u0139\26\0"+
    "\1\u013a\126\0\1\311\160\0\1\311\1\0\1\u013b\76\0"+
    "\1\311\26\0\1\u013c\5\0\1\311\70\0\1\u013d\120\0"+
    "\1\u013e\157\0\1\u013f\72\0\1\u0140\223\0\1\u0141\56\0"+
    "\1\u0142\121\0\1\u0143\114\0\1\u0144\111\0\54\352\1\0"+
    "\51\352\73\353\1\u0145\32\353\13\0\1\u0146\126\0\1\u0147"+
    "\130\0\1\u0148\140\0\1\u0149\124\0\1\u014a\110\0\1\u014b"+
    "\121\0\1\311\34\0\1\311\61\0\30\14\1\u014c\22\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\20\14"+
    "\1\u014d\32\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\53\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\1\u014e\1\14\21\0"+
    "\3\14\2\0\20\14\1\u014f\32\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\46\14\1\u0150\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\53\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\1\14\1\u0151\21\0\3\14\2\0\16\14"+
    "\1\u0152\34\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\22\14\1\u0153\30\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\6\14\1\u0154\44\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\31\14\1\u0155\21\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\34\14"+
    "\1\u0156\16\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\53\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\1\u0157"+
    "\2\14\2\0\13\14\1\u0158\37\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\24\14\1\u0159\26\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\31\14\1\u015a"+
    "\21\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\13\14\1\u015b\37\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\2\14\1\u015c\50\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\1\14\1\u015d\21\0\3\14\2\0\1\u015e\52\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\36\14\1\u015f"+
    "\14\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\7\14\1\u0160\43\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\2\14\1\u0161\50\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\34\14\1\u0162\16\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\1\14\1\u0163"+
    "\51\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\53\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\1\14\1\u0164\21\0\3\14"+
    "\2\0\30\14\1\u0165\22\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\24\14\1\u0166\26\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\13\14\1\u0167\37\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\12\14"+
    "\1\u0168\40\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\13\14\1\u0169\37\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\16\14\1\u016a\34\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\31\14\1\u016b\21\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\30\14"+
    "\1\u016c\22\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\13\14\1\u016d\37\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\52\14\1\u0116\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\20\14\1\u016e\32\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\12\14\1\u016f"+
    "\40\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\30\14\1\u0170\22\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\24\14\1\u0171\26\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\54\0\1\u011d\2\0\1\u011d\1\u0172"+
    "\4\0\1\u011d\41\0\72\267\1\u0173\1\u0120\32\267\77\0"+
    "\1\u0174\47\0\1\u0175\7\0\1\u0176\76\0\1\u0177\162\0"+
    "\1\u0178\70\0\1\u0179\124\0\20\14\1\u011b\32\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\123\0\1\u017a\30\0"+
    "\1\u017b\131\0\1\u017c\135\0\1\u017d\105\0\1\u017e\131\0"+
    "\1\u017f\131\0\1\u0180\174\0\1\u0181\52\0\1\u0182\135\0"+
    "\1\u0183\170\0\1\u0184\26\0\1\u0185\151\0\1\u0186\147\0"+
    "\1\u0187\125\0\1\u0188\113\0\1\u0189\103\0\1\u018a\161\0"+
    "\1\u018b\110\0\1\u0186\107\0\1\u018c\134\0\1\u018d\133\0"+
    "\1\u018e\216\0\1\u018f\22\0\1\u0190\206\0\1\u0191\25\0"+
    "\72\353\1\u0192\1\u0145\32\353\13\0\1\u0193\11\0\1\u0194"+
    "\103\0\1\u0195\125\0\1\u0196\135\0\1\u0197\114\0\1\u0186"+
    "\124\0\53\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\1\u0198"+
    "\2\14\2\0\24\14\1\u0199\26\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\30\14\1\u019a\22\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\40\14\1\u019b"+
    "\12\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\20\14\1\u019c\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\24\14\1\u019d\26\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\30\14\1\u019e\22\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\53\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\1\14\1\u019f\21\0\3\14\2\0\24\14"+
    "\1\u01a0\26\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\34\14\1\u01a1\16\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\53\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\1\14"+
    "\1\u01a2\21\0\3\14\2\0\1\u01a3\52\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\24\14\1\u01a4\26\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\46\14"+
    "\1\u01a5\4\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\46\14\1\u01a6\4\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\34\14\1\u01a7\16\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\12\14\1\u01a8\40\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\46\14"+
    "\1\u01a9\4\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\31\14\1\u01a4\21\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\13\14\1\u01aa\37\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\22\14\1\u01ab\30\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\30\14"+
    "\1\u01ac\22\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\53\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\1\u01ad"+
    "\2\14\2\0\16\14\1\u01ae\34\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\53\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\1\14\1\u01af\21\0\3\14\2\0\12\14\1\u01b0\11\14"+
    "\1\u01b1\26\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\2\14\1\u01b2\50\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\2\14\1\u01b3\50\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\12\14\1\u01b4\40\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\1\14"+
    "\1\u01a4\51\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\31\14\1\u011c\21\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\2\14\1\u01b5\50\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\32\0\1\u01b6\121\0\1\u0125"+
    "\177\0\1\u0125\57\0\1\u0176\143\0\1\u01b7\103\0\1\u0176"+
    "\117\0\1\u01b8\122\0\1\u01b9\130\0\1\u01ba\140\0\1\u0144"+
    "\106\0\1\u0144\211\0\1\u01bb\42\0\1\u01bc\132\0\1\u01bd"+
    "\131\0\1\u01be\103\0\1\u01bf\163\0\1\u01c0\100\0\1\u01c1"+
    "\113\0\1\u01c2\137\0\1\u01c3\160\0\1\u01c4\71\0\1\u01c5"+
    "\211\0\1\u01c6\57\0\1\u01c7\126\0\1\u01c8\75\0\1\u01c9"+
    "\246\0\1\u01ca\21\0\1\u01cb\15\0\1\u01cc\122\0\1\u01cd"+
    "\102\0\1\u01ce\143\0\1\u01cf\101\0\16\14\1\u01d0\34\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\13\14"+
    "\1\u01d1\37\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\16\14\1\u01d2\34\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\31\14\1\u0167\21\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\12\14\1\u0167\40\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\53\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\1\u01d3\1\14\21\0\3\14\2\0"+
    "\13\14\1\u01d4\37\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\20\14\1\u01d5\32\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\24\14\1\u01d6\26\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\2\14\1\u01d7"+
    "\50\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\40\14\1\u01d8\12\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\13\14\1\u01d9\37\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\14\1\u01da\51\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\13\14\1\u01db"+
    "\37\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\46\14\1\u01dc\4\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\12\14\1\u01dd\40\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\53\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\1\u01de\1\14\21\0\3\14\2\0\30\14\1\u01df\22\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\31\14"+
    "\1\u01e0\21\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\1\14\1\u01e1\51\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\53\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\1\14\1\u01e2\1\14\2\0\16\14\1\u01e3\15\14"+
    "\1\u01e4\16\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\31\14\1\u01e5\21\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\6\14\1\u01e6\44\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\24\14\1\u01e7\26\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\53\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\u01e8\1\0\2\14\21\0\3\14\20\0\1\u0175"+
    "\122\0\1\u01e9\143\0\1\u01ea\120\0\1\u01eb\131\0\1\u01ec"+
    "\113\0\1\u01ed\145\0\1\u01ee\105\0\1\u01ef\140\0\1\u01f0"+
    "\124\0\1\u01f1\125\0\1\u01f2\126\0\1\u01f3\142\0\1\u01f4"+
    "\123\0\1\u01f5\77\0\1\u01f6\125\0\1\u01f7\155\0\1\u01f8"+
    "\57\0\1\u01f9\173\0\1\u01fa\107\0\1\u01fb\75\0\31\14"+
    "\1\u01fc\21\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\24\14\1\u01fd\26\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\30\14\1\u01fe\22\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\16\14\1\u01ff\34\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\36\14"+
    "\1\u0200\14\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\16\14\1\u0201\34\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\31\14\1\u0202\21\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\30\14\1\u0203\22\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\30\14"+
    "\1\u0204\22\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\31\14\1\u0205\21\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\46\14\1\u0206\4\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\44\14\1\u0207\6\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\16\14"+
    "\1\u0208\34\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\16\14\1\u0209\34\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\46\14\1\u020a\4\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\1\u020b\52\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\46\14\1\u020c"+
    "\4\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\30\14\1\u020d\22\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\36\14\1\u020e\14\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\33\0\1\u020f\120\0\1\u0210\113\0"+
    "\1\u0211\113\0\1\u0212\156\0\1\u0213\172\0\1\u0214\45\0"+
    "\1\u0215\155\0\1\u0216\61\0\1\u0217\171\0\1\u0218\61\0"+
    "\1\u0219\33\0\1\u021a\123\0\1\u021b\72\0\1\u021c\172\0"+
    "\1\u021d\57\0\24\14\1\u021e\26\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\12\14\1\u021f\40\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\1\u0220\52\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\31\14"+
    "\1\u0221\21\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\53\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\1\u0222\1\14\21\0"+
    "\3\14\2\0\16\14\1\u0223\34\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\46\14\1\u0224\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\2\14\1\u0225"+
    "\50\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\46\14\1\u0226\4\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\2\14\1\u0227\33\14\1\u0228\14\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\34\14\1\u0229"+
    "\16\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\1\14\1\u022a\51\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\46\14\1\u022b\4\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\20\14\1\u022c\32\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\32\0\1\u0176\15\0"+
    "\1\u022d\72\0\1\u022e\124\0\1\u0186\115\0\1\u022f\124\0"+
    "\1\u0230\44\0\1\u0231\200\0\1\u0232\22\0\1\u0233\147\0"+
    "\1\u01f6\207\0\1\u01f6\51\0\1\u0234\61\0\1\u01f0\147\0"+
    "\1\u0235\131\0\1\u0236\113\0\1\u0237\107\0\13\14\1\u0238"+
    "\37\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\12\14\1\u01a4\40\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\2\14\1\u0239\50\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\2\0\1\14\1\u023a\44\14\1\u023b"+
    "\4\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\53\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\1\u023c\2\14"+
    "\2\0\16\14\1\u023d\34\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\40\14\1\u0208\12\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\53\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\1\14\1\u0208\1\14\2\0\46\14"+
    "\1\u023e\4\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\2\14\1\u0202\50\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\24\14\1\u023f\26\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\30\14\1\u0240\22\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\16\14"+
    "\1\u0241\34\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\31\14\1\u0242\21\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\20\0\1\u0243\122\0\1\u0244\136\0\1\u0245"+
    "\125\0\1\u0246\200\0\1\u0247\30\0\1\u0248\157\0\1\u0249"+
    "\111\0\1\u024a\203\0\1\u024b\27\0\13\14\1\u024c\37\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\24\14"+
    "\1\u024d\26\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\24\14\1\u024e\26\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\53\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\1\14"+
    "\1\u024f\21\0\3\14\2\0\2\14\1\u0250\50\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\34\14\1\u0251"+
    "\16\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\20\14\1\u0252\32\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\2\0\53\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\1\u0253\1\14"+
    "\21\0\3\14\2\0\1\u0254\52\14\2\0\2\14\2\0"+
    "\1\14\1\0\2\14\3\0\1\162\3\0\1\14\1\0"+
    "\2\14\21\0\3\14\4\0\1\u0255\171\0\1\u0256\155\0"+
    "\1\u0257\60\0\1\u0258\120\0\1\u0259\135\0\1\u025a\127\0"+
    "\1\u025b\133\0\1\u025c\61\0\46\14\1\u025d\4\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\53\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\1\u025e\1\14\21\0\3\14\2\0\31\14"+
    "\1\u025f\21\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\24\14\1\u0260\26\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\2\0\34\14\1\u0261\16\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\36\14\1\u0262\14\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\44\14"+
    "\1\u0263\6\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\13\14\1\u0264\37\14\2\0\2\14\2\0\1\14"+
    "\1\0\2\14\3\0\1\162\3\0\1\14\1\0\2\14"+
    "\21\0\3\14\26\0\1\u0265\114\0\1\u0214\112\0\1\u0266"+
    "\125\0\1\u0267\125\0\13\14\1\u0222\37\14\2\0\2\14"+
    "\2\0\1\14\1\0\2\14\3\0\1\162\3\0\1\14"+
    "\1\0\2\14\21\0\3\14\2\0\1\u0268\52\14\2\0"+
    "\2\14\2\0\1\14\1\0\2\14\3\0\1\162\3\0"+
    "\1\14\1\0\2\14\21\0\3\14\2\0\1\u0269\52\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\31\14"+
    "\1\u026a\21\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\20\0\1\u026b\111\0\1\u026c\123\0\16\14\1\u026d\34\14"+
    "\2\0\2\14\2\0\1\14\1\0\2\14\3\0\1\162"+
    "\3\0\1\14\1\0\2\14\21\0\3\14\2\0\2\14"+
    "\1\u026e\50\14\2\0\2\14\2\0\1\14\1\0\2\14"+
    "\3\0\1\162\3\0\1\14\1\0\2\14\21\0\3\14"+
    "\2\0\52\14\1\u026f\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\3\0\1\u01f0\150\0\1\u01f6\101\0\1\14\1\u0202"+
    "\51\14\2\0\2\14\2\0\1\14\1\0\2\14\3\0"+
    "\1\162\3\0\1\14\1\0\2\14\21\0\3\14\2\0"+
    "\24\14\1\u0208\26\14\2\0\2\14\2\0\1\14\1\0"+
    "\2\14\3\0\1\162\3\0\1\14\1\0\2\14\21\0"+
    "\3\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\42\1\1\11\5\1\1\11\1\1\1\11"+
    "\3\1\6\11\1\1\2\11\4\1\3\11\2\1\1\11"+
    "\1\0\1\11\40\1\1\0\10\1\1\11\67\1\2\0"+
    "\2\1\1\0\1\1\6\11\2\1\1\11\1\0\1\11"+
    "\4\0\1\1\12\11\5\0\1\1\11\0\1\1\4\0"+
    "\1\1\1\11\1\0\1\1\3\0\1\11\4\0\2\1"+
    "\5\0\55\1\7\0\1\11\1\0\1\1\5\0\1\11"+
    "\26\0\1\11\2\0\1\11\4\0\46\1\1\0\1\11"+
    "\11\0\1\11\10\0\1\11\2\0\2\11\7\0\1\11"+
    "\2\1\3\0\36\1\2\0\1\11\7\0\1\11\1\1"+
    "\2\0\1\11\3\0\1\1\5\0\2\11\31\1\1\0"+
    "\1\1\1\11\1\0\1\11\2\0\1\11\2\0\1\1"+
    "\1\0\2\11\5\0\24\1\3\0\1\1\1\11\11\0"+
    "\17\1\5\0\1\11\4\0\1\11\13\1\2\0\1\11"+
    "\6\0\11\1\2\0\3\11\2\0\1\11\10\1\1\11"+
    "\2\0\3\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[623];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private void pm() {
      if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
          yybegin(YYINITIAL);
      }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 125: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 126: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 127: break;
          case 4: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 5: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 129: break;
          case 6: 
            { pm(); return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 130: break;
          case 7: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 131: break;
          case 8: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 132: break;
          case 9: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 133: break;
          case 10: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 134: break;
          case 11: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 135: break;
          case 12: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 136: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 137: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 138: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 139: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 140: break;
          case 17: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 141: break;
          case 18: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 142: break;
          case 19: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 143: break;
          case 20: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 144: break;
          case 21: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 145: break;
          case 22: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 146: break;
          case 23: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 147: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 148: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 149: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 150: break;
          case 27: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 151: break;
          case 28: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 152: break;
          case 29: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 153: break;
          case 30: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 154: break;
          case 31: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 155: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 156: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 157: break;
          case 34: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 158: break;
          case 35: 
            { pm(); return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 159: break;
          case 36: 
            { pm(); return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 160: break;
          case 37: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 161: break;
          case 38: 
            { pm(); return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 162: break;
          case 39: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 163: break;
          case 40: 
            { pm(); return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 164: break;
          case 41: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 165: break;
          case 42: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 166: break;
          case 43: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 167: break;
          case 44: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 168: break;
          case 45: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 169: break;
          case 46: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 170: break;
          case 47: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 171: break;
          case 48: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 172: break;
          case 49: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 173: break;
          case 50: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 174: break;
          case 51: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 175: break;
          case 52: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 176: break;
          case 53: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 177: break;
          case 54: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 178: break;
          case 55: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 179: break;
          case 56: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 180: break;
          case 57: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 181: break;
          case 58: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 182: break;
          case 59: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 183: break;
          case 60: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 184: break;
          case 61: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 185: break;
          case 62: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 186: break;
          case 63: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 187: break;
          case 64: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 188: break;
          case 65: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 189: break;
          case 66: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 190: break;
          case 67: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 191: break;
          case 68: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 192: break;
          case 69: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 193: break;
          case 70: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 194: break;
          case 71: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 195: break;
          case 72: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 196: break;
          case 73: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 197: break;
          case 74: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 198: break;
          case 75: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 199: break;
          case 76: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 200: break;
          case 77: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 201: break;
          case 78: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 202: break;
          case 79: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 203: break;
          case 80: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 204: break;
          case 81: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 205: break;
          case 82: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 206: break;
          case 83: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 207: break;
          case 84: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 208: break;
          case 85: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 209: break;
          case 86: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 210: break;
          case 87: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 211: break;
          case 88: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 212: break;
          case 89: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 213: break;
          case 90: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 214: break;
          case 91: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 215: break;
          case 92: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 216: break;
          case 93: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 217: break;
          case 94: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 218: break;
          case 95: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 219: break;
          case 96: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 220: break;
          case 97: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 221: break;
          case 98: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 222: break;
          case 99: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 223: break;
          case 100: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 224: break;
          case 101: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 225: break;
          case 102: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 226: break;
          case 103: 
            { pm(); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 227: break;
          case 104: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 228: break;
          case 105: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 229: break;
          case 106: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 230: break;
          case 107: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 231: break;
          case 108: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 232: break;
          case 109: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 233: break;
          case 110: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 234: break;
          case 111: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 235: break;
          case 112: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 236: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 237: break;
          case 114: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 238: break;
          case 115: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 239: break;
          case 116: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 240: break;
          case 117: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 241: break;
          case 118: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 242: break;
          case 119: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 243: break;
          case 120: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 244: break;
          case 121: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 245: break;
          case 122: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 246: break;
          case 123: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 247: break;
          case 124: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
