/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;
  public static final int SYMBOL_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\55\1\54\1\0\1\55\1\54\22\0\1\55\1\66\1\74\1\76\1\61\1\63\1\114\1\0"+
    "\1\101\1\102\1\73\1\67\1\110\1\70\1\60\1\72\2\64\1\53\7\56\1\71\1\111\1\112"+
    "\1\107\1\113\1\120\1\121\1\4\1\24\1\6\1\5\1\27\1\62\1\65\1\11\1\33\1\52\1"+
    "\42\1\15\1\36\1\20\1\50\1\40\1\30\1\16\1\22\1\34\1\75\1\44\1\65\1\12\1\46"+
    "\1\65\1\105\1\125\1\106\1\116\1\57\1\0\1\1\1\23\1\3\1\2\1\25\1\77\1\122\1"+
    "\7\1\31\1\51\1\41\1\13\1\35\1\17\1\47\1\37\1\26\1\14\1\21\1\32\1\100\1\43"+
    "\1\123\1\10\1\45\1\124\1\103\1\115\1\104\1\117\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\40\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\2"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\1\1\35\1\36\1\0\1\37\1\40\3\37\1\41"+
    "\4\37\1\41\6\37\1\42\1\37\1\40\16\2\1\0"+
    "\2\2\1\43\6\2\1\44\67\2\2\0\2\3\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\57\4\0\1\2\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\41"+
    "\5\0\1\71\11\0\1\71\4\0\1\41\1\72\1\0"+
    "\1\71\3\0\1\73\4\0\1\74\1\75\5\0\1\71"+
    "\1\40\4\2\1\76\11\2\1\76\4\2\1\77\1\76"+
    "\3\2\1\100\11\2\1\76\2\101\4\2\1\102\1\3"+
    "\7\0\1\103\1\0\1\2\5\0\1\104\26\0\1\105"+
    "\2\0\1\106\4\0\5\2\1\107\25\2\1\105\1\2"+
    "\1\110\5\2\1\111\1\2\1\112\1\0\1\55\11\0"+
    "\1\113\10\0\1\71\2\0\1\114\1\115\7\0\1\75"+
    "\1\71\1\116\3\0\3\2\1\117\10\2\1\76\2\2"+
    "\1\120\1\121\7\2\1\76\1\122\4\2\2\0\1\123"+
    "\2\0\1\124\5\0\1\125\1\126\2\0\1\127\3\0"+
    "\1\126\5\0\1\130\1\131\1\132\2\2\1\133\5\2"+
    "\1\134\1\135\2\2\1\136\3\2\1\135\5\2\1\137"+
    "\1\140\1\2\1\0\1\141\1\142\1\0\1\143\2\0"+
    "\1\144\2\0\1\145\1\0\1\146\1\126\5\0\1\147"+
    "\1\150\1\2\1\151\2\2\1\152\2\2\1\153\1\2"+
    "\1\154\1\135\6\2\1\155\3\0\1\156\1\157\11\0"+
    "\3\2\1\160\1\161\12\2\5\0\1\162\4\0\1\163"+
    "\4\2\1\164\4\2\1\165\1\2\2\0\1\166\6\0"+
    "\1\2\1\167\7\2\2\0\1\170\1\116\1\171\2\0"+
    "\1\172\1\2\1\173\1\122\1\174\2\2\1\175\1\2"+
    "\1\176\2\0\3\2\2\0\2\2\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba"+
    "\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a"+
    "\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a"+
    "\0\u01ae\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u01ae\0\u0f1e"+
    "\0\u01ae\0\u0f74\0\u0fca\0\u1020\0\u01ae\0\u01ae\0\u01ae\0\u01ae"+
    "\0\u01ae\0\u01ae\0\u1076\0\u01ae\0\u01ae\0\u10cc\0\u1122\0\u1178"+
    "\0\u11ce\0\u01ae\0\u01ae\0\u01ae\0\u1224\0\u127a\0\u01ae\0\u12d0"+
    "\0\u01ae\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a"+
    "\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da"+
    "\0\u1830\0\u01ae\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34"+
    "\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4"+
    "\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94"+
    "\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u01ae\0\u2142\0\u2198\0\u21ee"+
    "\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e"+
    "\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e"+
    "\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae"+
    "\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e"+
    "\0\u2fb4\0\u300a\0\u3060\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e"+
    "\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be"+
    "\0\u3514\0\u356a\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae"+
    "\0\u35c0\0\u3616\0\u01ae\0\u0f74\0\u01ae\0\u366c\0\u36c2\0\u3718"+
    "\0\u376e\0\u37c4\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae"+
    "\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u381a\0\u3870\0\u38c6\0\u391c"+
    "\0\u3972\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc"+
    "\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c"+
    "\0\u3ed2\0\u01ae\0\u3f28\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u01ae"+
    "\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da\0\u4330"+
    "\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0"+
    "\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890"+
    "\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u4aea\0\u4b40"+
    "\0\u0408\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u0408\0\u4cee\0\u4d44"+
    "\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4"+
    "\0\u0408\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u0408\0\u51f8"+
    "\0\u3468\0\u34be\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u01ae"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u4488\0\u01ae"+
    "\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a"+
    "\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u44de\0\u5ab4"+
    "\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8\0\u01ae\0\u5d0e"+
    "\0\u5d64\0\u01ae\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68"+
    "\0\u5fbe\0\u6014\0\u4ff4\0\u0408\0\u606a\0\u60c0\0\u6116\0\u616c"+
    "\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c"+
    "\0\u6472\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc"+
    "\0\u6722\0\u0408\0\u6778\0\u0408\0\u67ce\0\u6824\0\u687a\0\u68d0"+
    "\0\u6926\0\u0408\0\u697c\0\u0408\0\u51f8\0\u01ae\0\u69d2\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u01ae"+
    "\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u6f32"+
    "\0\u01ae\0\u6f88\0\u6fde\0\u01ae\0\u01ae\0\u7034\0\u708a\0\u70e0"+
    "\0\u7136\0\u718c\0\u71e2\0\u7238\0\u01ae\0\u728e\0\u72e4\0\u733a"+
    "\0\u7390\0\u73e6\0\u743c\0\u7492\0\u74e8\0\u0408\0\u753e\0\u7594"+
    "\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742\0\u7798\0\u0408\0\u77ee"+
    "\0\u7844\0\u0408\0\u0408\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2"+
    "\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2"+
    "\0\u7cf8\0\u7d4e\0\u01ae\0\u7da4\0\u7dfa\0\u01ae\0\u7e50\0\u7ea6"+
    "\0\u7efc\0\u7f52\0\u7fa8\0\u01ae\0\u7ffe\0\u8054\0\u80aa\0\u01ae"+
    "\0\u8100\0\u8156\0\u81ac\0\u8202\0\u8258\0\u39c8\0\u82ae\0\u8304"+
    "\0\u835a\0\u01ae\0\u01ae\0\u0408\0\u83b0\0\u8406\0\u0408\0\u845c"+
    "\0\u84b2\0\u8508\0\u855e\0\u85b4\0\u0408\0\u860a\0\u8660\0\u86b6"+
    "\0\u0408\0\u870c\0\u8762\0\u87b8\0\u880e\0\u8864\0\u468c\0\u88ba"+
    "\0\u8910\0\u8966\0\u0408\0\u0408\0\u89bc\0\u8a12\0\u8a68\0\u01ae"+
    "\0\u8abe\0\u01ae\0\u8b14\0\u8b6a\0\u01ae\0\u8bc0\0\u8c16\0\u8c6c"+
    "\0\u8cc2\0\u01ae\0\u01ae\0\u8d18\0\u8d6e\0\u8dc4\0\u8e1a\0\u8e70"+
    "\0\u8ec6\0\u0408\0\u8f1c\0\u0408\0\u8f72\0\u8fc8\0\u0408\0\u901e"+
    "\0\u9074\0\u90ca\0\u9120\0\u0408\0\u0408\0\u9176\0\u91cc\0\u9222"+
    "\0\u9278\0\u92ce\0\u9324\0\u937a\0\u93d0\0\u9426\0\u947c\0\u94d2"+
    "\0\u01ae\0\u9528\0\u957e\0\u95d4\0\u962a\0\u9680\0\u96d6\0\u972c"+
    "\0\u9782\0\u97d8\0\u982e\0\u9884\0\u98da\0\u9930\0\u0408\0\u9986"+
    "\0\u99dc\0\u9a32\0\u9a88\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36"+
    "\0\u9c8c\0\u9ce2\0\u9d38\0\u9d8e\0\u9de4\0\u9e3a\0\u01ae\0\u9e90"+
    "\0\u9ee6\0\u9f3c\0\u9f92\0\u01ae\0\u9fe8\0\ua03e\0\ua094\0\ua0ea"+
    "\0\u0408\0\ua140\0\ua196\0\ua1ec\0\ua242\0\u0408\0\ua298\0\ua2ee"+
    "\0\ua344\0\u01ae\0\ua39a\0\ua3f0\0\ua446\0\ua49c\0\ua4f2\0\ua548"+
    "\0\ua59e\0\u0408\0\ua5f4\0\ua64a\0\ua6a0\0\ua6f6\0\ua74c\0\ua7a2"+
    "\0\ua7f8\0\ua84e\0\ua8a4\0\u01ae\0\u01ae\0\u01ae\0\ua8fa\0\ua950"+
    "\0\u01ae\0\ua9a6\0\u0408\0\u0408\0\u0408\0\ua9fc\0\uaa52\0\u0408"+
    "\0\uaaa8\0\u01ae\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac"+
    "\0\uad02\0\uad58\0\uadae\0\u0408";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\15\1\33"+
    "\1\15\1\34\1\35\1\36\1\37\2\15\1\40\1\41"+
    "\2\15\1\42\3\15\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\47\1\15\1\51\1\52\1\15\1\53\1\47"+
    "\1\15\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\15\1\63\1\64\1\15\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\3\15\1\6\54\106"+
    "\1\0\17\106\1\107\30\106\1\110\1\111\1\112\1\113"+
    "\1\114\7\111\1\115\1\116\2\111\1\117\1\111\1\120"+
    "\1\111\1\121\1\111\1\122\3\111\1\123\1\124\2\111"+
    "\1\125\1\111\1\126\3\111\1\127\26\111\1\130\4\111"+
    "\1\131\11\111\1\132\11\111\1\133\1\134\1\111\1\0"+
    "\1\135\1\136\1\137\7\15\1\140\1\141\2\15\1\142"+
    "\1\15\1\143\1\15\1\144\1\15\1\145\3\15\1\146"+
    "\1\147\2\15\1\150\1\15\1\151\3\15\1\152\7\15"+
    "\4\0\1\15\2\0\1\15\2\0\1\15\1\153\6\0"+
    "\1\15\1\0\1\154\1\15\21\0\1\15\1\155\1\15"+
    "\2\0\52\156\1\0\2\50\1\0\1\156\2\0\1\156"+
    "\2\0\1\156\7\0\1\156\1\0\2\156\21\0\3\156"+
    "\130\0\1\15\1\157\4\15\1\160\1\161\2\15\2\162"+
    "\2\15\1\163\1\15\1\164\32\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\2\15\1\166\21\15\1\167"+
    "\26\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\12\15\1\170\21\15\1\166\1\15\1\171\7\15\1\172"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\4\15\1\173\3\15\1\174\1\175\2\15\2\176\1\15"+
    "\1\177\1\15\1\200\31\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\5\15\1\201\20\15\1\202\24\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\14\15"+
    "\1\203\20\15\1\201\1\15\1\204\13\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\53\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\205\52\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\3\15\1\206"+
    "\47\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\1\207\1\210\16\15\1\162\32\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\12\15\2\205\15\15\1\211"+
    "\14\15\1\212\4\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\3\15\1\213\1\214\14\15\1\176\31\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\14\15"+
    "\2\206\15\15\1\215\13\15\1\216\3\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\46\15\1\166\4\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\1\15\1\217\21\0\3\15\2\0"+
    "\47\15\1\201\3\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\1\220\5\15\1\171\3\15\1\221\1\222"+
    "\6\15\1\223\1\15\1\224\3\15\1\162\1\210\21\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\3\15"+
    "\1\225\4\15\1\204\3\15\1\226\1\227\5\15\1\230"+
    "\2\15\1\231\3\15\1\176\1\214\17\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\2\15\1\232\10\15"+
    "\1\233\2\15\1\222\5\15\1\234\3\15\1\235\3\15"+
    "\1\236\1\15\1\164\3\15\1\232\10\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\237\4\15\1\240"+
    "\7\15\1\241\1\15\1\227\6\15\1\242\3\15\1\243"+
    "\2\15\1\244\1\15\1\200\3\15\1\240\7\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\46\15\1\162"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\47\15\1\176\3\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\16\15\1\167\1\15\1\157\32\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\1\245\6\15"+
    "\1\246\3\15\1\247\4\15\1\160\23\15\1\205\6\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\17\15"+
    "\1\202\1\15\1\173\31\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\3\15\1\250\5\15\1\251\7\15"+
    "\1\174\23\15\1\206\5\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\6\15\1\252\3\15\1\252\40\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\10\15"+
    "\1\253\3\15\1\253\36\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\1\254\52\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\13\15\1\205\37\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\15\15\1\206"+
    "\35\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\20\15\1\162\13\15\1\166\16\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\21\15\1\176\13\15\1\201"+
    "\15\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\54\0"+
    "\1\47\2\0\1\47\1\255\1\256\3\0\1\47\115\0"+
    "\2\50\51\0\6\257\14\0\3\257\1\0\1\257\23\0"+
    "\1\257\2\0\1\257\3\0\1\257\1\0\1\257\12\0"+
    "\1\257\112\0\1\260\42\0\52\261\4\0\1\261\2\0"+
    "\1\261\2\0\1\261\1\0\2\262\1\263\3\0\1\261"+
    "\1\0\2\261\6\0\1\264\12\0\3\261\70\0\1\265"+
    "\17\0\1\266\106\0\1\267\16\0\1\270\110\0\1\271"+
    "\1\272\13\0\1\273\16\0\54\274\1\0\17\274\1\275"+
    "\31\274\2\0\1\276\22\0\1\277\3\0\1\300\46\0"+
    "\1\301\26\0\1\302\52\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\110\0\1\303\125\0\1\304\2\0\1\305"+
    "\122\0\1\306\3\0\1\307\126\0\1\310\126\0\1\311"+
    "\104\0\1\312\31\0\54\106\1\0\17\106\1\0\30\106"+
    "\15\0\1\313\2\0\1\313\3\0\1\313\6\0\1\313"+
    "\41\0\1\313\2\0\1\313\25\0\1\313\10\0\1\314"+
    "\2\0\1\315\5\0\1\316\1\0\1\317\21\0\1\314"+
    "\105\0\1\320\3\0\1\321\71\0\1\322\41\0\1\323"+
    "\7\0\1\324\57\0\1\325\45\0\1\326\103\0\1\327"+
    "\101\0\1\330\151\0\1\331\4\0\1\332\107\0\1\333"+
    "\30\0\1\334\74\0\1\335\2\0\1\336\23\0\1\337"+
    "\101\0\1\340\15\0\1\341\41\0\1\342\24\0\1\343"+
    "\26\0\1\344\101\0\1\345\23\0\1\346\21\0\1\347"+
    "\61\0\1\350\7\0\1\351\1\352\4\0\1\353\105\0"+
    "\1\354\216\0\1\355\1\356\63\0\1\357\15\0\1\360"+
    "\30\0\1\361\26\0\1\362\5\0\1\363\37\0\1\364"+
    "\66\0\1\314\26\0\1\365\5\0\1\314\61\0\12\15"+
    "\1\366\5\15\1\367\32\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\24\15\1\370\3\15\1\371\22\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\1\15\1\372\1\15"+
    "\2\0\36\15\1\373\7\15\1\374\4\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\375\45\15\1\376"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\24\15\1\377\26\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\1\u0100\52\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\24\15\1\u0101\4\15\1\u0102\21\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\13\15"+
    "\1\u0103\30\15\1\u0104\6\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\13\15\1\u0105\2\15\1\u0106\23\15"+
    "\1\u0107\10\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\34\15\1\u0108\16\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\1\u0109"+
    "\1\15\21\0\3\15\2\0\24\15\1\u010a\26\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\1\u010b\23\15"+
    "\1\u010c\21\15\1\u010d\4\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\2\15\1\u010e\7\15\1\u010f\1\u0110"+
    "\4\15\1\u0111\32\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\1\u0112\52\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\52\261\4\0\1\261\2\0\1\261"+
    "\2\0\1\261\1\0\2\262\1\263\3\0\1\261\1\0"+
    "\2\261\21\0\3\261\2\0\30\15\1\u0113\15\15\1\u0114"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\1\15\1\u0115\21\0\3\15"+
    "\2\0\1\u0116\5\15\1\u0117\37\15\1\u0118\4\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\53\156\2\0"+
    "\2\156\2\0\1\156\1\0\2\156\7\0\1\156\1\0"+
    "\2\156\21\0\3\156\2\0\2\15\1\u0119\50\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\7\15\1\u0119"+
    "\43\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\20\15\1\u0119\32\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\13\15\1\u0119\37\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\1\15\1\u0119\1\u011a\50\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\12\15"+
    "\1\u0119\40\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\36\15\1\u0119\14\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\2\15\1\u0119\4\15\1\u0119\34\15"+
    "\1\u0119\6\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\1\15\2\u0119\25\15\1\u0119\11\15\1\u0119\10\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\7\15"+
    "\1\u0119\34\15\1\u0119\6\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\16\15\1\u011b\34\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\5\15\1\u0119\45\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\11\15"+
    "\1\u0119\41\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\21\15\1\u0119\31\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\15\15\1\u0119\35\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\4\15\1\u0119\1\u011a"+
    "\45\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\14\15\1\u0119\36\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\37\15\1\u0119\13\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\5\15\1\u0119\3\15\1\u0119"+
    "\33\15\1\u0119\5\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\4\15\2\u0119\24\15\1\u0119\10\15\1\u0119"+
    "\7\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\11\15\1\u0119\33\15\1\u0119\5\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\1\u0119\52\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\3\15\1\u0119\47\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\7\15"+
    "\1\u0119\10\15\1\u0119\32\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\1\u0119\6\15\1\u0119\34\15\1\u0119"+
    "\6\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\20\15\1\u0119\7\15\1\u0119\22\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\12\15\2\u0119\37\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\11\15\1\u0119"+
    "\7\15\1\u0119\31\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\3\15\1\u0119\5\15\1\u0119\33\15\1\u0119"+
    "\5\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\21\15\1\u0119\10\15\1\u0119\20\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\14\15\2\u0119\35\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\12\15\1\u011c"+
    "\40\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\2\15\1\u0119\4\15\1\u0119\43\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\46\15\1\u0119\4\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\24\15\1\u0119"+
    "\26\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\2\15\1\u011a\50\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\1\15\2\u0119\25\15\1\u0119\22\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\5\15\1\u0119"+
    "\3\15\1\u0119\41\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\47\15\1\u0119\3\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\26\15\1\u0119\24\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\5\15\1\u011a"+
    "\45\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\4\15\2\u0119\24\15\1\u0119\20\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\2\15\1\u0119\15\15\1\u0119"+
    "\32\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\1\u0119\37\15\1\u0119\12\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\25\15\1\u0119\25\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\31\15\1\u0119\21\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\30\15"+
    "\1\u0119\22\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\20\15\1\u011d\32\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\5\15\1\u0119\13\15\1\u0119\31\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\3\15"+
    "\1\u0119\35\15\1\u0119\11\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\27\15\1\u0119\23\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\33\15\1\u0119\17\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\32\15"+
    "\1\u0119\20\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\7\15\1\u0119\10\15\1\u0119\23\15\1\u0119\6\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\1\u0119"+
    "\17\15\1\u0119\32\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\53\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\1\15\1\u011e"+
    "\21\0\3\15\2\0\11\15\1\u0119\7\15\1\u0119\23\15"+
    "\1\u0119\5\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\3\15\1\u0119\15\15\1\u0119\31\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\u0119\35\15\1\u0119"+
    "\14\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\3\15\1\u0119\33\15\1\u0119\13\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\13\15\1\u011f\37\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\54\0\1\47\2\0"+
    "\1\47\1\255\4\0\1\47\114\0\1\u0120\2\0\1\u0120"+
    "\5\0\1\u0120\42\0\6\257\14\0\3\257\1\0\1\257"+
    "\23\0\1\257\2\0\1\257\1\u0121\2\0\1\257\1\0"+
    "\1\257\12\0\1\257\105\0\1\u0122\4\0\1\260\42\0"+
    "\53\261\2\0\2\261\2\0\1\261\1\0\2\261\1\0"+
    "\2\262\1\263\3\0\1\261\1\0\2\261\21\0\3\261"+
    "\70\0\2\262\35\0\54\271\1\0\51\271\73\272\1\u0123"+
    "\32\272\25\0\1\u0124\113\0\1\u0125\3\0\1\u0126\143\0"+
    "\1\u0127\41\0\1\u0128\45\0\1\u0129\107\0\12\15\1\u012a"+
    "\40\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\32\0"+
    "\1\u012b\115\0\1\u012c\125\0\1\365\203\0\1\u012d\47\0"+
    "\1\u012e\153\0\1\u012f\156\0\1\u0130\44\0\1\u0131\131\0"+
    "\1\u0132\111\0\1\u0133\131\0\1\314\16\0\1\u0134\130\0"+
    "\1\u0135\212\0\1\u0136\17\0\1\u0137\136\0\1\u0138\132\0"+
    "\1\u0139\107\0\1\u013a\114\0\1\u013b\74\0\1\u013c\26\0"+
    "\1\u013d\126\0\1\314\160\0\1\314\1\0\1\u013e\76\0"+
    "\1\314\26\0\1\u013f\5\0\1\314\70\0\1\u0140\120\0"+
    "\1\u0141\157\0\1\u0142\72\0\1\u0143\223\0\1\u0144\56\0"+
    "\1\u0145\121\0\1\u0146\114\0\1\u0147\111\0\54\355\1\0"+
    "\51\355\73\356\1\u0148\32\356\13\0\1\u0149\126\0\1\u014a"+
    "\130\0\1\u014b\140\0\1\u014c\124\0\1\u014d\110\0\1\u014e"+
    "\121\0\1\314\34\0\1\314\61\0\30\15\1\u014f\22\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\20\15"+
    "\1\u0150\32\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\53\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\1\u0151\1\15\21\0"+
    "\3\15\2\0\20\15\1\u0152\32\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\46\15\1\u0153\4\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\53\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\1\15\1\u0154\21\0\3\15\2\0\16\15"+
    "\1\u0155\34\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\22\15\1\u0156\30\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\6\15\1\u0157\44\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\31\15\1\u0158\21\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\34\15"+
    "\1\u0159\16\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\53\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\1\u015a"+
    "\2\15\2\0\13\15\1\u015b\37\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\24\15\1\u015c\26\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\31\15\1\u015d"+
    "\21\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\13\15\1\u015e\37\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\2\15\1\u015f\50\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\1\15\1\u0160\21\0\3\15\2\0\1\u0161\52\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\36\15\1\u0162"+
    "\14\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\7\15\1\u0163\43\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\2\15\1\u0164\50\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\34\15\1\u0165\16\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\1\15\1\u0166"+
    "\51\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\53\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\1\15\1\u0167\21\0\3\15"+
    "\2\0\30\15\1\u0168\22\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\24\15\1\u0169\26\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\13\15\1\u016a\37\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\12\15"+
    "\1\u016b\40\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\13\15\1\u016c\37\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\16\15\1\u016d\34\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\31\15\1\u016e\21\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\30\15"+
    "\1\u016f\22\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\13\15\1\u0170\37\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\52\15\1\u0119\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\20\15\1\u0171\32\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\12\15\1\u0172"+
    "\40\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\30\15\1\u0173\22\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\24\15\1\u0174\26\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\54\0\1\u0120\2\0\1\u0120\1\u0175"+
    "\4\0\1\u0120\41\0\72\272\1\u0176\1\u0123\32\272\77\0"+
    "\1\u0177\47\0\1\u0178\7\0\1\u0179\76\0\1\u017a\162\0"+
    "\1\u017b\70\0\1\u017c\124\0\20\15\1\u011e\32\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\123\0\1\u017d\30\0"+
    "\1\u017e\131\0\1\u017f\135\0\1\u0180\105\0\1\u0181\131\0"+
    "\1\u0182\131\0\1\u0183\174\0\1\u0184\52\0\1\u0185\135\0"+
    "\1\u0186\170\0\1\u0187\26\0\1\u0188\151\0\1\u0189\147\0"+
    "\1\u018a\125\0\1\u018b\113\0\1\u018c\103\0\1\u018d\161\0"+
    "\1\u018e\110\0\1\u0189\107\0\1\u018f\134\0\1\u0190\133\0"+
    "\1\u0191\216\0\1\u0192\22\0\1\u0193\206\0\1\u0194\25\0"+
    "\72\356\1\u0195\1\u0148\32\356\13\0\1\u0196\11\0\1\u0197"+
    "\103\0\1\u0198\125\0\1\u0199\135\0\1\u019a\114\0\1\u0189"+
    "\124\0\53\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\1\u019b"+
    "\2\15\2\0\24\15\1\u019c\26\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\30\15\1\u019d\22\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\40\15\1\u019e"+
    "\12\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\20\15\1\u019f\32\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\24\15\1\u01a0\26\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\30\15\1\u01a1\22\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\53\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\1\15\1\u01a2\21\0\3\15\2\0\24\15"+
    "\1\u01a3\26\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\34\15\1\u01a4\16\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\53\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\1\15"+
    "\1\u01a5\21\0\3\15\2\0\1\u01a6\52\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\24\15\1\u01a7\26\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\46\15"+
    "\1\u01a8\4\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\46\15\1\u01a9\4\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\34\15\1\u01aa\16\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\12\15\1\u01ab\40\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\46\15"+
    "\1\u01ac\4\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\31\15\1\u01a7\21\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\13\15\1\u01ad\37\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\22\15\1\u01ae\30\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\30\15"+
    "\1\u01af\22\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\53\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\1\u01b0"+
    "\2\15\2\0\16\15\1\u01b1\34\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\53\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\1\15\1\u01b2\21\0\3\15\2\0\12\15\1\u01b3\11\15"+
    "\1\u01b4\26\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\2\15\1\u01b5\50\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\2\15\1\u01b6\50\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\12\15\1\u01b7\40\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\1\15"+
    "\1\u01a7\51\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\31\15\1\u011f\21\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\2\15\1\u01b8\50\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\32\0\1\u01b9\121\0\1\u0128"+
    "\177\0\1\u0128\57\0\1\u0179\143\0\1\u01ba\103\0\1\u0179"+
    "\117\0\1\u01bb\122\0\1\u01bc\130\0\1\u01bd\140\0\1\u0147"+
    "\106\0\1\u01be\211\0\1\u01bf\42\0\1\u01c0\132\0\1\u01c1"+
    "\131\0\1\u01c2\103\0\1\u01c3\163\0\1\u01c4\100\0\1\u01c5"+
    "\113\0\1\u01c6\137\0\1\u01c7\160\0\1\u01c8\71\0\1\u01c9"+
    "\211\0\1\u01ca\57\0\1\u01cb\126\0\1\u01cc\75\0\1\u01cd"+
    "\246\0\1\u01ce\21\0\1\u01cf\15\0\1\u01d0\122\0\1\u01d1"+
    "\102\0\1\u01d2\143\0\1\u01d3\101\0\16\15\1\u01d4\34\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\13\15"+
    "\1\u01d5\37\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\16\15\1\u01d6\34\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\31\15\1\u016a\21\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\12\15\1\u01d7\40\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\53\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\1\u01d8\1\15\21\0\3\15\2\0"+
    "\13\15\1\u01d9\37\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\20\15\1\u01da\32\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\24\15\1\u01db\26\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\2\15\1\u01dc"+
    "\50\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\40\15\1\u01dd\12\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\13\15\1\u01de\37\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\1\15\1\u01df\51\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\13\15\1\u01e0"+
    "\37\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\46\15\1\u01e1\4\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\12\15\1\u01e2\40\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\53\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\1\u01e3\1\15\21\0\3\15\2\0\30\15\1\u01e4\22\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\31\15"+
    "\1\u01e5\21\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\1\15\1\u01e6\51\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\53\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\1\15\1\u01e7\1\15\2\0\16\15\1\u01e8\15\15"+
    "\1\u01e9\16\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\31\15\1\u01ea\21\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\6\15\1\u01eb\44\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\24\15\1\u01ec\26\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\53\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\u01ed\1\0\2\15\21\0\3\15\20\0\1\u0178"+
    "\122\0\1\u01ee\143\0\1\u01ef\120\0\1\u01f0\131\0\1\u01f1"+
    "\113\0\1\u01f2\145\0\1\u01f3\105\0\1\u01f4\140\0\1\u01f5"+
    "\124\0\1\u01f6\125\0\1\u01f7\126\0\1\u01f8\142\0\1\u01f9"+
    "\123\0\1\u01fa\77\0\1\u01fb\125\0\1\u01fc\155\0\1\u01fd"+
    "\57\0\1\u01fe\173\0\1\u01ff\107\0\1\u0200\75\0\31\15"+
    "\1\u0201\21\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\24\15\1\u0202\26\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\30\15\1\u0203\22\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\16\15\1\u0204\34\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\36\15"+
    "\1\u0205\14\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\16\15\1\u0206\34\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\31\15\1\u0207\21\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\30\15\1\u0208\22\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\30\15"+
    "\1\u0209\22\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\31\15\1\u020a\21\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\46\15\1\u020b\4\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\44\15\1\u020c\6\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\16\15"+
    "\1\u020d\34\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\16\15\1\u020e\34\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\46\15\1\u020f\4\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\u0210\52\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\46\15\1\u0211"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\30\15\1\u0212\22\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\36\15\1\u0213\14\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\33\0\1\u0214\120\0\1\u0215\113\0"+
    "\1\u0216\113\0\1\u0217\156\0\1\u0218\172\0\1\u0219\45\0"+
    "\1\u021a\155\0\1\u021b\61\0\1\u021c\171\0\1\u021d\61\0"+
    "\1\u021e\33\0\1\u021f\123\0\1\u0220\72\0\1\u0221\172\0"+
    "\1\u0222\57\0\24\15\1\u0223\26\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\12\15\1\u0224\40\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\1\u0225\52\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\31\15"+
    "\1\u0226\21\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\53\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\1\u0227\1\15\21\0"+
    "\3\15\2\0\16\15\1\u0228\34\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\46\15\1\u0229\4\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\2\15\1\u022a"+
    "\50\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\46\15\1\u022b\4\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\2\15\1\u022c\33\15\1\u022d\14\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\34\15\1\u022e"+
    "\16\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\1\15\1\u022f\51\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\46\15\1\u0230\4\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\20\15\1\u0231\32\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\32\0\1\u0179\15\0"+
    "\1\u0232\72\0\1\u0233\124\0\1\u0189\115\0\1\u0234\124\0"+
    "\1\u0235\44\0\1\u0236\200\0\1\u0237\22\0\1\u0238\147\0"+
    "\1\u01fb\207\0\1\u01fb\51\0\1\u0239\61\0\1\u01f5\147\0"+
    "\1\u023a\131\0\1\u023b\113\0\1\u023c\107\0\13\15\1\u023d"+
    "\37\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\12\15\1\u01a7\40\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\2\15\1\u023e\50\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\2\0\1\15\1\u023f\44\15\1\u0240"+
    "\4\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\53\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\1\u0241\2\15"+
    "\2\0\16\15\1\u0242\34\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\40\15\1\u020d\12\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\53\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\1\15\1\u020d\1\15\2\0\46\15"+
    "\1\u0243\4\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\2\15\1\u0207\50\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\24\15\1\u0244\26\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\30\15\1\u0245\22\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\16\15"+
    "\1\u0246\34\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\31\15\1\u0247\21\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\20\0\1\u0248\122\0\1\u0249\136\0\1\u024a"+
    "\125\0\1\u024b\200\0\1\u024c\30\0\1\u024d\157\0\1\u024e"+
    "\111\0\1\u024f\203\0\1\u0250\27\0\13\15\1\u0251\37\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\24\15"+
    "\1\u0252\26\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\24\15\1\u0253\26\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\53\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\1\15"+
    "\1\u0254\21\0\3\15\2\0\2\15\1\u0255\50\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\34\15\1\u0256"+
    "\16\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\20\15\1\u0257\32\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\2\0\53\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\1\u0258\1\15"+
    "\21\0\3\15\2\0\1\u0259\52\15\2\0\2\15\2\0"+
    "\1\15\1\0\2\15\3\0\1\165\3\0\1\15\1\0"+
    "\2\15\21\0\3\15\4\0\1\u025a\171\0\1\u025b\155\0"+
    "\1\u025c\60\0\1\u025d\120\0\1\u025e\135\0\1\u025f\127\0"+
    "\1\u0260\133\0\1\u0261\61\0\46\15\1\u0262\4\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\53\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\1\u0263\1\15\21\0\3\15\2\0\31\15"+
    "\1\u0264\21\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\24\15\1\u0265\26\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\2\0\34\15\1\u0266\16\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\36\15\1\u0267\14\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\44\15"+
    "\1\u0268\6\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\13\15\1\u0269\37\15\2\0\2\15\2\0\1\15"+
    "\1\0\2\15\3\0\1\165\3\0\1\15\1\0\2\15"+
    "\21\0\3\15\26\0\1\u026a\114\0\1\u0219\112\0\1\u026b"+
    "\125\0\1\u026c\125\0\13\15\1\u0227\37\15\2\0\2\15"+
    "\2\0\1\15\1\0\2\15\3\0\1\165\3\0\1\15"+
    "\1\0\2\15\21\0\3\15\2\0\1\u026d\52\15\2\0"+
    "\2\15\2\0\1\15\1\0\2\15\3\0\1\165\3\0"+
    "\1\15\1\0\2\15\21\0\3\15\2\0\1\u026e\52\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\31\15"+
    "\1\u026f\21\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\20\0\1\u0270\111\0\1\u0271\123\0\16\15\1\u0272\34\15"+
    "\2\0\2\15\2\0\1\15\1\0\2\15\3\0\1\165"+
    "\3\0\1\15\1\0\2\15\21\0\3\15\2\0\2\15"+
    "\1\u0273\50\15\2\0\2\15\2\0\1\15\1\0\2\15"+
    "\3\0\1\165\3\0\1\15\1\0\2\15\21\0\3\15"+
    "\2\0\52\15\1\u0274\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\3\0\1\u01f5\150\0\1\u01fb\101\0\1\15\1\u0207"+
    "\51\15\2\0\2\15\2\0\1\15\1\0\2\15\3\0"+
    "\1\165\3\0\1\15\1\0\2\15\21\0\3\15\2\0"+
    "\24\15\1\u020d\26\15\2\0\2\15\2\0\1\15\1\0"+
    "\2\15\3\0\1\165\3\0\1\15\1\0\2\15\21\0"+
    "\3\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44548];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\42\1\1\11\5\1\1\11\1\1\1\11"+
    "\3\1\6\11\1\1\2\11\4\1\3\11\2\1\1\11"+
    "\1\0\1\11\20\1\1\11\20\1\1\0\11\1\1\11"+
    "\67\1\2\0\2\1\1\0\1\1\6\11\2\1\1\11"+
    "\1\0\1\11\4\0\1\1\12\11\5\0\1\1\11\0"+
    "\1\1\4\0\1\1\1\11\1\0\1\1\3\0\1\11"+
    "\4\0\2\1\5\0\55\1\7\0\1\11\1\0\1\1"+
    "\5\0\1\11\26\0\1\11\2\0\1\11\4\0\46\1"+
    "\1\0\1\11\11\0\1\11\10\0\1\11\2\0\2\11"+
    "\7\0\1\11\2\1\3\0\36\1\2\0\1\11\2\0"+
    "\1\11\5\0\1\11\1\1\2\0\1\11\3\0\1\1"+
    "\5\0\2\11\32\1\1\0\1\1\1\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\1\1\0\2\11\5\0\24\1"+
    "\3\0\1\1\1\11\11\0\17\1\5\0\1\11\4\0"+
    "\1\11\13\1\2\0\1\11\6\0\11\1\2\0\3\11"+
    "\2\0\1\11\10\1\1\11\2\0\3\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private void pm() {
      if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
          yybegin(YYINITIAL);
      }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 128: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 129: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 130: break;
          case 4: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 131: break;
          case 5: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 132: break;
          case 6: 
            { pm(); return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 133: break;
          case 7: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 134: break;
          case 8: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 135: break;
          case 9: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 136: break;
          case 10: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 137: break;
          case 11: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 138: break;
          case 12: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 139: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 140: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 141: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 142: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 143: break;
          case 17: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 144: break;
          case 18: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 145: break;
          case 19: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 146: break;
          case 20: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 147: break;
          case 21: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 148: break;
          case 22: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 149: break;
          case 23: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 150: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 151: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 152: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 153: break;
          case 27: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 154: break;
          case 28: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 155: break;
          case 29: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 156: break;
          case 30: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 157: break;
          case 31: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 158: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 159: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 160: break;
          case 34: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 161: break;
          case 35: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 162: break;
          case 36: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 163: break;
          case 37: 
            { pm(); return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 164: break;
          case 38: 
            { pm(); return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 165: break;
          case 39: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 166: break;
          case 40: 
            { pm(); return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 167: break;
          case 41: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 168: break;
          case 42: 
            { pm(); return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 169: break;
          case 43: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 170: break;
          case 44: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 171: break;
          case 45: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 172: break;
          case 46: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 173: break;
          case 47: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 174: break;
          case 48: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 175: break;
          case 49: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 176: break;
          case 50: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 177: break;
          case 51: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 178: break;
          case 52: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 179: break;
          case 53: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 180: break;
          case 54: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 181: break;
          case 55: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 182: break;
          case 56: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 183: break;
          case 57: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 184: break;
          case 58: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 185: break;
          case 59: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 186: break;
          case 60: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 187: break;
          case 61: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 188: break;
          case 62: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 189: break;
          case 63: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 190: break;
          case 64: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 191: break;
          case 65: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 192: break;
          case 66: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 193: break;
          case 67: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 194: break;
          case 68: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 195: break;
          case 69: 
            { yybegin(SYMBOL_DEF); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 196: break;
          case 70: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 197: break;
          case 71: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 198: break;
          case 72: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 199: break;
          case 73: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 200: break;
          case 74: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 201: break;
          case 75: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 202: break;
          case 76: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 203: break;
          case 77: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 204: break;
          case 78: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 205: break;
          case 79: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 206: break;
          case 80: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 207: break;
          case 81: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 208: break;
          case 82: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 209: break;
          case 83: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 210: break;
          case 84: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 211: break;
          case 85: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 212: break;
          case 86: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 213: break;
          case 87: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 214: break;
          case 88: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 215: break;
          case 89: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 216: break;
          case 90: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 217: break;
          case 91: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 218: break;
          case 92: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 219: break;
          case 93: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 220: break;
          case 94: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 221: break;
          case 95: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 222: break;
          case 96: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 223: break;
          case 97: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 224: break;
          case 98: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 225: break;
          case 99: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 226: break;
          case 100: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 227: break;
          case 101: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 228: break;
          case 102: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 229: break;
          case 103: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 230: break;
          case 104: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 231: break;
          case 105: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 232: break;
          case 106: 
            { pm(); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 233: break;
          case 107: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 234: break;
          case 108: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 235: break;
          case 109: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 236: break;
          case 110: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 237: break;
          case 111: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 238: break;
          case 112: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 239: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 240: break;
          case 114: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 241: break;
          case 115: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 242: break;
          case 116: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 243: break;
          case 117: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 244: break;
          case 118: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 245: break;
          case 119: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 246: break;
          case 120: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 247: break;
          case 121: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 248: break;
          case 122: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 249: break;
          case 123: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 250: break;
          case 124: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 251: break;
          case 125: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 252: break;
          case 126: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 253: break;
          case 127: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
