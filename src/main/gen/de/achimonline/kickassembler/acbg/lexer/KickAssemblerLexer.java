/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\21\1\34\1\6\1\10\1\117\1\0\1\104"+
    "\1\105\1\20\1\14\1\113\1\15\1\5\1\17\2\11\1\33\7\3\1\16\1\114\1\115\1\112"+
    "\1\116\1\123\1\0\1\56\1\22\1\60\1\57\1\70\1\7\1\12\1\61\1\72\1\103\1\76\1"+
    "\63\1\74\1\65\1\101\1\75\1\71\1\64\1\66\1\73\1\27\1\77\1\12\1\62\1\100\1\12"+
    "\1\110\1\0\1\111\1\121\1\4\1\0\1\23\1\46\1\26\1\35\1\36\1\37\1\45\1\53\1\25"+
    "\1\102\1\47\1\41\1\42\1\40\1\43\1\30\1\67\1\32\1\24\1\31\1\44\1\52\1\51\1"+
    "\54\1\50\1\55\1\106\1\120\1\107\1\122\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\10\4\1\14"+
    "\27\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\0\1\35\1\36\1\0\1\37\3\0\1\37"+
    "\11\0\1\36\2\3\1\0\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\0"+
    "\1\53\37\4\4\0\35\4\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\3\3\0\1\37\2\0\1\63"+
    "\1\0\1\37\4\0\1\64\2\0\1\65\3\0\1\65"+
    "\15\0\1\65\1\0\1\65\2\0\1\36\3\0\1\4"+
    "\2\66\1\4\1\67\5\0\2\4\7\0\1\70\16\0"+
    "\1\71\14\0\1\72\1\50\1\4\1\73\6\0\1\74"+
    "\11\0\1\65\4\0\1\64\1\65\12\0\1\4\7\0"+
    "\1\75\2\0\1\64\6\0\1\76\2\0\1\77\1\100"+
    "\1\101\1\4\1\0\1\64\1\0\1\64\2\0\1\102"+
    "\6\0\1\4\1\103\1\0\1\64\7\0\1\4\5\0"+
    "\1\75\1\104\1\4\3\0\1\4\3\0\1\4\1\103"+
    "\1\0\1\4\1\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\124\0\u039c\0\u03f0\0\u0444\0\u0498"+
    "\0\u04ec\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4\0\u0738"+
    "\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984\0\u09d8"+
    "\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24\0\u0c78"+
    "\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\u0e70\0\u0ec4\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\u0f18\0\124\0\124"+
    "\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\124\0\124\0\124\0\u10bc"+
    "\0\u1110\0\124\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308"+
    "\0\u135c\0\u13b0\0\u1404\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8"+
    "\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\u1848\0\u189c\0\124"+
    "\0\124\0\u0444\0\124\0\u18f0\0\u1944\0\u1998\0\u19ec\0\u1a40"+
    "\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0"+
    "\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c\0\u1f80"+
    "\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124\0\u2178\0\u21cc\0\u2220"+
    "\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0"+
    "\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760"+
    "\0\u27b4\0\u2808\0\u285c\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00"+
    "\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0"+
    "\0\u2cf4\0\u2d48\0\u2d9c\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\u2df0\0\u2e44\0\u2e98\0\u2eec\0\124\0\u2f40"+
    "\0\u2f94\0\124\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c"+
    "\0\124\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384\0\u33d8"+
    "\0\u342c\0\u3480\0\u34d4\0\u3528\0\u357c\0\u35d0\0\u3624\0\u3678"+
    "\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918"+
    "\0\u396c\0\u39c0\0\u3a14\0\u16f8\0\u174c\0\u3a68\0\u3abc\0\u0150"+
    "\0\u3b10\0\u3b64\0\124\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08"+
    "\0\u3d5c\0\u3db0\0\u2df0\0\u3e04\0\u3e58\0\u3eac\0\u3f00\0\u3f54"+
    "\0\u3a14\0\124\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8\0\u414c"+
    "\0\u41a0\0\u41f4\0\u3918\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398"+
    "\0\124\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\124\0\124\0\u47dc"+
    "\0\u0150\0\u4830\0\u4884\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u0150"+
    "\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u4c74"+
    "\0\u4cc8\0\124\0\u4d1c\0\u4d70\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0"+
    "\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\u5064\0\u50b8\0\u510c\0\u5160"+
    "\0\u51b4\0\u5208\0\u525c\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400"+
    "\0\u5454\0\u54a8\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0"+
    "\0\u33d8\0\u56f4\0\u5748\0\u579c\0\124\0\u57f0\0\u5844\0\124"+
    "\0\124\0\124\0\u5898\0\u58ec\0\u5940\0\u5994\0\u59e8\0\u5a3c"+
    "\0\u5a90\0\124\0\u5ae4\0\u5b38\0\u5b8c\0\u5be0\0\u5c34\0\u5c88"+
    "\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c\0\u5e80\0\u5ed4\0\u5f28"+
    "\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc\0\u6120\0\u6174\0\u61c8"+
    "\0\u621c\0\124\0\124\0\u6270\0\u62c4\0\u6318\0\u636c\0\u63c0"+
    "\0\u6414\0\u6468\0\u64bc\0\u6510\0\124\0\u6564\0\u65b8\0\u660c"+
    "\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\4\1\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\5\1\25"+
    "\1\26\1\27\1\4\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\5\1\36\2\5\1\37\5\5\1\40\1\5"+
    "\1\41\1\42\1\43\1\5\1\44\1\45\1\46\1\47"+
    "\1\50\1\5\1\51\1\5\1\52\1\53\1\5\1\54"+
    "\3\5\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\125\0\2\3\124\0\1\4"+
    "\1\100\1\101\3\0\1\4\21\0\1\4\73\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\47\5\43\0\1\103\1\104\1\105\1\106\1\0"+
    "\1\107\1\110\1\111\2\0\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\3\0\1\120\2\0\1\121\1\122\2\0"+
    "\1\123\51\0\1\124\3\0\1\124\1\0\1\124\10\0"+
    "\2\124\2\0\1\124\4\0\1\124\1\0\3\124\6\0"+
    "\1\124\7\0\3\124\7\0\1\124\44\0\1\125\116\0"+
    "\1\126\2\0\1\126\2\0\1\126\1\0\2\127\1\130"+
    "\3\0\11\126\2\0\47\126\6\0\1\131\25\0\1\132"+
    "\75\0\1\133\26\0\1\134\74\0\1\135\30\0\1\136"+
    "\1\137\71\0\1\140\123\0\1\141\11\0\1\142\1\0"+
    "\17\142\1\143\102\142\3\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\1\5\1\144\10\5\1\0"+
    "\23\5\1\145\3\5\1\146\1\147\2\5\1\150\1\5"+
    "\1\151\1\5\1\152\1\153\1\5\1\145\4\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\2\5\1\154\5\5\1\155\1\5\1\0\1\156\2\5"+
    "\1\157\1\155\11\5\1\160\1\161\27\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\1\5"+
    "\1\162\1\5\1\155\3\5\1\163\1\164\1\5\1\0"+
    "\1\5\1\165\2\5\1\166\4\5\1\167\4\5\1\170"+
    "\30\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\2\5\1\156\7\5\1\0\3\5\1\171"+
    "\43\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\6\5\1\170\3\5\1\0\4\5\1\172"+
    "\1\173\41\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\4\5\1\174\11\5"+
    "\1\174\30\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\1\5\1\175\1\160\5\5\1\176"+
    "\1\5\1\0\13\5\1\177\3\5\1\200\27\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\7\5\1\201\1\177\1\5\1\0\4\5\1\177\1\5"+
    "\1\202\40\5\45\0\1\203\7\0\1\204\1\205\5\0"+
    "\1\206\62\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\4\5\1\173\5\5\1\0\1\5\1\171"+
    "\45\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\6\5\1\155\40\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\1\5\1\207\10\5\1\0\47\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\6\5\1\173\1\210\37\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\1\5\1\211\1\155"+
    "\7\5\1\0\1\163\46\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\10\5\1\177\1\5"+
    "\1\0\47\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\3\5\1\212\1\213\1\5\1\154"+
    "\1\5\1\214\1\5\1\0\1\5\1\215\1\5\1\164"+
    "\1\5\1\216\7\5\1\213\31\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\1\5\1\177"+
    "\10\5\1\0\47\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\22\5\1\217"+
    "\1\5\1\220\1\221\2\222\1\223\1\153\15\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\23\5\1\224\7\5\1\225\13\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\26\5\1\226\10\5\1\224\1\227\6\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\12\5\1\0\21\5\1\230\25\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\21\5\1\231\1\232\6\5\1\222\15\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\26\5\2\230\6\5\1\233\5\5\1\234"+
    "\2\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\44\5\1\224\2\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\1\235\11\5\1\0\21\5\1\236\2\5\1\227\1\5"+
    "\1\237\1\147\3\5\1\240\1\5\1\222\1\232\10\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\12\5\1\0\44\5\1\222\2\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\30\5\1\225\1\217\15\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\21\5\1\241\3\5\1\242\3\5\1\220\11\5\1\230"+
    "\3\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\24\5\1\243\1\5\1\243"+
    "\20\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\27\5\1\230\17\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\2\5\1\155\7\5\1\0\5\5\1\173\41\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\31\5\1\222\5\5\1\224\7\5\132\0"+
    "\1\244\123\0\1\245\2\0\1\246\120\0\1\247\3\0"+
    "\1\250\124\0\1\251\124\0\1\252\6\0\1\4\1\100"+
    "\4\0\1\4\21\0\1\4\73\0\1\253\5\0\1\253"+
    "\21\0\1\253\114\0\1\254\14\0\1\255\4\0\1\256"+
    "\1\0\1\257\3\0\1\257\100\0\1\260\4\0\1\261"+
    "\124\0\1\262\1\263\1\0\1\264\12\0\1\265\76\0"+
    "\1\266\12\0\1\267\104\0\1\270\1\0\1\271\3\0"+
    "\1\272\6\0\1\273\120\0\1\274\123\0\1\275\112\0"+
    "\1\276\10\0\1\277\12\0\1\300\104\0\1\301\5\0"+
    "\1\302\11\0\1\303\76\0\1\304\15\0\1\305\1\306"+
    "\102\0\1\307\123\0\1\310\17\0\1\311\103\0\1\312"+
    "\12\0\1\313\4\0\1\314\112\0\1\315\15\0\1\316"+
    "\76\0\1\317\17\0\1\320\7\0\1\321\73\0\1\322"+
    "\130\0\1\323\17\0\1\257\3\0\1\257\52\0\1\124"+
    "\1\324\2\0\1\124\1\0\1\124\10\0\2\124\2\0"+
    "\1\124\4\0\1\124\1\0\3\124\6\0\1\124\7\0"+
    "\3\124\7\0\1\124\37\0\1\325\4\0\1\125\115\0"+
    "\2\126\2\0\1\126\1\0\2\126\1\0\2\127\1\130"+
    "\3\0\12\126\1\0\47\126\34\0\2\127\106\0\1\136"+
    "\1\0\122\136\20\137\1\326\103\137\3\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\2\5\1\327"+
    "\7\5\1\0\47\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\23\5\1\330"+
    "\5\5\1\330\15\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\21\5\1\330"+
    "\17\5\1\330\5\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\33\5\1\330"+
    "\13\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\34\5\1\330\12\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\36\5\1\330\10\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\35\5\1\330\11\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\26\5\1\330"+
    "\20\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\4\5\1\330\42\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\10\5\1\330\1\5\1\0\47\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\4\5\1\330"+
    "\5\5\1\0\47\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\4\5\1\331\5\5\1\0"+
    "\1\330\46\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\17\5\1\330\27\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\2\5\1\330\7\5\1\0\47\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\4\5"+
    "\1\330\5\5\1\0\17\5\1\330\27\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\1\5"+
    "\1\330\10\5\1\0\13\5\1\330\3\5\1\330\27\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\12\5\1\0\1\5\1\330\45\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\3\5"+
    "\2\330\5\5\1\0\1\330\46\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\6\5\1\330\40\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\4\5\1\331\5\5\1\0"+
    "\47\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\13\5\1\330\3\5\1\330"+
    "\27\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\4\5\1\330\5\5\1\0\13\5\1\330"+
    "\3\5\1\330\27\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\3\5\2\330\5\5\1\0"+
    "\1\330\14\5\1\330\31\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\6\5\1\330\3\5"+
    "\1\0\47\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\1\5\1\330\4\5\1\330\3\5"+
    "\1\0\47\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\2\5\1\330\7\5\1\0\13\5"+
    "\1\330\3\5\1\330\27\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\7\5"+
    "\1\332\37\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\1\5\1\330\10\5\1\0\47\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\1\5\2\330\7\5\1\0\47\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\2\5"+
    "\2\330\6\5\1\0\47\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\10\5\1\330\1\5"+
    "\1\0\4\5\1\330\42\5\57\0\1\333\2\0\1\334"+
    "\117\0\1\335\125\0\1\336\1\337\122\0\1\340\66\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\4\5\1\341\42\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\4\5\1\342\42\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\2\5\1\330\7\5\1\0"+
    "\17\5\1\330\27\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\7\5\1\330\2\5\1\0"+
    "\47\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\2\5\1\330\1\5\1\330\5\5\1\0"+
    "\47\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\1\5\1\330\10\5\1\0\12\5\1\330"+
    "\34\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\32\5\1\330\14\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\3\5\1\330\6\5\1\0\47\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\23\5\1\330\23\5\23\0\2\5\2\0\1\5\1\0"+
    "\2\5\3\0\1\102\3\0\12\5\1\0\25\5\1\330"+
    "\21\5\23\0\2\5\2\0\1\5\1\0\2\5\3\0"+
    "\1\102\3\0\12\5\1\0\31\5\1\330\15\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\27\5\1\330\17\5\23\0\2\5\2\0"+
    "\1\5\1\0\2\5\3\0\1\102\3\0\12\5\1\0"+
    "\22\5\1\330\1\331\23\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\40\5"+
    "\1\330\6\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\23\5\1\330\1\5"+
    "\1\330\15\5\1\330\3\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\22\5"+
    "\2\330\11\5\1\330\4\5\1\330\4\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\25\5\1\330\15\5\1\330\3\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\21\5\1\330\25\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\25\5"+
    "\1\330\3\5\1\330\15\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\21\5"+
    "\1\330\3\5\1\330\15\5\1\330\3\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\31\5\1\330\3\5\1\330\11\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\26\5\2\330\17\5\23\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\12\5\1\0\23\5"+
    "\1\331\23\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\23\5\1\330\1\5"+
    "\1\330\21\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\44\5\1\330\2\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\12\5\1\0\22\5\2\330\11\5\1\330\11\5"+
    "\23\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\12\5\1\0\25\5\1\330\3\5\1\330\11\5"+
    "\1\330\3\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\21\5\1\330\7\5"+
    "\1\330\15\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\12\5\1\0\21\5\1\330\16\5"+
    "\1\330\6\5\23\0\1\253\1\343\4\0\1\253\21\0"+
    "\1\253\114\0\1\344\124\0\1\345\122\0\1\323\131\0"+
    "\1\346\136\0\1\347\113\0\1\257\116\0\1\350\11\0"+
    "\1\257\111\0\1\351\17\0\1\257\3\0\1\257\113\0"+
    "\1\352\117\0\1\353\121\0\1\354\112\0\1\355\142\0"+
    "\1\356\133\0\1\357\100\0\1\360\7\0\1\257\106\0"+
    "\1\361\136\0\1\362\127\0\1\363\112\0\1\364\117\0"+
    "\1\365\15\0\1\366\102\0\1\367\141\0\1\370\114\0"+
    "\1\371\131\0\1\372\125\0\1\373\127\0\1\374\130\0"+
    "\1\375\76\0\1\376\137\0\1\377\116\0\1\u0100\124\0"+
    "\1\u0101\116\0\1\u0102\123\0\1\u0103\124\0\1\u0104\116\0"+
    "\1\u0105\130\0\1\u0106\141\0\1\257\3\0\1\257\47\0"+
    "\17\137\1\u0107\1\326\103\137\3\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\3\5\1\u0108\6\5"+
    "\1\0\47\5\23\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\11\5\1\330\1\0\47\5\23\0"+
    "\2\5\2\0\1\5\1\0\2\5\3\0\1\102\3\0"+
    "\12\5\1\0\1\5\1\u0109\45\5\50\0\1\u010a\132\0"+
    "\1\u010b\121\0\1\u010c\112\0\1\u010d\1\u010e\133\0\1\u010f"+
    "\71\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\2\5\1\332\7\5\1\0\47\5\23\0\2\5"+
    "\2\0\1\5\1\0\2\5\3\0\1\102\3\0\12\5"+
    "\1\0\4\5\1\u0110\42\5\56\0\1\u0111\132\0\1\u0112"+
    "\122\0\1\u0113\121\0\1\u0114\124\0\1\u0115\104\0\1\u0116"+
    "\143\0\1\u0117\117\0\1\u0118\130\0\1\u0119\107\0\1\u011a"+
    "\136\0\1\u011b\126\0\1\271\101\0\1\u011c\141\0\1\u011d"+
    "\123\0\1\u011e\122\0\1\271\122\0\1\271\120\0\1\u011f"+
    "\2\0\1\u0120\110\0\1\u0121\133\0\1\u0122\123\0\1\u0123"+
    "\112\0\1\u0124\130\0\1\u0125\137\0\1\u0126\102\0\1\u0127"+
    "\121\0\1\u0128\136\0\1\u011a\113\0\1\u0129\132\0\1\u011a"+
    "\127\0\1\u012a\65\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\4\5\1\u012b\5\5\1\0\47\5"+
    "\63\0\1\u012c\105\0\1\u012d\123\0\1\u010e\134\0\1\333"+
    "\124\0\1\333\122\0\1\u010e\117\0\1\u012e\131\0\1\271"+
    "\111\0\1\u012f\133\0\1\u0130\117\0\1\u0131\122\0\1\u0106"+
    "\127\0\1\u0132\117\0\1\u0133\117\0\1\u0112\130\0\1\u0134"+
    "\131\0\1\u0135\115\0\1\u0136\126\0\1\u0137\126\0\1\115"+
    "\1\0\1\u0138\132\0\1\u0139\103\0\1\u013a\116\0\1\u013b"+
    "\140\0\1\u0106\121\0\1\u013c\127\0\1\u013d\121\0\1\u013e"+
    "\121\0\1\u013f\133\0\1\u0140\127\0\1\u0141\106\0\1\u0142"+
    "\70\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\5\5\1\u0143\4\5\1\0\47\5\52\0\1\u0144"+
    "\131\0\1\u010d\114\0\1\u0145\123\0\1\271\132\0\1\u0146"+
    "\114\0\1\u0147\135\0\1\u0148\120\0\1\u0149\123\0\1\u014a"+
    "\121\0\1\271\112\0\1\u014b\123\0\1\u014c\141\0\1\314"+
    "\105\0\1\u014d\126\0\1\u014e\120\0\1\u014f\141\0\1\u0150"+
    "\130\0\1\271\56\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\6\5\1\u0151\3\5\1\0\47\5"+
    "\51\0\1\u0152\130\0\1\u0153\116\0\1\u0154\135\0\1\u0155"+
    "\106\0\1\u0156\1\0\1\u0157\136\0\1\u0158\117\0\1\271"+
    "\124\0\1\u0159\126\0\1\u0112\103\0\1\u015a\141\0\1\u015b"+
    "\110\0\1\361\100\0\2\5\2\0\1\5\1\0\2\5"+
    "\3\0\1\102\3\0\2\5\1\u015c\7\5\1\0\47\5"+
    "\45\0\1\u010e\15\0\1\u015d\112\0\1\u015e\126\0\1\u015f"+
    "\5\0\1\u0160\120\0\1\u015a\126\0\1\u0161\106\0\1\271"+
    "\146\0\1\u0162\117\0\1\u0163\104\0\1\u0135\136\0\1\u011a"+
    "\65\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\7\5\1\u0164\2\5\1\0\47\5\60\0\1\u0165"+
    "\115\0\1\u0166\127\0\1\u014b\131\0\1\u012f\121\0\1\u0167"+
    "\64\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\1\5\1\u0168\10\5\1\0\47\5\46\0\1\u0169"+
    "\140\0\1\u016a\122\0\1\u016b\64\0\2\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\102\3\0\10\5\1\u016c\1\5"+
    "\1\0\47\5\56\0\1\u016d\117\0\1\271\114\0\1\u016e"+
    "\103\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\7\5\1\u016f\2\5\1\0\47\5\60\0\1\u0170"+
    "\66\0\2\5\2\0\1\5\1\0\2\5\3\0\1\102"+
    "\3\0\11\5\1\u0171\1\0\47\5\55\0\1\271\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\43\1\6\11\1\1\2\11"+
    "\4\1\3\11\2\0\1\11\1\1\1\0\1\1\3\0"+
    "\1\1\11\0\3\1\1\0\1\1\6\11\2\1\2\11"+
    "\1\0\1\11\37\1\4\0\35\1\7\11\1\1\3\0"+
    "\1\11\2\0\1\11\1\0\1\1\4\0\1\11\2\0"+
    "\1\1\3\0\1\1\15\0\1\1\1\0\1\1\2\0"+
    "\1\1\3\0\4\1\1\11\5\0\2\1\7\0\1\11"+
    "\16\0\1\11\14\0\2\11\2\1\6\0\1\1\11\0"+
    "\1\11\4\0\2\1\12\0\1\1\7\0\1\1\2\0"+
    "\1\1\6\0\1\11\2\0\3\11\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\11\6\0\2\1\1\0\1\1"+
    "\7\0\1\1\5\0\2\11\1\1\3\0\1\1\3\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 70: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 3: 
            { return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 72: break;
          case 4: 
            { return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 73: break;
          case 5: 
            { return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 74: break;
          case 6: 
            { return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 75: break;
          case 7: 
            { return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 76: break;
          case 8: 
            { return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 77: break;
          case 9: 
            { return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 78: break;
          case 10: 
            { return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 79: break;
          case 11: 
            { return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 80: break;
          case 12: 
            { return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 81: break;
          case 13: 
            { return KickAssemblerTypes.LEFT_PARENTHESES;
            } 
            // fall through
          case 82: break;
          case 14: 
            { return KickAssemblerTypes.RIGHT_PARENTHESES;
            } 
            // fall through
          case 83: break;
          case 15: 
            { return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 84: break;
          case 16: 
            { return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 85: break;
          case 17: 
            { return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 86: break;
          case 18: 
            { return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 87: break;
          case 19: 
            { return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 88: break;
          case 20: 
            { return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 89: break;
          case 21: 
            { return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 90: break;
          case 22: 
            { return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 91: break;
          case 23: 
            { return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 92: break;
          case 24: 
            { return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 93: break;
          case 25: 
            { return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 94: break;
          case 26: 
            { return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 95: break;
          case 27: 
            { return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 96: break;
          case 28: 
            { return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 97: break;
          case 29: 
            { return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 98: break;
          case 30: 
            { return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 99: break;
          case 31: 
            { return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 100: break;
          case 32: 
            { return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 101: break;
          case 33: 
            { return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 102: break;
          case 34: 
            { return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 103: break;
          case 35: 
            { return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 104: break;
          case 36: 
            { return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 105: break;
          case 37: 
            { return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 106: break;
          case 38: 
            { return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 107: break;
          case 39: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 108: break;
          case 40: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 109: break;
          case 41: 
            { return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 110: break;
          case 42: 
            { return KickAssemblerTypes.TIMES_EQUAL;
            } 
            // fall through
          case 111: break;
          case 43: 
            { return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 112: break;
          case 44: 
            { return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 113: break;
          case 45: 
            { return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 114: break;
          case 46: 
            { return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 115: break;
          case 47: 
            { return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 116: break;
          case 48: 
            { return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 117: break;
          case 49: 
            { return KickAssemblerTypes.AND;
            } 
            // fall through
          case 118: break;
          case 50: 
            { return KickAssemblerTypes.OR;
            } 
            // fall through
          case 119: break;
          case 51: 
            { return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 120: break;
          case 52: 
            { return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 121: break;
          case 53: 
            { return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 122: break;
          case 54: 
            { return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 123: break;
          case 55: 
            { return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 124: break;
          case 56: 
            { return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 125: break;
          case 57: 
            { return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 126: break;
          case 58: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 127: break;
          case 59: 
            { return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 128: break;
          case 60: 
            { return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 129: break;
          case 61: 
            { return KickAssemblerTypes.DIRECTIVE_BUILTIN;
            } 
            // fall through
          case 130: break;
          case 62: 
            { return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 131: break;
          case 63: 
            { return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 132: break;
          case 64: 
            { return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 133: break;
          case 65: 
            { return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 134: break;
          case 66: 
            { return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 135: break;
          case 67: 
            { return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 136: break;
          case 68: 
            { return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 137: break;
          case 69: 
            { return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
