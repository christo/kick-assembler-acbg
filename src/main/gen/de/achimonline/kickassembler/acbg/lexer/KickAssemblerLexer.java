/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/*
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/christo/src/christo/kick-assembler-acbg/src/main/java/de/achimonline/kickassembler/acbg/lexer/KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;
  public static final int POST_DOT = 8;
  public static final int SYMBOL_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\31\1\27\1\0\1\31\1\30\22\0\1\31\1\77\1\42\1\53\1\36\1\37\1\71\1\41"+
    "\1\55\1\56\1\46\1\75\1\65\1\76\1\34\1\45\2\40\1\26\7\32\1\44\1\66\1\67\1\63"+
    "\1\70\1\100\1\64\1\35\1\51\4\35\16\43\1\52\5\43\1\61\1\47\1\62\1\73\1\33\1"+
    "\0\1\17\1\1\1\4\1\10\1\12\1\50\1\101\1\22\1\6\1\25\1\3\1\5\1\24\1\13\1\14"+
    "\1\15\1\23\1\2\1\11\1\16\1\54\1\7\1\102\1\20\1\21\1\103\1\57\1\72\1\60\1\74"+
    "\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\2\1\3\2\4\1\5\1\6\4\1"+
    "\1\7\1\10\1\11\2\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\2\41\1\42\2\41\1\42"+
    "\7\41\1\43\1\41\1\5\2\41\1\44\1\41\1\43"+
    "\20\2\1\45\1\46\1\47\7\2\1\50\47\2\2\0"+
    "\2\3\4\0\1\51\1\52\1\53\1\54\2\2\4\0"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\2\0\1\71\6\0\1\42"+
    "\1\72\4\0\1\71\7\0\1\73\2\0\1\71\3\0"+
    "\1\42\3\0\1\74\3\0\1\71\2\0\1\43\1\2"+
    "\1\75\6\2\1\76\3\2\1\75\7\2\1\77\2\2"+
    "\1\75\10\2\1\75\2\2\1\100\1\101\1\102\1\103"+
    "\1\2\1\104\1\105\1\104\3\2\1\101\1\3\2\0"+
    "\1\106\1\0\1\106\2\0\2\2\1\0\1\107\4\0"+
    "\1\110\4\0\1\111\4\0\1\112\25\0\1\113\4\0"+
    "\4\2\1\114\3\2\1\112\24\2\1\115\5\2\1\116"+
    "\1\117\1\120\1\0\1\121\1\53\1\2\7\0\1\71"+
    "\5\0\1\122\4\0\1\123\1\0\1\124\11\0\1\74"+
    "\1\71\1\125\3\0\1\2\1\75\5\2\1\126\4\2"+
    "\1\127\1\2\1\130\11\2\1\75\1\131\4\2\2\0"+
    "\1\132\2\0\1\133\2\0\1\134\4\0\1\135\2\0"+
    "\1\135\2\0\1\136\3\0\1\137\4\0\1\140\1\141"+
    "\1\142\2\2\1\143\4\2\1\144\2\2\1\144\2\2"+
    "\1\145\3\2\1\146\4\2\1\147\1\150\1\2\2\0"+
    "\1\151\1\152\1\0\1\153\1\154\1\0\1\155\4\0"+
    "\1\135\1\0\1\156\1\0\1\157\3\0\1\160\1\2"+
    "\1\161\1\162\1\2\1\163\4\2\1\144\1\2\1\164"+
    "\1\2\1\165\4\2\1\166\2\0\1\167\1\170\12\0"+
    "\2\2\1\171\1\172\13\2\4\0\1\173\2\0\1\174"+
    "\3\0\1\175\3\2\1\176\2\2\1\177\3\2\1\200"+
    "\1\2\4\0\1\201\4\0\3\2\1\202\5\2\1\0"+
    "\1\203\1\204\1\125\3\0\1\205\1\206\1\207\1\131"+
    "\3\2\1\210\1\2\1\211\2\0\3\2\2\0\2\2"+
    "\1\212\1\213";

  private static int [] zzUnpackAction() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0154\0\u0660\0\u0154\0\u0154\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u0154\0\u07b4\0\u0154\0\u07f8\0\u083c\0\u0880\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u08c4\0\u0908\0\u0154\0\u0154"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0154\0\u0154\0\u0a5c\0\u0aa0"+
    "\0\u0ae4\0\u0154\0\u0b28\0\u0154\0\u0b6c\0\u0154\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u0154"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u0154\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u0154\0\u1760\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068"+
    "\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u0770\0\u0154\0\u2398\0\u23dc\0\u0154"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u0154\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u0154\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u0154\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u0220\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u0220\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8"+
    "\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u38d8\0\u0220\0\u0220\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u391c\0\u3a2c\0\u06a4\0\u2288\0\u0154\0\u3a70"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u0154\0\u3c08"+
    "\0\u3c4c\0\u3c90\0\u3cd4\0\u25b8\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u0154\0\u3e28\0\u3e6c\0\u3eb0\0\u2fd0\0\u0154\0\u3ef4\0\u3f38"+
    "\0\u2f04\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u0154\0\u4444\0\u4488\0\u44cc\0\u4510"+
    "\0\u4554\0\u4598\0\u45dc\0\u4620\0\u0220\0\u4664\0\u46a8\0\u46ec"+
    "\0\u0220\0\u4730\0\u4774\0\u380c\0\u47b8\0\u47fc\0\u4840\0\u4884"+
    "\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4"+
    "\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u0220\0\u4c3c\0\u4c80"+
    "\0\u4cc4\0\u4d08\0\u4d4c\0\u0220\0\u0220\0\u0220\0\u3a2c\0\u0154"+
    "\0\u0154\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u0154\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u0154"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u0154\0\u5214\0\u0154\0\u5258"+
    "\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478"+
    "\0\u0154\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u0220"+
    "\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u0220\0\u57a8\0\u57ec"+
    "\0\u5830\0\u5874\0\u0220\0\u58b8\0\u0220\0\u58fc\0\u5940\0\u5984"+
    "\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4"+
    "\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u0154\0\u5d80"+
    "\0\u5dc4\0\u0154\0\u5e08\0\u5e4c\0\u0154\0\u5e90\0\u5ed4\0\u5f18"+
    "\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u0154"+
    "\0\u6138\0\u617c\0\u61c0\0\u0154\0\u2970\0\u6204\0\u6248\0\u628c"+
    "\0\u0154\0\u0154\0\u0220\0\u62d0\0\u6314\0\u0220\0\u6358\0\u639c"+
    "\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc"+
    "\0\u0220\0\u6600\0\u6644\0\u6688\0\u0220\0\u3300\0\u66cc\0\u6710"+
    "\0\u6754\0\u0220\0\u0220\0\u6798\0\u67dc\0\u6820\0\u0154\0\u0154"+
    "\0\u6864\0\u68a8\0\u0154\0\u68ec\0\u0154\0\u6930\0\u6974\0\u69b8"+
    "\0\u69fc\0\u0154\0\u6a40\0\u6a84\0\u6ac8\0\u0154\0\u6b0c\0\u6b50"+
    "\0\u6b94\0\u0220\0\u6bd8\0\u6c1c\0\u0220\0\u6c60\0\u0220\0\u6ca4"+
    "\0\u6ce8\0\u6d2c\0\u6d70\0\u0220\0\u6db4\0\u6df8\0\u6e3c\0\u0220"+
    "\0\u6e80\0\u6ec4\0\u6f08\0\u6f4c\0\u6f90\0\u6fd4\0\u7018\0\u705c"+
    "\0\u0154\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u71f4\0\u7238"+
    "\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c\0\u73d0\0\u0220\0\u7414"+
    "\0\u7458\0\u749c\0\u74e0\0\u7524\0\u7568\0\u75ac\0\u75f0\0\u7634"+
    "\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788\0\u77cc\0\u0154\0\u7810"+
    "\0\u7854\0\u0154\0\u7898\0\u78dc\0\u7920\0\u0154\0\u7964\0\u79a8"+
    "\0\u79ec\0\u0220\0\u7a30\0\u7a74\0\u0220\0\u7ab8\0\u7afc\0\u7b40"+
    "\0\u0220\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u7c94\0\u0154\0\u7cd8"+
    "\0\u7d1c\0\u7d60\0\u7da4\0\u7de8\0\u7e2c\0\u7e70\0\u0220\0\u7eb4"+
    "\0\u7ef8\0\u7f3c\0\u7f80\0\u7fc4\0\u8008\0\u0154\0\u0154\0\u0154"+
    "\0\u804c\0\u8090\0\u80d4\0\u0154\0\u0220\0\u0220\0\u0220\0\u8118"+
    "\0\u815c\0\u81a0\0\u0220\0\u81e4\0\u0154\0\u8228\0\u826c\0\u82b0"+
    "\0\u82f4\0\u8338\0\u837c\0\u83c0\0\u8404\0\u8448\0\u0220\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\11\1\27\1\30\1\31\1\32\1\33\1\30"+
    "\1\11\1\34\1\11\1\35\1\36\1\30\1\37\1\40"+
    "\1\11\1\41\1\42\1\43\1\6\1\44\1\45\1\11"+
    "\1\46\1\11\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\3\11\27\73"+
    "\2\0\11\73\1\74\4\73\1\75\34\73\1\76\1\77"+
    "\1\100\1\76\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\76\1\111\1\112\1\113\4\76\1\114"+
    "\2\76\3\115\13\76\1\116\2\76\1\117\15\76\1\120"+
    "\13\76\1\121\1\122\1\0\1\123\1\124\1\11\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\11"+
    "\1\135\1\136\1\137\4\11\1\140\1\11\5\0\1\11"+
    "\1\0\1\11\5\0\1\11\4\0\1\141\2\11\1\0"+
    "\1\11\24\0\1\11\1\142\1\11\1\0\25\143\1\0"+
    "\3\144\1\0\1\143\1\0\1\143\5\0\1\143\4\0"+
    "\3\143\1\0\1\143\7\0\1\145\14\0\3\143\105\0"+
    "\1\11\1\146\1\11\1\147\1\11\1\150\1\147\2\11"+
    "\1\151\1\152\1\11\1\153\6\11\1\154\2\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\156\2\11\1\156\6\11\1\157\1\11\1\160\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\161\6\11\1\162\1\163\6\11\1\164"+
    "\2\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\7\11\1\165\1\166\5\11\1\167\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\170\1\11\1\171\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\172\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\3\11"+
    "\1\173\5\11\1\171\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\174\1\175\2\11\1\176"+
    "\1\177\3\11\1\200\3\11\1\165\1\201\2\11\1\202"+
    "\4\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\203\6\11\1\204\12\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\205"+
    "\12\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\206\24\0\3\11"+
    "\1\0\1\11\1\207\24\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\210\14\11\1\210"+
    "\4\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\211\6\11\1\212\5\11\1\213\1\214"+
    "\1\215\5\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\1\11\1\177\2\11\1\177\2\11\1\216"+
    "\1\217\1\11\1\220\4\11\1\221\1\11\1\222\4\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\16\11\1\156\7\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\10\11\1\223\12\11\1\224\2\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\26\0"+
    "\1\30\3\0\1\30\1\225\1\226\3\0\1\30\72\0"+
    "\1\31\55\0\1\227\2\0\1\227\3\0\1\227\1\0"+
    "\1\227\4\0\1\227\6\0\1\227\3\0\1\227\2\0"+
    "\1\227\2\0\1\227\7\0\2\227\72\0\1\230\43\0"+
    "\41\231\1\0\1\232\4\231\1\233\34\231\27\234\2\0"+
    "\11\234\1\235\41\234\45\0\1\236\1\237\14\0\1\240"+
    "\21\0\16\11\1\241\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\242\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\6\0\1\243"+
    "\1\0\1\244\1\0\1\245\41\0\1\246\112\0\1\247"+
    "\62\0\1\250\124\0\1\251\3\0\1\252\77\0\1\253"+
    "\4\0\1\254\104\0\1\255\104\0\1\256\74\0\1\257"+
    "\103\0\1\260\103\0\1\261\20\0\27\73\2\0\11\73"+
    "\1\0\4\73\1\0\34\73\1\0\2\262\10\0\1\262"+
    "\2\0\1\262\17\0\1\263\3\0\1\262\4\0\2\262"+
    "\35\0\1\264\16\0\1\265\74\0\1\266\105\0\1\267"+
    "\1\270\102\0\1\271\2\0\1\272\77\0\1\273\10\0"+
    "\1\274\23\0\1\275\32\0\1\276\17\0\1\277\72\0"+
    "\1\300\3\0\1\301\67\0\1\302\13\0\1\303\3\0"+
    "\1\304\67\0\1\305\4\0\1\306\3\0\1\307\107\0"+
    "\1\310\66\0\1\311\1\0\1\312\1\313\3\0\1\314"+
    "\104\0\1\315\72\0\1\316\3\0\1\317\3\0\1\320"+
    "\6\0\2\321\74\0\1\322\1\0\1\323\2\0\1\324"+
    "\113\0\3\115\120\0\1\325\43\0\1\326\5\0\1\327"+
    "\37\0\1\330\43\0\1\331\2\0\1\332\2\0\1\333"+
    "\76\0\1\334\2\0\2\321\63\0\1\11\1\335\16\11"+
    "\1\336\5\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\337\14\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\13\11\1\340\1\341"+
    "\11\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\13\11\1\342\2\11\1\343\7\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\23\11\1\344"+
    "\2\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\1\345\2\11\1\0\1\11\24\0"+
    "\3\11\1\0\16\11\1\346\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\5\11\1\347\3\11"+
    "\1\350\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\1\11\1\351\1\11\1\0\11\11\1\352\3\11\1\353"+
    "\10\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\354\4\11\1\355\3\11\1\356\13\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\16\11\1\357\7\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\360\1\11\1\361\1\362"+
    "\3\11\1\363\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\364\14\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\365"+
    "\3\11\1\366\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\11\11\1\367\1\11\1\370\2\11"+
    "\1\371\7\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\372\5\11\1\373\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\374\24\0\3\11\1\0\13\11"+
    "\1\375\2\11\1\376\2\11\1\377\4\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\143\3\0"+
    "\2\143\1\0\1\143\2\0\1\143\2\0\1\143\4\0"+
    "\3\143\1\0\1\143\24\0\3\143\27\0\3\144\53\0"+
    "\2\11\1\u0100\13\11\1\u0101\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0102\4\11"+
    "\1\u0102\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0102\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\22\11\1\u0102\3\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0102\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\4\11\1\u0102\21\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\u0102"+
    "\20\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\1\u0101\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0103\2\11\1\u0103"+
    "\21\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u0100\2\11\1\u0100\15\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\3\11\1\u0100"+
    "\1\11\3\u0100\16\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\12\11\1\u0104\13\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\17\11\2\u0102"+
    "\5\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\14\11\1\u0105\11\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\3\u0105\5\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u0103\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\10\11\1\u0101\6\11\1\u0101\6\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\3\11"+
    "\1\u0101\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u0105\13\11\2\u0100\5\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u0106\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\14\11\1\u0101\11\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0107\22\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0101\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\13\11\1\u0101\12\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u0101"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u0100\1\11\1\u0100\1\11\1\u0100\16\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\3\11\1\u0101\13\11\1\u0101\6\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\17\11\2\u0101\5\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0108\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0105\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0100"+
    "\11\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\4\11\1\u0109\21\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u0105\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\14\11"+
    "\1\u0100\1\11\1\u0100\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\u010a\24\0\3\11\1\0\17\11\1\u0100\6\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0101\6\11\2\u0100\5\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\10\11\1\u0100\5\11"+
    "\1\u0100\7\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\16\11\1\u0100\7\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\3\11\1\u0105\22\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u0103\21\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u010b\3\11\1\u0105\16\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0101\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\17\11\1\u0101\6\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u0102"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\14\11\1\u0102\11\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\26\0\1\30\3\0\1\30\1\225"+
    "\4\0\1\30\71\0\1\u010c\3\0\1\u010c\5\0\1\u010c"+
    "\44\0\1\227\2\0\1\227\3\0\1\227\1\0\1\227"+
    "\4\0\1\227\6\0\1\227\3\0\1\227\1\u010d\1\0"+
    "\1\227\2\0\1\227\7\0\2\227\65\0\1\u010e\4\0"+
    "\1\230\104\0\1\u010f\42\0\27\u0110\2\0\10\u0110\1\u0111"+
    "\1\231\41\u0110\1\0\2\u0112\10\0\1\u0112\2\0\1\u0112"+
    "\22\0\1\u010f\1\u0112\4\0\2\u0112\33\0\27\236\2\0"+
    "\53\236\46\237\1\u0113\35\237\1\0\4\11\1\u0114\21\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\10\11\1\u0115\15\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\24\0\1\u0116\23\0\1\u0117\45\0\1\u0118"+
    "\76\0\1\u0119\5\0\1\u011a\103\0\1\u011b\71\0\1\u011c"+
    "\2\0\1\u011c\3\0\1\u011c\1\0\1\u011c\4\0\1\u011c"+
    "\6\0\1\u011c\3\0\1\u011c\2\0\1\u011c\2\0\1\u011c"+
    "\7\0\2\u011c\44\0\1\u011d\107\0\1\u011e\72\0\1\321"+
    "\10\0\1\u011f\100\0\1\u0120\144\0\1\u0121\51\0\1\u0122"+
    "\62\0\1\u0123\112\0\1\321\110\0\1\u0124\6\0\1\321"+
    "\74\0\1\u0125\2\0\2\321\64\0\1\u0126\112\0\1\u0127"+
    "\142\0\1\u0128\47\0\1\u0129\170\0\1\u012a\4\0\1\u012b"+
    "\103\0\1\u012c\120\0\1\u012d\70\0\1\u012e\47\0\1\u012f"+
    "\53\0\1\u0130\65\0\1\u0131\151\0\1\u0132\41\0\1\u0133"+
    "\111\0\1\u0134\74\0\1\334\100\0\1\u0135\106\0\1\u0136"+
    "\116\0\1\u0137\67\0\1\u0138\77\0\1\u0139\77\0\46\325"+
    "\1\u013a\35\325\5\0\1\u013b\100\0\1\u013c\114\0\1\u013d"+
    "\72\0\1\u013e\117\0\1\u013f\73\0\1\u0140\115\0\2\321"+
    "\63\0\11\11\1\u0141\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u0142\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u0143\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u0144\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\u0145\24\0\3\11\1\0\21\11\1\u0146"+
    "\4\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\u0147\25\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\14\11\1\u0148\11\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u0149"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\10\11\1\u014a\15\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\26\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\1\u014b"+
    "\2\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u014c"+
    "\12\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\26\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\1\u014d\2\11\1\0\1\11\1\u014e\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u014f"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\16\11\1\u0150\7\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\u0151\22\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\u0152\24\0\3\11\1\0\23\11"+
    "\1\u0153\2\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u0154\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\u0155\24\0\3\11\1\0\11\11\1\u0156"+
    "\14\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\17\11\1\u0157\6\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\u0158\20\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u0159\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\23\11\1\u015a\2\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\7\11\1\u015b\16\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\3\11\1\u015c\22\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\4\11\1\u015d\21\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\11\1\u015e"+
    "\24\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u015f\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0160\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u0161\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u0162\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\10\11\1\u0163\15\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\25\11\1\u0101\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\u0164\14\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\4\11\1\u0165\21\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0166\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\26\0\1\u010c\3\0\1\u010c\1\u0167\4\0"+
    "\1\u010c\43\0\27\u0110\2\0\11\u0110\1\231\41\u0110\41\0"+
    "\1\u0168\42\0\45\237\1\u0169\1\u0113\35\237\1\0\10\11"+
    "\1\u010a\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u016a\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\15\0\1\u016b\136\0\1\u016c"+
    "\41\0\1\u016d\2\0\1\u016e\102\0\1\u016f\103\0\1\u0170"+
    "\112\0\1\u0171\76\0\1\u0172\145\0\1\u0173\40\0\1\u0174"+
    "\100\0\1\u0175\107\0\1\u0176\105\0\1\u0177\72\0\1\u0178"+
    "\106\0\1\u0179\121\0\1\u017a\133\0\1\u017b\43\0\1\u017c"+
    "\74\0\1\u017d\112\0\1\u017e\113\0\1\u017f\71\0\1\u0180"+
    "\104\0\1\u0181\171\0\1\u0182\56\0\1\u0183\45\0\1\u0172"+
    "\166\0\1\u0184\14\0\1\u0185\72\0\1\u0186\110\0\1\u0187"+
    "\77\0\1\u0188\101\0\45\325\1\u0189\1\u013a\35\325\5\0"+
    "\1\u018a\4\0\1\u018b\75\0\1\u018c\107\0\1\u0172\77\0"+
    "\1\u018d\104\0\1\u018e\77\0\16\11\1\u018f\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u0190\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\u0191"+
    "\24\0\3\11\1\0\10\11\1\u0192\15\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\5\11\1\u0193"+
    "\20\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u0194\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u0195\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\2\11"+
    "\1\u0196\23\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\5\11\1\u0197\20\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\23\11\1\u0198\2\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\u0199\24\0\3\11"+
    "\1\0\13\11\1\u019a\12\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\u019b\21\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u019c\12\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\23\11\1\u019d\2\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u019e\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\12\11\1\u019f\13\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\26\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\1\u01a0\2\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\u01a1\24\0\3\11\1\0\15\11\1\u0190"+
    "\10\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\26\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\1\u01a2\2\11\1\0\11\11\1\u01a3\14\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\1\u01a4\25\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\u01a5\20\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u01a6\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\4\11\1\u01a7"+
    "\4\11\1\u01a8\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u01a9\22\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\u0190"+
    "\16\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u01aa\22\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\4\11\1\u01ab\21\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u0106\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\3\11\1\u01ac\22\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\14\0\1\u01ad\75\0\1\u01ae"+
    "\145\0\1\u0117\45\0\1\u01af\77\0\1\u01b0\107\0\1\u01b1"+
    "\74\0\1\u01b2\102\0\1\u01b3\117\0\1\u0126\135\0\1\u01b4"+
    "\40\0\1\u01b5\100\0\1\u01b6\114\0\1\u01b7\102\0\1\u01b8"+
    "\75\0\1\u01b9\101\0\1\u01ba\111\0\1\u01bb\104\0\1\u01bc"+
    "\110\0\1\u01bd\73\0\1\u01be\105\0\1\u01bf\106\0\1\u01c0"+
    "\72\0\1\u01c1\106\0\1\u01c2\146\0\1\u01c3\47\0\1\u01c4"+
    "\171\0\1\u01c5\14\0\1\u01c6\10\0\1\u01c7\75\0\1\u01c8"+
    "\107\0\1\u01c9\73\0\1\u01ca\72\0\2\11\1\u01cb\23\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\1\11\1\u01cc\24\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\15\11\1\u0149\10\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\26\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\1\u01cd\2\11\1\0\1\11\24\0\3\11\1\0"+
    "\4\11\1\u01ce\21\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u01cf\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\12\11\1\u01d0"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u01d1\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\3\11\1\u01d2\22\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\1\11"+
    "\1\u01d3\24\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\7\11\1\u01d4\16\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\10\11\1\u01d5\15\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\15\11\1\u01d6\10\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u01d7\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\7\11\1\u01d8"+
    "\16\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u01d9\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u01da\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\4\11"+
    "\1\u01db\21\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\1\u01dc\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u01dd\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\26\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\1\11\1\u01de"+
    "\1\11\1\0\12\11\1\u01df\10\11\1\u01e0\2\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u01e1\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\21\11\1\u01e2\4\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u01e3\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\2\11\1\u01e4\1\0\1\11\24\0"+
    "\3\11\2\0\1\u01e5\114\0\1\u01e6\140\0\1\u01af\103\0"+
    "\1\u01e7\46\0\1\u01e8\76\0\1\u01e9\113\0\1\u01ea\77\0"+
    "\1\u01eb\104\0\1\u01ec\106\0\1\u01ed\73\0\1\u01ee\103\0"+
    "\1\u01ef\112\0\1\u01f0\101\0\1\u01f1\103\0\1\u01f2\104\0"+
    "\1\u01f3\105\0\1\u01f4\101\0\1\u01f5\110\0\1\u01f6\101\0"+
    "\1\u01f7\100\0\1\u01f8\75\0\1\u01f9\76\0\12\11\1\u01fa"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u01fb\20\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u01fc\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\11\11"+
    "\1\u01fd\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u01fe\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u01ff\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\5\11\1\u0200\20\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\5\11\1\u0201\20\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\14\11\1\u0202"+
    "\11\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\12\11\1\u0203\13\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\12\11\1\u0204\13\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\13\11"+
    "\1\u0205\12\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0206\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\13\11\1\u0207\12\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\20\11\1\u0208\5\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\16\11\1\u0209\7\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\13\11\1\u020a"+
    "\12\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\5\11\1\u020b\20\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\14\11\1\u020c\11\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\16\0\1\u020d"+
    "\77\0\1\u01e7\76\0\1\u020e\112\0\1\u020f\105\0\1\u0210"+
    "\135\0\1\u0211\46\0\1\u0212\107\0\1\u0213\100\0\1\u0214"+
    "\73\0\1\u0215\10\0\1\u0216\100\0\1\u0217\75\0\1\u0218"+
    "\123\0\1\u0219\67\0\1\u021a\107\0\1\u021b\70\0\4\11"+
    "\1\u021c\21\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\13\11\1\u021d\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\15\11\1\u021e\10\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\26\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\1\u021f\2\11\1\0\1\11\24\0"+
    "\3\11\1\0\12\11\1\u0220\13\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\16\11\1\u0221\7\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\13\11\1\u0222\12\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u0223\10\11\1\u0224\11\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\11\11\1\u0225\14\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\3\11\1\u0226\22\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\23\11\1\u0227"+
    "\2\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\7\11\1\u0228\16\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\13\11\1\u0229\12\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u022a\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\6\0\1\u01b0\5\0\1\u022b\74\0\1\u0172\111\0"+
    "\1\u022c\100\0\1\u022d\3\0\1\u022e\170\0\1\u022f\6\0"+
    "\1\u0230\201\0\1\u01f2\15\0\1\u0231\73\0\1\u0232\101\0"+
    "\1\u0233\104\0\1\u01f2\112\0\1\u0234\77\0\1\u0235\110\0"+
    "\1\u0236\71\0\4\11\1\u0190\21\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\12\11\1\u0237\13\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\7\11\1\u0238\3\11\1\u0239\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\1\u023a\2\11\1\0\3\11"+
    "\1\u023b\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\1\11\1\u0204\1\11\1\0\13\11\1\u023c\12\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\3\11\1\u023d\22\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u023e\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\1\0\2\11\1\u0204"+
    "\23\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\11\11\1\u023f\14\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\5\11\1\u0240\20\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\12\11"+
    "\1\u0241\13\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\15\11\1\u0242\10\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\13\0\1\u0243\74\0\1\u0244"+
    "\111\0\1\u0245\145\0\1\u0246\41\0\1\u0247\115\0\1\u0248"+
    "\61\0\1\u0249\112\0\1\u024a\142\0\1\u024b\34\0\3\11"+
    "\1\u024c\22\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\11\11\1\u024d\14\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\26\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\u024e\24\0\3\11\1\0\11\11\1\u024f"+
    "\14\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\23\11\1\u0250\2\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\1\11\1\u0251\24\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\10\11"+
    "\1\u0252\15\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\1\u0253\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u0254\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\4\0\1\u0255"+
    "\111\0\1\u0256\141\0\1\u0257\51\0\1\u0258\111\0\1\u0259"+
    "\73\0\1\u025a\104\0\1\u025b\107\0\1\u025c\63\0\11\11"+
    "\1\u025d\14\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\26\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\1\u025e\2\11\1\0"+
    "\1\11\24\0\3\11\1\0\15\11\1\u025f\10\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\23\11"+
    "\1\u0260\2\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\1\0\13\11\1\u0261\12\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\14\11\1\u0262\11\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11\1\0"+
    "\20\11\1\u0263\5\11\3\0\2\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\155\3\0\3\11\1\0\1\11"+
    "\24\0\3\11\1\0\1\11\1\u0264\24\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\12\0\1\u0265\110\0"+
    "\1\u0266\66\0\1\u0211\120\0\1\u0267\65\0\16\11\1\u0268"+
    "\7\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\1\11\1\u021f\24\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\16\11\1\u0269\7\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\1\11\1\155"+
    "\3\0\3\11\1\0\1\11\24\0\3\11\1\0\15\11"+
    "\1\u026a\10\11\3\0\2\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\155\3\0\3\11\1\0\1\11\24\0"+
    "\3\11\13\0\1\u026b\74\0\1\u026c\100\0\12\11\1\u026d"+
    "\13\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\155\3\0\3\11\1\0\1\11\24\0\3\11"+
    "\1\0\3\11\1\u026e\22\11\3\0\2\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\155\3\0\3\11\1\0"+
    "\1\11\24\0\3\11\1\0\25\11\1\u026f\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\155\3\0"+
    "\3\11\1\0\1\11\24\0\3\11\10\0\1\u0232\105\0"+
    "\1\u01f2\72\0\7\11\1\u0270\16\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\155\3\0\3\11"+
    "\1\0\1\11\24\0\3\11\1\0\11\11\1\u0204\14\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\155\3\0\3\11\1\0\1\11\24\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\22\1\1\11\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\3\1\6\11\2\1\2\11\4\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\0\1\11\21\1\1\11"+
    "\24\1\1\11\7\1\1\11\47\1\2\0\2\1\4\0"+
    "\1\11\2\1\1\11\2\1\4\0\14\11\2\0\1\1"+
    "\6\0\1\1\1\11\4\0\1\1\7\0\1\11\2\0"+
    "\1\1\3\0\1\11\3\0\1\1\3\0\1\1\2\0"+
    "\61\1\2\0\1\11\1\0\1\1\2\0\2\1\1\0"+
    "\1\11\4\0\1\1\4\0\1\11\4\0\1\11\25\0"+
    "\1\11\4\0\46\1\1\0\2\11\1\1\7\0\1\11"+
    "\5\0\1\11\4\0\1\11\1\0\1\11\11\0\1\11"+
    "\2\1\3\0\36\1\2\0\1\11\2\0\1\11\2\0"+
    "\1\11\4\0\1\1\2\0\1\1\2\0\1\11\3\0"+
    "\1\11\4\0\2\11\32\1\2\0\2\11\1\0\1\1"+
    "\1\11\1\0\1\11\4\0\1\11\1\0\1\1\1\0"+
    "\1\11\3\0\24\1\2\0\1\1\1\11\12\0\17\1"+
    "\4\0\1\11\2\0\1\11\3\0\1\11\14\1\4\0"+
    "\1\11\4\0\11\1\1\0\3\11\3\0\1\11\10\1"+
    "\1\11\2\0\3\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*
* Return to initial state iff we are in post-mnemonic or post-dot
*/
private void pm() {
    if ((zzLexicalState == POST_MNEMONIC) || (zzLexicalState == POST_DOT)) {
        yybegin(YYINITIAL);
    }
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 140: break;
          case 2: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 141: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 142: break;
          case 4: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LINE_BREAK;
            } 
            // fall through
          case 143: break;
          case 5: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 144: break;
          case 6: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        } else if (zzLexicalState != POST_DOT) {
            yybegin(POST_DOT);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 145: break;
          case 7: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 146: break;
          case 8: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 147: break;
          case 9: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 148: break;
          case 10: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 149: break;
          case 11: 
            { pm(); return KickAssemblerTypes.LEFT_PAREN;
            } 
            // fall through
          case 150: break;
          case 12: 
            { pm(); return KickAssemblerTypes.RIGHT_PAREN;
            } 
            // fall through
          case 151: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 152: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 153: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 154: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 155: break;
          case 17: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 156: break;
          case 18: 
            { pm(); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 157: break;
          case 19: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 158: break;
          case 20: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 159: break;
          case 21: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 160: break;
          case 22: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 161: break;
          case 23: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 162: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 163: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 164: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 165: break;
          case 27: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 166: break;
          case 28: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 167: break;
          case 29: 
            { pm(); return KickAssemblerTypes.BANG;
            } 
            // fall through
          case 168: break;
          case 30: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 169: break;
          case 31: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 170: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 171: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 172: break;
          case 34: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 173: break;
          case 35: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 174: break;
          case 36: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 175: break;
          case 37: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 176: break;
          case 38: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 177: break;
          case 39: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.AT;
            } 
            // fall through
          case 178: break;
          case 40: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 179: break;
          case 41: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 180: break;
          case 42: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 181: break;
          case 43: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 182: break;
          case 44: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 183: break;
          case 45: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 184: break;
          case 46: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 185: break;
          case 47: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 186: break;
          case 48: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 187: break;
          case 49: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 188: break;
          case 50: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 189: break;
          case 51: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 190: break;
          case 52: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 191: break;
          case 53: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 192: break;
          case 54: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 193: break;
          case 55: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 194: break;
          case 56: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 195: break;
          case 57: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 196: break;
          case 58: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 197: break;
          case 59: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 198: break;
          case 60: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 199: break;
          case 61: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 200: break;
          case 62: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 201: break;
          case 63: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 202: break;
          case 64: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC0;
            } 
            // fall through
          case 203: break;
          case 65: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_ILLEGAL;
            } 
            // fall through
          case 204: break;
          case 66: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC1;
            } 
            // fall through
          case 205: break;
          case 67: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC_012;
            } 
            // fall through
          case 206: break;
          case 68: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC12;
            } 
            // fall through
          case 207: break;
          case 69: 
            { return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 208: break;
          case 70: 
            { pm(); return KickAssemblerTypes.CHAR;
            } 
            // fall through
          case 209: break;
          case 71: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IF;
            } 
            // fall through
          case 210: break;
          case 72: 
            { return KickAssemblerTypes.ESCAPE_HEX;
            } 
            // fall through
          case 211: break;
          case 73: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 212: break;
          case 74: 
            { yybegin(SYMBOL_DEF); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 213: break;
          case 75: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 214: break;
          case 76: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 215: break;
          case 77: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 216: break;
          case 78: 
            { pm(); return KickAssemblerTypes.ELSE;
            } 
            // fall through
          case 217: break;
          case 79: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 218: break;
          case 80: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 219: break;
          case 81: 
            { pm(); return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 220: break;
          case 82: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 221: break;
          case 83: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 222: break;
          case 84: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 223: break;
          case 85: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 224: break;
          case 86: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 225: break;
          case 87: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 226: break;
          case 88: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 227: break;
          case 89: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 228: break;
          case 90: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 229: break;
          case 91: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 230: break;
          case 92: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 231: break;
          case 93: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 232: break;
          case 94: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 233: break;
          case 95: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 234: break;
          case 96: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 235: break;
          case 97: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 236: break;
          case 98: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 237: break;
          case 99: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 238: break;
          case 100: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 239: break;
          case 101: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 240: break;
          case 102: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 241: break;
          case 103: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 242: break;
          case 104: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 243: break;
          case 105: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_DEF;
            } 
            // fall through
          case 244: break;
          case 106: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 245: break;
          case 107: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 246: break;
          case 108: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 247: break;
          case 109: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 248: break;
          case 110: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 249: break;
          case 111: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 250: break;
          case 112: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 251: break;
          case 113: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 252: break;
          case 114: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 253: break;
          case 115: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_STRUCT;
            } 
            // fall through
          case 254: break;
          case 116: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 255: break;
          case 117: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 256: break;
          case 118: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 257: break;
          case 119: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 258: break;
          case 120: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 259: break;
          case 121: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 260: break;
          case 122: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 261: break;
          case 123: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 262: break;
          case 124: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 263: break;
          case 125: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 264: break;
          case 126: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 265: break;
          case 127: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOPC;
            } 
            // fall through
          case 266: break;
          case 128: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 267: break;
          case 129: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 268: break;
          case 130: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 269: break;
          case 131: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 270: break;
          case 132: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 271: break;
          case 133: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 272: break;
          case 134: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 273: break;
          case 135: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 274: break;
          case 136: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 275: break;
          case 137: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 276: break;
          case 138: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 277: break;
          case 139: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PSEUDOCOMMAND;
            } 
            // fall through
          case 278: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
