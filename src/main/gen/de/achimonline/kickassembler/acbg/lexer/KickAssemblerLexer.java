/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */

class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_ESCAPE = 2;
  public static final int POST_MNEMONIC = 4;
  public static final int MNEMONIC_SUFFIX = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\21\1\34\1\6\1\10\1\116\1\0\1\103"+
    "\1\104\1\20\1\14\1\112\1\15\1\5\1\17\2\11\1\33\7\3\1\16\1\113\1\114\1\111"+
    "\1\115\1\122\1\123\1\55\1\22\1\57\1\56\1\67\1\7\1\12\1\60\1\71\1\102\1\75"+
    "\1\62\1\73\1\64\1\100\1\74\1\70\1\63\1\65\1\72\1\27\1\76\1\12\1\61\1\77\1"+
    "\12\1\107\1\125\1\110\1\120\1\4\1\0\1\23\1\46\1\26\1\35\1\36\1\37\1\45\1\53"+
    "\1\25\1\101\1\47\1\41\1\42\1\40\1\43\1\30\1\66\1\32\1\24\1\31\1\44\1\52\1"+
    "\51\1\54\1\50\1\124\1\105\1\117\1\106\1\121\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\10\4\1\14"+
    "\27\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\1\1\35\1\36\1\0\1\37\1\40\2\41"+
    "\1\40\2\0\1\42\20\0\2\3\1\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\0\1\55\37\4\4\0\35\4\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\0\1\41"+
    "\1\0\1\41\2\0\1\40\1\3\4\0\1\67\4\0"+
    "\1\70\2\0\1\71\3\0\1\71\15\0\1\71\1\0"+
    "\1\71\5\0\1\4\2\72\1\4\1\73\5\0\2\4"+
    "\7\0\1\74\16\0\1\75\14\0\1\76\1\53\1\4"+
    "\1\77\6\0\1\100\11\0\1\71\1\0\1\101\3\0"+
    "\1\102\1\103\1\104\1\71\12\0\1\4\3\0\1\105"+
    "\4\0\1\106\3\0\1\106\7\0\1\107\2\0\1\110"+
    "\1\111\1\112\1\4\1\0\1\113\1\114\1\0\1\115"+
    "\2\0\1\106\1\116\1\117\10\0\1\120\1\4\1\121"+
    "\1\0\1\122\4\0\1\123\7\0\1\4\6\0\1\124"+
    "\2\0\1\125\1\0\1\4\10\0\1\126\1\4\2\0"+
    "\1\127\1\104\1\130\2\0\1\131\1\4\1\132\2\0"+
    "\1\4\2\0\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u0102\0\u045e\0\u0102"+
    "\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be"+
    "\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e"+
    "\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e"+
    "\0\u0f74\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0fca"+
    "\0\u0102\0\u0102\0\u1020\0\u1076\0\u10cc\0\u1122\0\u0102\0\u0102"+
    "\0\u0102\0\u1178\0\u11ce\0\u0102\0\u1224\0\u0102\0\u127a\0\u12d0"+
    "\0\u1326\0\u137c\0\u13d2\0\u1428\0\u0102\0\u147e\0\u14d4\0\u152a"+
    "\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da"+
    "\0\u1830\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a"+
    "\0\u1ae0\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u1b36"+
    "\0\u1b8c\0\u0102\0\u04b4\0\u0102\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4"+
    "\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94"+
    "\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u2244"+
    "\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e\0\u24f4"+
    "\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4"+
    "\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54"+
    "\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04"+
    "\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4"+
    "\0\u300a\0\u3060\0\u30b6\0\u310c\0\u0102\0\u0102\0\u0102\0\u0102"+
    "\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u3162\0\u0102\0\u31b8"+
    "\0\u320e\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468"+
    "\0\u34be\0\u0102\0\u3514\0\u356a\0\u35c0\0\u3616\0\u0102\0\u366c"+
    "\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c"+
    "\0\u3972\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc"+
    "\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c"+
    "\0\u19de\0\u1a34\0\u3ed2\0\u3f28\0\u0204\0\u3f7e\0\u3fd4\0\u0102"+
    "\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u3310"+
    "\0\u3366\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u0102\0\u4432"+
    "\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u3dd0"+
    "\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u0102\0\u4890\0\u48e6"+
    "\0\u493c\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u4aea\0\u4b40\0\u4b96"+
    "\0\u4bec\0\u4c42\0\u0102\0\u0102\0\u4c98\0\u0204\0\u4cee\0\u4d44"+
    "\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u0204\0\u4ef2\0\u4f48\0\u4f9e"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u0102\0\u51f8"+
    "\0\u0102\0\u524e\0\u52a4\0\u52fa\0\u0102\0\u0102\0\u5350\0\u53a6"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656"+
    "\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u0102\0\u58b0"+
    "\0\u5906\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60"+
    "\0\u5bb6\0\u5c0c\0\u5c62\0\u3870\0\u5cb8\0\u5d0e\0\u5d64\0\u0102"+
    "\0\u5dba\0\u5e10\0\u0102\0\u0102\0\u0102\0\u5e66\0\u5ebc\0\u5f12"+
    "\0\u0102\0\u5f68\0\u5fbe\0\u6014\0\u606a\0\u0102\0\u0102\0\u0102"+
    "\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a"+
    "\0\u0102\0\u6370\0\u63c6\0\u641c\0\u6472\0\u64c8\0\u651e\0\u6574"+
    "\0\u65ca\0\u0102\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778\0\u67ce"+
    "\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u6a28\0\u6a7e"+
    "\0\u0102\0\u6ad4\0\u6b2a\0\u0102\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82"+
    "\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u0102\0\u6edc"+
    "\0\u6f32\0\u6f88\0\u0102\0\u0102\0\u0102\0\u6fde\0\u7034\0\u0102"+
    "\0\u708a\0\u0102\0\u70e0\0\u7136\0\u718c\0\u71e2\0\u7238\0\u0204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\7\1\12"+
    "\1\6\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\7\1\27"+
    "\1\30\1\31\1\6\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\7\1\40\2\7\1\41\5\7\1\42\1\43"+
    "\1\44\1\45\1\7\1\46\1\47\1\50\1\51\1\52"+
    "\1\7\1\53\1\7\1\54\1\55\1\7\1\56\3\7"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\7\1\4\1\103\1\0"+
    "\17\103\1\104\103\103\1\105\23\106\1\107\1\106\1\110"+
    "\4\106\1\111\71\106\1\112\1\106\127\0\2\5\126\0"+
    "\1\6\1\113\1\114\3\0\1\6\21\0\1\6\75\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\12\7\1\0\46\7\21\0\1\7\24\0\1\116\1\117"+
    "\1\120\1\121\1\0\1\122\1\123\1\124\2\0\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\3\0\1\133\2\0"+
    "\1\134\1\135\56\0\1\136\3\0\1\136\1\0\1\136"+
    "\10\0\2\136\2\0\1\136\4\0\1\136\1\0\3\136"+
    "\6\0\1\136\6\0\3\136\7\0\1\136\47\0\1\137"+
    "\120\0\1\140\2\0\1\140\2\0\1\140\1\0\2\141"+
    "\1\142\3\0\11\140\2\0\46\140\6\0\1\143\12\0"+
    "\1\140\15\0\1\144\74\0\1\145\31\0\1\146\73\0"+
    "\1\147\33\0\1\150\1\151\70\0\1\152\14\0\1\153"+
    "\1\0\17\153\1\154\104\153\3\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\1\7\1\155\10\7"+
    "\1\0\22\7\1\156\3\7\1\157\1\160\2\7\1\161"+
    "\1\7\1\162\1\7\1\163\1\164\1\7\1\156\4\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\2\7\1\165\5\7\1\166\1\7"+
    "\1\0\1\167\2\7\1\170\1\166\11\7\1\171\1\172"+
    "\26\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\1\7\1\173\1\7\1\166"+
    "\3\7\1\174\1\175\1\7\1\0\1\7\1\176\2\7"+
    "\1\177\4\7\1\200\4\7\1\201\27\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\2\7\1\167\7\7\1\0\3\7\1\202\42\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\6\7\1\201\3\7\1\0\4\7"+
    "\1\203\1\204\40\7\21\0\1\7\4\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\12\7\1\0"+
    "\4\7\1\205\11\7\1\205\27\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\1\7\1\206\1\171\5\7\1\207\1\7\1\0\13\7"+
    "\1\210\3\7\1\211\26\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\7\7"+
    "\1\212\1\210\1\7\1\0\4\7\1\210\1\7\1\213"+
    "\37\7\21\0\1\7\26\0\1\214\7\0\1\215\1\216"+
    "\5\0\1\217\64\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\4\7\1\204\5\7\1\0\1\7"+
    "\1\202\44\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\6\7"+
    "\1\166\37\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\1\7\1\220\10\7"+
    "\1\0\46\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\6\7"+
    "\1\204\1\221\36\7\21\0\1\7\4\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\1\7\1\222"+
    "\1\166\7\7\1\0\1\174\45\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\10\7\1\210\1\7\1\0\46\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\3\7\1\223\1\224\1\7\1\165\1\7\1\225\1\7"+
    "\1\0\1\7\1\226\1\7\1\175\1\7\1\227\7\7"+
    "\1\224\30\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\1\7\1\210\10\7"+
    "\1\0\46\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\21\7"+
    "\1\230\1\7\1\231\1\232\2\233\1\234\1\164\15\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\22\7\1\235\7\7"+
    "\1\236\13\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\25\7"+
    "\1\237\10\7\1\235\1\240\6\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\12\7\1\0\20\7\1\241\25\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\12\7\1\0\20\7\1\242\1\243\6\7\1\233\15\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\25\7\2\241\6\7"+
    "\1\244\5\7\1\245\2\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\43\7\1\235\2\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\1\246"+
    "\11\7\1\0\20\7\1\247\2\7\1\240\1\7\1\250"+
    "\1\160\3\7\1\251\1\7\1\233\1\243\10\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\43\7\1\233\2\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\27\7\1\236\1\230\15\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\20\7\1\252\3\7"+
    "\1\253\3\7\1\231\11\7\1\241\3\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\23\7\1\254\1\7\1\254\20\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\26\7\1\241\17\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\2\7\1\166\7\7\1\0\5\7"+
    "\1\204\40\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\30\7"+
    "\1\233\5\7\1\235\7\7\21\0\1\7\112\0\1\255"+
    "\125\0\1\256\2\0\1\257\122\0\1\260\3\0\1\261"+
    "\126\0\1\262\126\0\1\263\27\0\1\264\104\0\1\103"+
    "\1\0\17\103\1\0\103\103\22\0\1\265\7\0\2\265"+
    "\4\0\2\265\5\0\1\265\56\0\1\265\46\0\1\266"+
    "\1\0\1\267\3\0\1\267\111\0\1\270\1\0\1\271"+
    "\61\0\1\272\37\0\1\273\117\0\1\274\17\0\1\267"+
    "\3\0\1\267\54\0\1\6\1\113\4\0\1\6\21\0"+
    "\1\6\75\0\1\275\5\0\1\275\21\0\1\275\116\0"+
    "\1\276\14\0\1\277\115\0\1\300\4\0\1\301\126\0"+
    "\1\302\2\0\1\303\113\0\1\304\12\0\1\305\106\0"+
    "\1\306\1\0\1\307\3\0\1\310\6\0\1\311\122\0"+
    "\1\312\125\0\1\313\114\0\1\314\10\0\1\315\12\0"+
    "\1\316\106\0\1\317\5\0\1\320\11\0\1\321\100\0"+
    "\1\322\15\0\1\323\1\324\104\0\1\325\125\0\1\326"+
    "\17\0\1\327\105\0\1\330\12\0\1\331\4\0\1\332"+
    "\114\0\1\333\15\0\1\334\100\0\1\335\17\0\1\336"+
    "\7\0\1\337\75\0\1\340\105\0\1\136\1\341\2\0"+
    "\1\136\1\0\1\136\10\0\2\136\2\0\1\136\4\0"+
    "\1\136\1\0\3\136\6\0\1\136\6\0\3\136\7\0"+
    "\1\136\42\0\1\342\4\0\1\137\117\0\2\140\2\0"+
    "\1\140\1\0\2\140\1\0\2\141\1\142\3\0\12\140"+
    "\1\0\46\140\21\0\1\140\15\0\2\141\110\0\1\150"+
    "\1\0\124\150\20\151\1\343\105\151\3\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\2\7\1\344"+
    "\7\7\1\0\46\7\21\0\1\7\4\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\12\7\1\0"+
    "\22\7\1\345\5\7\1\345\15\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\12\7\1\0\20\7\1\345\17\7\1\345\5\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\32\7\1\345\13\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\33\7\1\345\12\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\35\7\1\345\10\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\34\7\1\345\11\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\25\7\1\345\20\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\4\7\1\345\41\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\10\7\1\345\1\7\1\0\46\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\4\7\1\345\5\7\1\0\46\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\4\7\1\346\5\7\1\0\1\345\45\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\17\7\1\345\26\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\2\7\1\345\7\7\1\0\46\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\4\7\1\345\5\7\1\0\17\7"+
    "\1\345\26\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\1\7\1\345\10\7"+
    "\1\0\13\7\1\345\3\7\1\345\26\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\1\7\1\345\44\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\3\7\2\345\5\7\1\0\1\345\45\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\6\7\1\345\37\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\4\7\1\346\5\7\1\0\46\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\12\7\1\0\13\7\1\345\3\7\1\345"+
    "\26\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\4\7\1\345\5\7\1\0"+
    "\13\7\1\345\3\7\1\345\26\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\3\7\2\345\5\7\1\0\1\345\14\7\1\345\30\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\6\7\1\345\3\7\1\0\46\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\1\7\1\345\4\7\1\345\3\7"+
    "\1\0\46\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\2\7\1\345\7\7"+
    "\1\0\13\7\1\345\3\7\1\345\26\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\7\7\1\347\36\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\1\7\1\345\10\7\1\0\46\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\1\7\2\345\7\7\1\0\46\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\2\7\2\345\6\7\1\0\46\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\10\7\1\345\1\7\1\0\4\7\1\345\41\7"+
    "\21\0\1\7\40\0\1\350\2\0\1\351\121\0\1\352"+
    "\127\0\1\353\1\354\124\0\1\355\70\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\12\7\1\0"+
    "\4\7\1\356\41\7\21\0\1\7\4\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\12\7\1\0"+
    "\4\7\1\357\41\7\21\0\1\7\4\0\2\7\2\0"+
    "\1\7\1\0\2\7\3\0\1\115\3\0\2\7\1\345"+
    "\7\7\1\0\17\7\1\345\26\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\7\7\1\345\2\7\1\0\46\7\21\0\1\7\4\0"+
    "\2\7\2\0\1\7\1\0\2\7\3\0\1\115\3\0"+
    "\2\7\1\345\1\7\1\345\5\7\1\0\46\7\21\0"+
    "\1\7\4\0\2\7\2\0\1\7\1\0\2\7\3\0"+
    "\1\115\3\0\1\7\1\345\10\7\1\0\12\7\1\345"+
    "\33\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\31\7\1\345"+
    "\14\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\3\7\1\345\6\7\1\0"+
    "\46\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\22\7\1\345"+
    "\23\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\24\7\1\345"+
    "\21\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\30\7\1\345"+
    "\15\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\26\7\1\345"+
    "\17\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\21\7\1\345"+
    "\1\346\23\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\37\7"+
    "\1\345\6\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\22\7"+
    "\1\345\1\7\1\345\15\7\1\345\3\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\21\7\2\345\11\7\1\345\4\7"+
    "\1\345\4\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\24\7"+
    "\1\345\15\7\1\345\3\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\20\7\1\345\25\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\24\7\1\345\3\7\1\345\15\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\20\7\1\345\3\7\1\345\15\7"+
    "\1\345\3\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\12\7\1\0\30\7"+
    "\1\345\3\7\1\345\11\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\25\7\2\345\17\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\22\7\1\346\23\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\22\7\1\345\1\7\1\345\21\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\43\7\1\345\2\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\21\7\2\345\11\7\1\345\11\7"+
    "\21\0\1\7\4\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\12\7\1\0\24\7\1\345\3\7"+
    "\1\345\11\7\1\345\3\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\20\7\1\345\7\7\1\345\15\7\21\0\1\7"+
    "\4\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\12\7\1\0\20\7\1\345\16\7\1\345\6\7"+
    "\21\0\1\7\25\0\1\274\136\0\1\267\132\0\1\267"+
    "\113\0\1\360\17\0\1\267\3\0\1\267\112\0\1\267"+
    "\134\0\1\267\3\0\1\267\54\0\1\275\1\361\4\0"+
    "\1\275\21\0\1\275\116\0\1\362\126\0\1\363\132\0"+
    "\1\364\140\0\1\365\110\0\1\366\141\0\1\367\121\0"+
    "\1\370\123\0\1\371\114\0\1\372\144\0\1\373\135\0"+
    "\1\374\102\0\1\375\120\0\1\376\140\0\1\377\131\0"+
    "\1\u0100\114\0\1\u0101\121\0\1\u0102\15\0\1\u0103\104\0"+
    "\1\u0104\143\0\1\u0105\116\0\1\u0106\133\0\1\u0107\127\0"+
    "\1\u0108\131\0\1\u0109\132\0\1\u010a\100\0\1\u010b\141\0"+
    "\1\u010c\120\0\1\u010d\126\0\1\u010e\120\0\1\u010f\125\0"+
    "\1\u0110\126\0\1\u0111\120\0\1\u0112\132\0\1\u0113\73\0"+
    "\17\151\1\u0114\1\343\105\151\3\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\3\7\1\u0115\6\7"+
    "\1\0\46\7\21\0\1\7\4\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\11\7\1\345\1\0"+
    "\46\7\21\0\1\7\4\0\2\7\2\0\1\7\1\0"+
    "\2\7\3\0\1\115\3\0\12\7\1\0\1\7\1\u0116"+
    "\44\7\21\0\1\7\31\0\1\u0117\134\0\1\u0118\123\0"+
    "\1\u0119\114\0\1\u011a\1\u011b\135\0\1\u011c\73\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\2\7"+
    "\1\347\7\7\1\0\46\7\21\0\1\7\4\0\2\7"+
    "\2\0\1\7\1\0\2\7\3\0\1\115\3\0\12\7"+
    "\1\0\4\7\1\u011d\41\7\21\0\1\7\37\0\1\u011e"+
    "\134\0\1\u011f\124\0\1\u0120\123\0\1\u0121\126\0\1\u0122"+
    "\106\0\1\u0123\145\0\1\u0124\121\0\1\u0125\132\0\1\u0126"+
    "\111\0\1\u0127\140\0\1\u0128\130\0\1\u0129\103\0\1\u012a"+
    "\143\0\1\u012b\125\0\1\u012c\124\0\1\u012d\124\0\1\u012e"+
    "\122\0\1\u012f\2\0\1\u0130\112\0\1\u0131\135\0\1\u0132"+
    "\125\0\1\u0133\114\0\1\u0134\132\0\1\u0135\141\0\1\u0136"+
    "\104\0\1\u0137\123\0\1\u0138\140\0\1\u0127\115\0\1\u0139"+
    "\134\0\1\u0127\131\0\1\u013a\67\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\4\7\1\u013b\5\7"+
    "\1\0\46\7\21\0\1\7\44\0\1\u013c\107\0\1\u013d"+
    "\125\0\1\u011b\136\0\1\350\126\0\1\350\124\0\1\u011b"+
    "\121\0\1\u013e\133\0\1\u013f\113\0\1\u0140\135\0\1\u0141"+
    "\121\0\1\u0142\124\0\1\u0113\131\0\1\u0143\121\0\1\u0144"+
    "\121\0\1\u0145\132\0\1\u0146\133\0\1\u0147\117\0\1\u0148"+
    "\130\0\1\u0149\130\0\1\u014a\1\0\1\u014b\134\0\1\u014c"+
    "\105\0\1\u014d\120\0\1\u014e\142\0\1\u0113\123\0\1\u014f"+
    "\131\0\1\u0150\123\0\1\u0151\123\0\1\u0152\135\0\1\u0153"+
    "\131\0\1\u0154\110\0\1\u0155\72\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\5\7\1\u0156\4\7"+
    "\1\0\46\7\21\0\1\7\33\0\1\u0157\133\0\1\u011a"+
    "\116\0\1\u0158\125\0\1\u0159\134\0\1\u015a\116\0\1\u015b"+
    "\137\0\1\u015c\122\0\1\u015d\125\0\1\u015e\125\0\1\u015f"+
    "\123\0\1\u0160\114\0\1\u0161\125\0\1\u0162\123\0\1\u0163"+
    "\145\0\1\u0164\107\0\1\u0165\130\0\1\u0166\122\0\1\u0167"+
    "\143\0\1\u0168\132\0\1\u0169\60\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\6\7\1\u016a\3\7"+
    "\1\0\46\7\21\0\1\7\32\0\1\u016b\132\0\1\u016c"+
    "\120\0\1\u016d\137\0\1\u016e\110\0\1\u016f\1\0\1\u0170"+
    "\140\0\1\u0171\121\0\1\u0172\126\0\1\u0173\127\0\1\u0174"+
    "\120\0\1\u0175\133\0\1\u0176\105\0\1\u0177\143\0\1\u0178"+
    "\112\0\1\u0179\102\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\2\7\1\u017a\7\7\1\0\46\7"+
    "\21\0\1\7\26\0\1\u011b\15\0\1\u017b\114\0\1\u017c"+
    "\130\0\1\u017d\5\0\1\u017e\122\0\1\u017f\130\0\1\u0180"+
    "\110\0\1\u0159\150\0\1\u015e\121\0\1\u0181\116\0\1\u0182"+
    "\114\0\1\u0183\140\0\1\u0184\113\0\1\u0185\140\0\1\u0127"+
    "\133\0\1\u015e\61\0\2\7\2\0\1\7\1\0\2\7"+
    "\3\0\1\115\3\0\7\7\1\u0186\2\7\1\0\46\7"+
    "\21\0\1\7\41\0\1\u0187\117\0\1\u0188\131\0\1\u0189"+
    "\133\0\1\u018a\107\0\1\u018b\141\0\1\u018c\107\0\1\u018d"+
    "\140\0\1\u018e\124\0\1\u018f\72\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\1\7\1\u0190\10\7"+
    "\1\0\46\7\21\0\1\7\27\0\1\u0191\142\0\1\u0192"+
    "\121\0\1\u0193\117\0\1\u0194\132\0\1\u0195\131\0\1\u0196"+
    "\113\0\1\u0197\145\0\1\u0198\60\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\10\7\1\u0199\1\7"+
    "\1\0\46\7\21\0\1\7\37\0\1\u019a\121\0\1\u0172"+
    "\116\0\1\u019b\125\0\1\u019c\105\0\2\7\2\0\1\7"+
    "\1\0\2\7\3\0\1\115\3\0\7\7\1\u019d\2\7"+
    "\1\0\46\7\21\0\1\7\41\0\1\u019e\113\0\1\u019f"+
    "\102\0\2\7\2\0\1\7\1\0\2\7\3\0\1\115"+
    "\3\0\11\7\1\u01a0\1\0\46\7\21\0\1\7\36\0"+
    "\1\u0159\126\0\1\u015e\67\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29326];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\1\11\1\1\1\11\41\1\6\11"+
    "\1\1\2\11\4\1\3\11\2\1\1\11\1\0\1\11"+
    "\4\1\2\0\1\11\20\0\2\1\1\0\1\1\6\11"+
    "\2\1\1\11\1\0\1\11\37\1\4\0\35\1\11\11"+
    "\1\0\1\11\1\0\1\1\2\0\2\1\4\0\1\11"+
    "\4\0\1\11\2\0\1\1\3\0\1\1\15\0\1\1"+
    "\1\0\1\1\5\0\4\1\1\11\5\0\2\1\7\0"+
    "\1\11\16\0\1\11\14\0\2\11\2\1\6\0\1\1"+
    "\11\0\1\11\1\0\1\11\3\0\2\11\2\1\12\0"+
    "\1\1\3\0\1\11\4\0\1\1\3\0\1\1\7\0"+
    "\1\11\2\0\3\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\1\2\0\3\11\10\0\1\11\2\1\1\0\1\1"+
    "\4\0\1\11\7\0\1\1\6\0\1\11\2\0\1\11"+
    "\1\0\1\1\10\0\1\11\1\1\2\0\3\11\2\0"+
    "\1\11\1\1\1\11\2\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private void pm() {
      if (zzLexicalState == POST_MNEMONIC) yybegin(YYINITIAL);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { pm(); return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 92: break;
          case 2: 
            { pm(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 93: break;
          case 3: 
            { pm(); return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 94: break;
          case 4: 
            { pm(); return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 95: break;
          case 5: 
            { if(zzLexicalState == POST_MNEMONIC) {
            yybegin(MNEMONIC_SUFFIX);
        }
        return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 96: break;
          case 6: 
            { pm(); return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 97: break;
          case 7: 
            { pm(); return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 98: break;
          case 8: 
            { pm(); return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 99: break;
          case 9: 
            { pm(); return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 100: break;
          case 10: 
            { pm(); return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 101: break;
          case 11: 
            { pm(); return KickAssemblerTypes.ASTERISK;
            } 
            // fall through
          case 102: break;
          case 12: 
            { pm(); return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 103: break;
          case 13: 
            { pm(); return KickAssemblerTypes.LEFT_PARENTHESES;
            } 
            // fall through
          case 104: break;
          case 14: 
            { pm(); return KickAssemblerTypes.RIGHT_PARENTHESES;
            } 
            // fall through
          case 105: break;
          case 15: 
            { pm(); return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 106: break;
          case 16: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 107: break;
          case 17: 
            { pm(); return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 108: break;
          case 18: 
            { pm(); return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 109: break;
          case 19: 
            { pm(); return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 110: break;
          case 20: 
            { pm(); return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 111: break;
          case 21: 
            { pm(); return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 112: break;
          case 22: 
            { pm(); return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 113: break;
          case 23: 
            { pm(); return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 114: break;
          case 24: 
            { pm(); return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 115: break;
          case 25: 
            { pm(); return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 116: break;
          case 26: 
            { pm(); return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 117: break;
          case 27: 
            { pm(); return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 118: break;
          case 28: 
            { pm(); return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 119: break;
          case 29: 
            { return KickAssemblerTypes.STRING_VALUE;
            } 
            // fall through
          case 120: break;
          case 30: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.STRING_END;
            } 
            // fall through
          case 121: break;
          case 31: 
            { return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 122: break;
          case 32: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION;
            } 
            // fall through
          case 123: break;
          case 33: 
            { yybegin(YYINITIAL); return KickAssemblerTypes.MNEMONIC_EXTENSION_DEPRECATED;
            } 
            // fall through
          case 124: break;
          case 34: 
            { pm(); return KickAssemblerTypes.LABEL_DEF;
            } 
            // fall through
          case 125: break;
          case 35: 
            { pm(); return KickAssemblerTypes.MULTILABEL;
            } 
            // fall through
          case 126: break;
          case 36: 
            { pm(); return KickAssemblerTypes.MULTILABEL_DEF;
            } 
            // fall through
          case 127: break;
          case 37: 
            { pm(); return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 128: break;
          case 38: 
            { pm(); return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 129: break;
          case 39: 
            { pm(); return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 130: break;
          case 40: 
            { pm(); return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 131: break;
          case 41: 
            { pm(); return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 132: break;
          case 42: 
            { pm(); return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 133: break;
          case 43: 
            { pm(); return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 134: break;
          case 44: 
            { pm(); return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 135: break;
          case 45: 
            { pm(); return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 136: break;
          case 46: 
            { pm(); return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 137: break;
          case 47: 
            { pm(); return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 138: break;
          case 48: 
            { pm(); return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 139: break;
          case 49: 
            { pm(); return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 140: break;
          case 50: 
            { pm(); return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 141: break;
          case 51: 
            { pm(); return KickAssemblerTypes.AND;
            } 
            // fall through
          case 142: break;
          case 52: 
            { pm(); return KickAssemblerTypes.OR;
            } 
            // fall through
          case 143: break;
          case 53: 
            { yybegin(STRING_ESCAPE); return KickAssemblerTypes.STRING_ESCAPE_BEGIN;
            } 
            // fall through
          case 144: break;
          case 54: 
            { return KickAssemblerTypes.ESCAPE_CHAR;
            } 
            // fall through
          case 145: break;
          case 55: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 146: break;
          case 56: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PC;
            } 
            // fall through
          case 147: break;
          case 57: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DATA;
            } 
            // fall through
          case 148: break;
          case 58: 
            { yybegin(POST_MNEMONIC); return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 149: break;
          case 59: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 150: break;
          case 60: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_CPU;
            } 
            // fall through
          case 151: break;
          case 61: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FOR;
            } 
            // fall through
          case 152: break;
          case 62: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF;
            } 
            // fall through
          case 153: break;
          case 63: 
            { pm(); return KickAssemblerTypes.BOOLEAN;
            } 
            // fall through
          case 154: break;
          case 64: 
            { pm(); return KickAssemblerTypes.NULL;
            } 
            // fall through
          case 155: break;
          case 65: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DISK;
            } 
            // fall through
          case 156: break;
          case 66: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENUM;
            } 
            // fall through
          case 157: break;
          case 67: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_EVAL;
            } 
            // fall through
          case 158: break;
          case 68: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_PARAM;
            } 
            // fall through
          case 159: break;
          case 69: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ALIGN;
            } 
            // fall through
          case 160: break;
          case 70: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_UNARY;
            } 
            // fall through
          case 161: break;
          case 71: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEF_MACRO;
            } 
            // fall through
          case 162: break;
          case 72: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BREAK;
            } 
            // fall through
          case 163: break;
          case 73: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WATCH;
            } 
            // fall through
          case 164: break;
          case 74: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_WHILE;
            } 
            // fall through
          case 165: break;
          case 75: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ASSERT;
            } 
            // fall through
          case 166: break;
          case 76: 
            { pm(); return KickAssemblerTypes.DIRECTIVE;
            } 
            // fall through
          case 167: break;
          case 77: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORT;
            } 
            // fall through
          case 168: break;
          case 78: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_RETURN;
            } 
            // fall through
          case 169: break;
          case 79: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_DEFINE;
            } 
            // fall through
          case 170: break;
          case 80: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_MODIFY;
            } 
            // fall through
          case 171: break;
          case 81: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORT;
            } 
            // fall through
          case 172: break;
          case 82: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT;
            } 
            // fall through
          case 173: break;
          case 83: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_BINARY;
            } 
            // fall through
          case 174: break;
          case 84: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_ENCODING;
            } 
            // fall through
          case 175: break;
          case 85: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FUNCTION;
            } 
            // fall through
          case 176: break;
          case 86: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_NAMESPACE;
            } 
            // fall through
          case 177: break;
          case 87: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_SEGMENT_DEF;
            } 
            // fall through
          case 178: break;
          case 88: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_IMPORTONCE;
            } 
            // fall through
          case 179: break;
          case 89: 
            { pm(); return KickAssemblerTypes.DIRECTIVE_FILEMODIFY;
            } 
            // fall through
          case 180: break;
          case 90: 
            { pm(); return KickAssemblerTypes.PREPROCESSOR_IMPORTONCE;
            } 
            // fall through
          case 181: break;
          case 91: 
            { pm(); return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
